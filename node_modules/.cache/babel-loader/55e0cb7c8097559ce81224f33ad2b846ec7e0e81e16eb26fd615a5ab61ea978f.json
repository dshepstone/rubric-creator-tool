{"ast":null,"code":"// GradeBook Utility Functions\n// File: src/utils/gradebookUtils.js\n\n/**\r\n * Grade calculation and conversion utilities for the GradeBook component\r\n */\n\n// Grade conversion mappings\nexport const GRADE_MAPPINGS = {\n  degree: {\n    'A+': {\n      min: 97,\n      max: 100,\n      points: 4.0\n    },\n    'A': {\n      min: 93,\n      max: 96.99,\n      points: 4.0\n    },\n    'A-': {\n      min: 90,\n      max: 92.99,\n      points: 3.7\n    },\n    'B+': {\n      min: 87,\n      max: 89.99,\n      points: 3.3\n    },\n    'B': {\n      min: 83,\n      max: 86.99,\n      points: 3.0\n    },\n    'B-': {\n      min: 80,\n      max: 82.99,\n      points: 2.7\n    },\n    'C+': {\n      min: 77,\n      max: 79.99,\n      points: 2.3\n    },\n    'C': {\n      min: 73,\n      max: 76.99,\n      points: 2.0\n    },\n    'C-': {\n      min: 70,\n      max: 72.99,\n      points: 1.7\n    },\n    'D+': {\n      min: 67,\n      max: 69.99,\n      points: 1.3\n    },\n    'D': {\n      min: 63,\n      max: 66.99,\n      points: 1.0\n    },\n    'D-': {\n      min: 60,\n      max: 62.99,\n      points: 0.7\n    },\n    'F': {\n      min: 0,\n      max: 59.99,\n      points: 0.0\n    }\n  },\n  certificate: {\n    'A': {\n      min: 80,\n      max: 100,\n      points: 4.0\n    },\n    'B': {\n      min: 70,\n      max: 79.99,\n      points: 3.0\n    },\n    'C': {\n      min: 60,\n      max: 69.99,\n      points: 2.0\n    },\n    'F': {\n      min: 0,\n      max: 59.99,\n      points: 0.0\n    }\n  }\n};\n\n/**\r\n * Convert percentage to letter grade based on grading policy\r\n * @param {number} percentage - Grade percentage (0-100)\r\n * @param {string} policy - Grading policy ('degree', 'certificate', etc.)\r\n * @returns {string} Letter grade\r\n */\nexport const percentageToLetterGrade = (percentage, policy = 'degree') => {\n  if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\n    return 'N/A';\n  }\n  const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\n  for (const [grade, range] of Object.entries(gradeMap)) {\n    if (percentage >= range.min && percentage <= range.max) {\n      return grade;\n    }\n  }\n  return 'F';\n};\n\n/**\r\n * Convert letter grade to percentage (midpoint of range)\r\n * @param {string} letterGrade - Letter grade (A+, A, B+, etc.)\r\n * @param {string} policy - Grading policy\r\n * @returns {number} Percentage value\r\n */\nexport const letterGradeToPercentage = (letterGrade, policy = 'degree') => {\n  const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\n  const grade = gradeMap[letterGrade.toUpperCase()];\n  if (!grade) return 0;\n\n  // Return midpoint of the range\n  return Math.round((grade.min + grade.max) / 2);\n};\n\n/**\r\n * Parse various grade input formats\r\n * @param {string} input - Grade input string\r\n * @param {number} maxPoints - Maximum points for the assignment\r\n * @param {string} policy - Grading policy\r\n * @returns {Object} Parsed grade data\r\n */\nexport const parseGradeInput = (input, maxPoints = 100, policy = 'degree') => {\n  if (!input || typeof input !== 'string') {\n    return {\n      percentage: null,\n      letterGrade: null,\n      rawScore: null,\n      isValid: false\n    };\n  }\n  const trimmedInput = input.trim();\n\n  // Handle percentage input (85% or 85)\n  if (trimmedInput.includes('%')) {\n    const percentage = parseFloat(trimmedInput.replace('%', ''));\n    if (!isNaN(percentage) && percentage >= 0 && percentage <= 100) {\n      return {\n        percentage: Math.round(percentage * 100) / 100,\n        letterGrade: percentageToLetterGrade(percentage, policy),\n        rawScore: percentage / 100 * maxPoints,\n        isValid: true\n      };\n    }\n  }\n\n  // Handle fraction input (85/100)\n  if (trimmedInput.includes('/')) {\n    const [numerator, denominator] = trimmedInput.split('/').map(n => parseFloat(n.trim()));\n    if (!isNaN(numerator) && !isNaN(denominator) && denominator > 0) {\n      const percentage = numerator / denominator * 100;\n      return {\n        percentage: Math.round(percentage * 100) / 100,\n        letterGrade: percentageToLetterGrade(percentage, policy),\n        rawScore: numerator,\n        isValid: true\n      };\n    }\n  }\n\n  // Handle raw number input\n  const numericValue = parseFloat(trimmedInput);\n  if (!isNaN(numericValue)) {\n    // If number is <= 100, treat as percentage; otherwise as raw score\n    if (numericValue <= 100) {\n      return {\n        percentage: Math.round(numericValue * 100) / 100,\n        letterGrade: percentageToLetterGrade(numericValue, policy),\n        rawScore: numericValue / 100 * maxPoints,\n        isValid: true\n      };\n    } else {\n      // Treat as raw score\n      const percentage = numericValue / maxPoints * 100;\n      return {\n        percentage: Math.round(percentage * 100) / 100,\n        letterGrade: percentageToLetterGrade(percentage, policy),\n        rawScore: numericValue,\n        isValid: true\n      };\n    }\n  }\n\n  // Handle letter grade input\n  const letterGrade = trimmedInput.toUpperCase();\n  const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\n  if (gradeMap[letterGrade]) {\n    const percentage = letterGradeToPercentage(letterGrade, policy);\n    return {\n      percentage,\n      letterGrade,\n      rawScore: percentage / 100 * maxPoints,\n      isValid: true\n    };\n  }\n  return {\n    percentage: null,\n    letterGrade: null,\n    rawScore: null,\n    isValid: false\n  };\n};\n\n/**\r\n * Calculate weighted final grade for a student\r\n * @param {Array} projects - Array of project objects with weights\r\n * @param {Object} studentGrades - Student's grades for all projects\r\n * @returns {Object} Final grade calculation\r\n */\nexport const calculateWeightedGrade = (projects, studentGrades) => {\n  if (!projects || !studentGrades || projects.length === 0) {\n    return {\n      percentage: 0,\n      letterGrade: 'N/A',\n      weightedScore: 0,\n      totalWeight: 0\n    };\n  }\n  let totalWeightedScore = 0;\n  let totalWeight = 0;\n  let gradedProjects = 0;\n  projects.forEach(project => {\n    const gradeData = studentGrades[project.id];\n    if (gradeData && gradeData.percentage !== null && gradeData.percentage !== undefined) {\n      totalWeightedScore += gradeData.percentage * project.weight / 100;\n      totalWeight += project.weight;\n      gradedProjects++;\n    }\n  });\n  if (totalWeight === 0 || gradedProjects === 0) {\n    return {\n      percentage: 0,\n      letterGrade: 'N/A',\n      weightedScore: 0,\n      totalWeight: 0\n    };\n  }\n  const finalPercentage = totalWeightedScore / totalWeight * 100;\n  return {\n    percentage: Math.round(finalPercentage * 100) / 100,\n    letterGrade: percentageToLetterGrade(finalPercentage),\n    weightedScore: totalWeightedScore,\n    totalWeight,\n    gradedProjects\n  };\n};\n\n/**\r\n * Calculate class statistics\r\n * @param {Array} students - Array of student objects\r\n * @param {Array} projects - Array of project objects\r\n * @param {Object} grades - All grades data\r\n * @param {string} policy - Grading policy\r\n * @returns {Object} Class statistics\r\n */\nexport const calculateClassStatistics = (students, projects, grades, policy = 'degree') => {\n  if (!students || !projects || !grades || students.length === 0) {\n    return {\n      classAverage: 0,\n      highestGrade: 0,\n      lowestGrade: 0,\n      passingRate: 0,\n      totalStudents: 0,\n      gradedStudents: 0,\n      projectAverages: {},\n      gradeDistribution: {}\n    };\n  }\n\n  // Calculate final grades for all students\n  const finalGrades = students.map(student => {\n    const studentGrades = grades[student.id] || {};\n    const finalGrade = calculateWeightedGrade(projects, studentGrades);\n    return {\n      studentId: student.id,\n      percentage: finalGrade.percentage,\n      letterGrade: finalGrade.letterGrade\n    };\n  }).filter(grade => grade.percentage > 0);\n  if (finalGrades.length === 0) {\n    return {\n      classAverage: 0,\n      highestGrade: 0,\n      lowestGrade: 0,\n      passingRate: 0,\n      totalStudents: students.length,\n      gradedStudents: 0,\n      projectAverages: {},\n      gradeDistribution: {}\n    };\n  }\n\n  // Calculate basic statistics\n  const percentages = finalGrades.map(g => g.percentage);\n  const classAverage = percentages.reduce((sum, grade) => sum + grade, 0) / percentages.length;\n  const highestGrade = Math.max(...percentages);\n  const lowestGrade = Math.min(...percentages);\n  const passingGrades = percentages.filter(grade => grade >= 60).length;\n  const passingRate = passingGrades / percentages.length * 100;\n\n  // Calculate project averages\n  const projectAverages = {};\n  projects.forEach(project => {\n    const projectGrades = students.map(student => {\n      var _grades$student$id;\n      const gradeData = (_grades$student$id = grades[student.id]) === null || _grades$student$id === void 0 ? void 0 : _grades$student$id[project.id];\n      return gradeData === null || gradeData === void 0 ? void 0 : gradeData.percentage;\n    }).filter(grade => grade !== null && grade !== undefined);\n    if (projectGrades.length > 0) {\n      projectAverages[project.id] = {\n        average: Math.round(projectGrades.reduce((sum, grade) => sum + grade, 0) / projectGrades.length * 100) / 100,\n        highest: Math.max(...projectGrades),\n        lowest: Math.min(...projectGrades),\n        count: projectGrades.length\n      };\n    }\n  });\n\n  // Calculate grade distribution\n  const gradeDistribution = {};\n  const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\n  Object.keys(gradeMap).forEach(grade => {\n    gradeDistribution[grade] = 0;\n  });\n  finalGrades.forEach(grade => {\n    if (gradeDistribution.hasOwnProperty(grade.letterGrade)) {\n      gradeDistribution[grade.letterGrade]++;\n    }\n  });\n  return {\n    classAverage: Math.round(classAverage * 100) / 100,\n    highestGrade: Math.round(highestGrade * 100) / 100,\n    lowestGrade: Math.round(lowestGrade * 100) / 100,\n    passingRate: Math.round(passingRate * 100) / 100,\n    totalStudents: students.length,\n    gradedStudents: finalGrades.length,\n    projectAverages,\n    gradeDistribution\n  };\n};\n\n/**\r\n * Validate gradebook data structure\r\n * @param {Object} gradebookData - Gradebook data to validate\r\n * @returns {Object} Validation result\r\n */\nexport const validateGradebookData = gradebookData => {\n  const errors = [];\n  const warnings = [];\n\n  // Check required properties\n  if (!gradebookData.projects || !Array.isArray(gradebookData.projects)) {\n    errors.push('Projects array is required');\n  }\n  if (!gradebookData.students || !Array.isArray(gradebookData.students)) {\n    errors.push('Students array is required');\n  }\n  if (!gradebookData.grades || typeof gradebookData.grades !== 'object') {\n    errors.push('Grades object is required');\n  }\n\n  // Validate project weights\n  if (gradebookData.projects && gradebookData.projects.length > 0) {\n    const totalWeight = gradebookData.projects.reduce((sum, project) => sum + (project.weight || 0), 0);\n    if (Math.abs(totalWeight - 100) > 0.01) {\n      warnings.push(`Project weights total ${totalWeight}% (should be 100%)`);\n    }\n\n    // Check for duplicate project names\n    const projectNames = gradebookData.projects.map(p => p.name);\n    const duplicateNames = projectNames.filter((name, index) => projectNames.indexOf(name) !== index);\n    if (duplicateNames.length > 0) {\n      warnings.push(`Duplicate project names found: ${duplicateNames.join(', ')}`);\n    }\n  }\n\n  // Validate student data\n  if (gradebookData.students && gradebookData.students.length > 0) {\n    const studentIds = gradebookData.students.map(s => s.id);\n    const duplicateIds = studentIds.filter((id, index) => studentIds.indexOf(id) !== index);\n    if (duplicateIds.length > 0) {\n      errors.push(`Duplicate student IDs found: ${duplicateIds.join(', ')}`);\n    }\n  }\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n/**\r\n * Export gradebook data to Excel format\r\n * @param {Object} gradebookData - Complete gradebook data\r\n * @param {Object} statistics - Calculated statistics\r\n * @returns {Array} Array of arrays for Excel export\r\n */\nexport const formatGradebookForExcel = (gradebookData, statistics) => {\n  var _gradebookData$metada, _gradebookData$metada2, _gradebookData$metada3, _gradebookData$metada4;\n  const worksheetData = [];\n\n  // Header information\n  worksheetData.push(['Course:', ((_gradebookData$metada = gradebookData.metadata) === null || _gradebookData$metada === void 0 ? void 0 : _gradebookData$metada.courseName) || '']);\n  worksheetData.push(['Code:', ((_gradebookData$metada2 = gradebookData.metadata) === null || _gradebookData$metada2 === void 0 ? void 0 : _gradebookData$metada2.courseCode) || '']);\n  worksheetData.push(['Instructor:', ((_gradebookData$metada3 = gradebookData.metadata) === null || _gradebookData$metada3 === void 0 ? void 0 : _gradebookData$metada3.instructor) || '']);\n  worksheetData.push(['Term:', ((_gradebookData$metada4 = gradebookData.metadata) === null || _gradebookData$metada4 === void 0 ? void 0 : _gradebookData$metada4.term) || '']);\n  worksheetData.push(['Generated:', new Date().toLocaleString()]);\n  worksheetData.push([]); // Empty row\n\n  // Column headers\n  const headerRow = ['Student ID', 'Student Name', 'Email', 'Program'];\n  gradebookData.projects.forEach(project => {\n    headerRow.push(`${project.name} (${project.weight}%)`);\n  });\n  headerRow.push('Final %', 'Final Grade');\n  worksheetData.push(headerRow);\n\n  // Student data rows\n  gradebookData.students.forEach(student => {\n    const row = [student.id, student.name, student.email || '', student.program || ''];\n    gradebookData.projects.forEach(project => {\n      var _gradebookData$grades;\n      const gradeData = (_gradebookData$grades = gradebookData.grades[student.id]) === null || _gradebookData$grades === void 0 ? void 0 : _gradebookData$grades[project.id];\n      if (gradeData && gradeData.percentage !== null) {\n        row.push(gradeData.percentage);\n      } else {\n        row.push('');\n      }\n    });\n    const finalGrade = calculateWeightedGrade(gradebookData.projects, gradebookData.grades[student.id] || {});\n    row.push(finalGrade.percentage);\n    row.push(finalGrade.letterGrade);\n    worksheetData.push(row);\n  });\n\n  // Statistics section\n  worksheetData.push([]); // Empty row\n  worksheetData.push(['STATISTICS']);\n  worksheetData.push(['Class Average:', statistics.classAverage + '%']);\n  worksheetData.push(['Highest Grade:', statistics.highestGrade + '%']);\n  worksheetData.push(['Lowest Grade:', statistics.lowestGrade + '%']);\n  worksheetData.push(['Passing Rate:', statistics.passingRate + '%']);\n  worksheetData.push(['Total Students:', statistics.totalStudents]);\n  worksheetData.push(['Graded Students:', statistics.gradedStudents]);\n\n  // Project averages\n  if (Object.keys(statistics.projectAverages).length > 0) {\n    worksheetData.push([]); // Empty row\n    worksheetData.push(['PROJECT AVERAGES']);\n    gradebookData.projects.forEach(project => {\n      const avg = statistics.projectAverages[project.id];\n      if (avg) {\n        worksheetData.push([project.name + ':', avg.average + '%']);\n      }\n    });\n  }\n  return worksheetData;\n};\n\n/**\r\n * Generate a sample gradebook for testing\r\n * @param {number} studentCount - Number of students to generate\r\n * @param {number} projectCount - Number of projects to generate\r\n * @returns {Object} Sample gradebook data\r\n */\nexport const generateSampleGradebook = (studentCount = 10, projectCount = 4) => {\n  const students = [];\n  const projects = [];\n  const grades = {};\n\n  // Generate students\n  for (let i = 1; i <= studentCount; i++) {\n    students.push({\n      id: `STU${i.toString().padStart(3, '0')}`,\n      name: `Student ${i}`,\n      email: `student${i}@example.com`,\n      program: i % 3 === 0 ? 'Honors' : 'Regular'\n    });\n  }\n\n  // Generate projects\n  const projectNames = ['Assignment 1', 'Midterm Exam', 'Final Project', 'Participation'];\n  const weights = [25, 25, 35, 15];\n  for (let i = 0; i < projectCount; i++) {\n    projects.push({\n      id: `proj_${i + 1}`,\n      name: projectNames[i] || `Project ${i + 1}`,\n      maxPoints: 100,\n      weight: weights[i] || Math.round(100 / projectCount),\n      dueDate: new Date(Date.now() + i * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      description: `Sample project ${i + 1}`,\n      created: new Date().toISOString()\n    });\n  }\n\n  // Generate random grades\n  students.forEach(student => {\n    grades[student.id] = {};\n    projects.forEach(project => {\n      // Generate random grade between 60-95\n      const percentage = Math.round((Math.random() * 35 + 60) * 100) / 100;\n      grades[student.id][project.id] = {\n        percentage,\n        letterGrade: percentageToLetterGrade(percentage),\n        rawScore: percentage,\n        lastModified: new Date().toISOString()\n      };\n    });\n  });\n  return {\n    projects,\n    students,\n    grades,\n    metadata: {\n      courseName: 'Sample Course',\n      courseCode: 'SMPL101',\n      instructor: 'Dr. Sample',\n      term: 'Fall 2024',\n      created: new Date().toISOString(),\n      lastModified: new Date().toISOString(),\n      gradingPolicy: 'degree'\n    }\n  };\n};","map":{"version":3,"names":["GRADE_MAPPINGS","degree","min","max","points","certificate","percentageToLetterGrade","percentage","policy","gradeMap","grade","range","Object","entries","letterGradeToPercentage","letterGrade","toUpperCase","Math","round","parseGradeInput","input","maxPoints","rawScore","isValid","trimmedInput","trim","includes","parseFloat","replace","isNaN","numerator","denominator","split","map","n","numericValue","calculateWeightedGrade","projects","studentGrades","length","weightedScore","totalWeight","totalWeightedScore","gradedProjects","forEach","project","gradeData","id","undefined","weight","finalPercentage","calculateClassStatistics","students","grades","classAverage","highestGrade","lowestGrade","passingRate","totalStudents","gradedStudents","projectAverages","gradeDistribution","finalGrades","student","finalGrade","studentId","filter","percentages","g","reduce","sum","passingGrades","projectGrades","_grades$student$id","average","highest","lowest","count","keys","hasOwnProperty","validateGradebookData","gradebookData","errors","warnings","Array","isArray","push","abs","projectNames","p","name","duplicateNames","index","indexOf","join","studentIds","s","duplicateIds","formatGradebookForExcel","statistics","_gradebookData$metada","_gradebookData$metada2","_gradebookData$metada3","_gradebookData$metada4","worksheetData","metadata","courseName","courseCode","instructor","term","Date","toLocaleString","headerRow","row","email","program","_gradebookData$grades","avg","generateSampleGradebook","studentCount","projectCount","i","toString","padStart","weights","dueDate","now","toISOString","description","created","random","lastModified","gradingPolicy"],"sources":["C:/local clones/rubric-creation-app/src/utils/gradebookUtilis.js"],"sourcesContent":["// GradeBook Utility Functions\r\n// File: src/utils/gradebookUtils.js\r\n\r\n/**\r\n * Grade calculation and conversion utilities for the GradeBook component\r\n */\r\n\r\n// Grade conversion mappings\r\nexport const GRADE_MAPPINGS = {\r\n    degree: {\r\n        'A+': { min: 97, max: 100, points: 4.0 },\r\n        'A': { min: 93, max: 96.99, points: 4.0 },\r\n        'A-': { min: 90, max: 92.99, points: 3.7 },\r\n        'B+': { min: 87, max: 89.99, points: 3.3 },\r\n        'B': { min: 83, max: 86.99, points: 3.0 },\r\n        'B-': { min: 80, max: 82.99, points: 2.7 },\r\n        'C+': { min: 77, max: 79.99, points: 2.3 },\r\n        'C': { min: 73, max: 76.99, points: 2.0 },\r\n        'C-': { min: 70, max: 72.99, points: 1.7 },\r\n        'D+': { min: 67, max: 69.99, points: 1.3 },\r\n        'D': { min: 63, max: 66.99, points: 1.0 },\r\n        'D-': { min: 60, max: 62.99, points: 0.7 },\r\n        'F': { min: 0, max: 59.99, points: 0.0 }\r\n    },\r\n    certificate: {\r\n        'A': { min: 80, max: 100, points: 4.0 },\r\n        'B': { min: 70, max: 79.99, points: 3.0 },\r\n        'C': { min: 60, max: 69.99, points: 2.0 },\r\n        'F': { min: 0, max: 59.99, points: 0.0 }\r\n    }\r\n};\r\n\r\n/**\r\n * Convert percentage to letter grade based on grading policy\r\n * @param {number} percentage - Grade percentage (0-100)\r\n * @param {string} policy - Grading policy ('degree', 'certificate', etc.)\r\n * @returns {string} Letter grade\r\n */\r\nexport const percentageToLetterGrade = (percentage, policy = 'degree') => {\r\n    if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\r\n        return 'N/A';\r\n    }\r\n\r\n    const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\r\n\r\n    for (const [grade, range] of Object.entries(gradeMap)) {\r\n        if (percentage >= range.min && percentage <= range.max) {\r\n            return grade;\r\n        }\r\n    }\r\n\r\n    return 'F';\r\n};\r\n\r\n/**\r\n * Convert letter grade to percentage (midpoint of range)\r\n * @param {string} letterGrade - Letter grade (A+, A, B+, etc.)\r\n * @param {string} policy - Grading policy\r\n * @returns {number} Percentage value\r\n */\r\nexport const letterGradeToPercentage = (letterGrade, policy = 'degree') => {\r\n    const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\r\n    const grade = gradeMap[letterGrade.toUpperCase()];\r\n\r\n    if (!grade) return 0;\r\n\r\n    // Return midpoint of the range\r\n    return Math.round((grade.min + grade.max) / 2);\r\n};\r\n\r\n/**\r\n * Parse various grade input formats\r\n * @param {string} input - Grade input string\r\n * @param {number} maxPoints - Maximum points for the assignment\r\n * @param {string} policy - Grading policy\r\n * @returns {Object} Parsed grade data\r\n */\r\nexport const parseGradeInput = (input, maxPoints = 100, policy = 'degree') => {\r\n    if (!input || typeof input !== 'string') {\r\n        return { percentage: null, letterGrade: null, rawScore: null, isValid: false };\r\n    }\r\n\r\n    const trimmedInput = input.trim();\r\n\r\n    // Handle percentage input (85% or 85)\r\n    if (trimmedInput.includes('%')) {\r\n        const percentage = parseFloat(trimmedInput.replace('%', ''));\r\n        if (!isNaN(percentage) && percentage >= 0 && percentage <= 100) {\r\n            return {\r\n                percentage: Math.round(percentage * 100) / 100,\r\n                letterGrade: percentageToLetterGrade(percentage, policy),\r\n                rawScore: (percentage / 100) * maxPoints,\r\n                isValid: true\r\n            };\r\n        }\r\n    }\r\n\r\n    // Handle fraction input (85/100)\r\n    if (trimmedInput.includes('/')) {\r\n        const [numerator, denominator] = trimmedInput.split('/').map(n => parseFloat(n.trim()));\r\n        if (!isNaN(numerator) && !isNaN(denominator) && denominator > 0) {\r\n            const percentage = (numerator / denominator) * 100;\r\n            return {\r\n                percentage: Math.round(percentage * 100) / 100,\r\n                letterGrade: percentageToLetterGrade(percentage, policy),\r\n                rawScore: numerator,\r\n                isValid: true\r\n            };\r\n        }\r\n    }\r\n\r\n    // Handle raw number input\r\n    const numericValue = parseFloat(trimmedInput);\r\n    if (!isNaN(numericValue)) {\r\n        // If number is <= 100, treat as percentage; otherwise as raw score\r\n        if (numericValue <= 100) {\r\n            return {\r\n                percentage: Math.round(numericValue * 100) / 100,\r\n                letterGrade: percentageToLetterGrade(numericValue, policy),\r\n                rawScore: (numericValue / 100) * maxPoints,\r\n                isValid: true\r\n            };\r\n        } else {\r\n            // Treat as raw score\r\n            const percentage = (numericValue / maxPoints) * 100;\r\n            return {\r\n                percentage: Math.round(percentage * 100) / 100,\r\n                letterGrade: percentageToLetterGrade(percentage, policy),\r\n                rawScore: numericValue,\r\n                isValid: true\r\n            };\r\n        }\r\n    }\r\n\r\n    // Handle letter grade input\r\n    const letterGrade = trimmedInput.toUpperCase();\r\n    const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\r\n\r\n    if (gradeMap[letterGrade]) {\r\n        const percentage = letterGradeToPercentage(letterGrade, policy);\r\n        return {\r\n            percentage,\r\n            letterGrade,\r\n            rawScore: (percentage / 100) * maxPoints,\r\n            isValid: true\r\n        };\r\n    }\r\n\r\n    return { percentage: null, letterGrade: null, rawScore: null, isValid: false };\r\n};\r\n\r\n/**\r\n * Calculate weighted final grade for a student\r\n * @param {Array} projects - Array of project objects with weights\r\n * @param {Object} studentGrades - Student's grades for all projects\r\n * @returns {Object} Final grade calculation\r\n */\r\nexport const calculateWeightedGrade = (projects, studentGrades) => {\r\n    if (!projects || !studentGrades || projects.length === 0) {\r\n        return { percentage: 0, letterGrade: 'N/A', weightedScore: 0, totalWeight: 0 };\r\n    }\r\n\r\n    let totalWeightedScore = 0;\r\n    let totalWeight = 0;\r\n    let gradedProjects = 0;\r\n\r\n    projects.forEach(project => {\r\n        const gradeData = studentGrades[project.id];\r\n        if (gradeData && gradeData.percentage !== null && gradeData.percentage !== undefined) {\r\n            totalWeightedScore += (gradeData.percentage * project.weight) / 100;\r\n            totalWeight += project.weight;\r\n            gradedProjects++;\r\n        }\r\n    });\r\n\r\n    if (totalWeight === 0 || gradedProjects === 0) {\r\n        return { percentage: 0, letterGrade: 'N/A', weightedScore: 0, totalWeight: 0 };\r\n    }\r\n\r\n    const finalPercentage = (totalWeightedScore / totalWeight) * 100;\r\n\r\n    return {\r\n        percentage: Math.round(finalPercentage * 100) / 100,\r\n        letterGrade: percentageToLetterGrade(finalPercentage),\r\n        weightedScore: totalWeightedScore,\r\n        totalWeight,\r\n        gradedProjects\r\n    };\r\n};\r\n\r\n/**\r\n * Calculate class statistics\r\n * @param {Array} students - Array of student objects\r\n * @param {Array} projects - Array of project objects\r\n * @param {Object} grades - All grades data\r\n * @param {string} policy - Grading policy\r\n * @returns {Object} Class statistics\r\n */\r\nexport const calculateClassStatistics = (students, projects, grades, policy = 'degree') => {\r\n    if (!students || !projects || !grades || students.length === 0) {\r\n        return {\r\n            classAverage: 0,\r\n            highestGrade: 0,\r\n            lowestGrade: 0,\r\n            passingRate: 0,\r\n            totalStudents: 0,\r\n            gradedStudents: 0,\r\n            projectAverages: {},\r\n            gradeDistribution: {}\r\n        };\r\n    }\r\n\r\n    // Calculate final grades for all students\r\n    const finalGrades = students.map(student => {\r\n        const studentGrades = grades[student.id] || {};\r\n        const finalGrade = calculateWeightedGrade(projects, studentGrades);\r\n        return {\r\n            studentId: student.id,\r\n            percentage: finalGrade.percentage,\r\n            letterGrade: finalGrade.letterGrade\r\n        };\r\n    }).filter(grade => grade.percentage > 0);\r\n\r\n    if (finalGrades.length === 0) {\r\n        return {\r\n            classAverage: 0,\r\n            highestGrade: 0,\r\n            lowestGrade: 0,\r\n            passingRate: 0,\r\n            totalStudents: students.length,\r\n            gradedStudents: 0,\r\n            projectAverages: {},\r\n            gradeDistribution: {}\r\n        };\r\n    }\r\n\r\n    // Calculate basic statistics\r\n    const percentages = finalGrades.map(g => g.percentage);\r\n    const classAverage = percentages.reduce((sum, grade) => sum + grade, 0) / percentages.length;\r\n    const highestGrade = Math.max(...percentages);\r\n    const lowestGrade = Math.min(...percentages);\r\n    const passingGrades = percentages.filter(grade => grade >= 60).length;\r\n    const passingRate = (passingGrades / percentages.length) * 100;\r\n\r\n    // Calculate project averages\r\n    const projectAverages = {};\r\n    projects.forEach(project => {\r\n        const projectGrades = students.map(student => {\r\n            const gradeData = grades[student.id]?.[project.id];\r\n            return gradeData?.percentage;\r\n        }).filter(grade => grade !== null && grade !== undefined);\r\n\r\n        if (projectGrades.length > 0) {\r\n            projectAverages[project.id] = {\r\n                average: Math.round((projectGrades.reduce((sum, grade) => sum + grade, 0) / projectGrades.length) * 100) / 100,\r\n                highest: Math.max(...projectGrades),\r\n                lowest: Math.min(...projectGrades),\r\n                count: projectGrades.length\r\n            };\r\n        }\r\n    });\r\n\r\n    // Calculate grade distribution\r\n    const gradeDistribution = {};\r\n    const gradeMap = GRADE_MAPPINGS[policy] || GRADE_MAPPINGS.degree;\r\n\r\n    Object.keys(gradeMap).forEach(grade => {\r\n        gradeDistribution[grade] = 0;\r\n    });\r\n\r\n    finalGrades.forEach(grade => {\r\n        if (gradeDistribution.hasOwnProperty(grade.letterGrade)) {\r\n            gradeDistribution[grade.letterGrade]++;\r\n        }\r\n    });\r\n\r\n    return {\r\n        classAverage: Math.round(classAverage * 100) / 100,\r\n        highestGrade: Math.round(highestGrade * 100) / 100,\r\n        lowestGrade: Math.round(lowestGrade * 100) / 100,\r\n        passingRate: Math.round(passingRate * 100) / 100,\r\n        totalStudents: students.length,\r\n        gradedStudents: finalGrades.length,\r\n        projectAverages,\r\n        gradeDistribution\r\n    };\r\n};\r\n\r\n/**\r\n * Validate gradebook data structure\r\n * @param {Object} gradebookData - Gradebook data to validate\r\n * @returns {Object} Validation result\r\n */\r\nexport const validateGradebookData = (gradebookData) => {\r\n    const errors = [];\r\n    const warnings = [];\r\n\r\n    // Check required properties\r\n    if (!gradebookData.projects || !Array.isArray(gradebookData.projects)) {\r\n        errors.push('Projects array is required');\r\n    }\r\n\r\n    if (!gradebookData.students || !Array.isArray(gradebookData.students)) {\r\n        errors.push('Students array is required');\r\n    }\r\n\r\n    if (!gradebookData.grades || typeof gradebookData.grades !== 'object') {\r\n        errors.push('Grades object is required');\r\n    }\r\n\r\n    // Validate project weights\r\n    if (gradebookData.projects && gradebookData.projects.length > 0) {\r\n        const totalWeight = gradebookData.projects.reduce((sum, project) => sum + (project.weight || 0), 0);\r\n        if (Math.abs(totalWeight - 100) > 0.01) {\r\n            warnings.push(`Project weights total ${totalWeight}% (should be 100%)`);\r\n        }\r\n\r\n        // Check for duplicate project names\r\n        const projectNames = gradebookData.projects.map(p => p.name);\r\n        const duplicateNames = projectNames.filter((name, index) => projectNames.indexOf(name) !== index);\r\n        if (duplicateNames.length > 0) {\r\n            warnings.push(`Duplicate project names found: ${duplicateNames.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    // Validate student data\r\n    if (gradebookData.students && gradebookData.students.length > 0) {\r\n        const studentIds = gradebookData.students.map(s => s.id);\r\n        const duplicateIds = studentIds.filter((id, index) => studentIds.indexOf(id) !== index);\r\n        if (duplicateIds.length > 0) {\r\n            errors.push(`Duplicate student IDs found: ${duplicateIds.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    return {\r\n        isValid: errors.length === 0,\r\n        errors,\r\n        warnings\r\n    };\r\n};\r\n\r\n/**\r\n * Export gradebook data to Excel format\r\n * @param {Object} gradebookData - Complete gradebook data\r\n * @param {Object} statistics - Calculated statistics\r\n * @returns {Array} Array of arrays for Excel export\r\n */\r\nexport const formatGradebookForExcel = (gradebookData, statistics) => {\r\n    const worksheetData = [];\r\n\r\n    // Header information\r\n    worksheetData.push(['Course:', gradebookData.metadata?.courseName || '']);\r\n    worksheetData.push(['Code:', gradebookData.metadata?.courseCode || '']);\r\n    worksheetData.push(['Instructor:', gradebookData.metadata?.instructor || '']);\r\n    worksheetData.push(['Term:', gradebookData.metadata?.term || '']);\r\n    worksheetData.push(['Generated:', new Date().toLocaleString()]);\r\n    worksheetData.push([]); // Empty row\r\n\r\n    // Column headers\r\n    const headerRow = ['Student ID', 'Student Name', 'Email', 'Program'];\r\n    gradebookData.projects.forEach(project => {\r\n        headerRow.push(`${project.name} (${project.weight}%)`);\r\n    });\r\n    headerRow.push('Final %', 'Final Grade');\r\n    worksheetData.push(headerRow);\r\n\r\n    // Student data rows\r\n    gradebookData.students.forEach(student => {\r\n        const row = [student.id, student.name, student.email || '', student.program || ''];\r\n\r\n        gradebookData.projects.forEach(project => {\r\n            const gradeData = gradebookData.grades[student.id]?.[project.id];\r\n            if (gradeData && gradeData.percentage !== null) {\r\n                row.push(gradeData.percentage);\r\n            } else {\r\n                row.push('');\r\n            }\r\n        });\r\n\r\n        const finalGrade = calculateWeightedGrade(gradebookData.projects, gradebookData.grades[student.id] || {});\r\n        row.push(finalGrade.percentage);\r\n        row.push(finalGrade.letterGrade);\r\n\r\n        worksheetData.push(row);\r\n    });\r\n\r\n    // Statistics section\r\n    worksheetData.push([]); // Empty row\r\n    worksheetData.push(['STATISTICS']);\r\n    worksheetData.push(['Class Average:', statistics.classAverage + '%']);\r\n    worksheetData.push(['Highest Grade:', statistics.highestGrade + '%']);\r\n    worksheetData.push(['Lowest Grade:', statistics.lowestGrade + '%']);\r\n    worksheetData.push(['Passing Rate:', statistics.passingRate + '%']);\r\n    worksheetData.push(['Total Students:', statistics.totalStudents]);\r\n    worksheetData.push(['Graded Students:', statistics.gradedStudents]);\r\n\r\n    // Project averages\r\n    if (Object.keys(statistics.projectAverages).length > 0) {\r\n        worksheetData.push([]); // Empty row\r\n        worksheetData.push(['PROJECT AVERAGES']);\r\n        gradebookData.projects.forEach(project => {\r\n            const avg = statistics.projectAverages[project.id];\r\n            if (avg) {\r\n                worksheetData.push([project.name + ':', avg.average + '%']);\r\n            }\r\n        });\r\n    }\r\n\r\n    return worksheetData;\r\n};\r\n\r\n/**\r\n * Generate a sample gradebook for testing\r\n * @param {number} studentCount - Number of students to generate\r\n * @param {number} projectCount - Number of projects to generate\r\n * @returns {Object} Sample gradebook data\r\n */\r\nexport const generateSampleGradebook = (studentCount = 10, projectCount = 4) => {\r\n    const students = [];\r\n    const projects = [];\r\n    const grades = {};\r\n\r\n    // Generate students\r\n    for (let i = 1; i <= studentCount; i++) {\r\n        students.push({\r\n            id: `STU${i.toString().padStart(3, '0')}`,\r\n            name: `Student ${i}`,\r\n            email: `student${i}@example.com`,\r\n            program: i % 3 === 0 ? 'Honors' : 'Regular'\r\n        });\r\n    }\r\n\r\n    // Generate projects\r\n    const projectNames = ['Assignment 1', 'Midterm Exam', 'Final Project', 'Participation'];\r\n    const weights = [25, 25, 35, 15];\r\n\r\n    for (let i = 0; i < projectCount; i++) {\r\n        projects.push({\r\n            id: `proj_${i + 1}`,\r\n            name: projectNames[i] || `Project ${i + 1}`,\r\n            maxPoints: 100,\r\n            weight: weights[i] || Math.round(100 / projectCount),\r\n            dueDate: new Date(Date.now() + (i * 7 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],\r\n            description: `Sample project ${i + 1}`,\r\n            created: new Date().toISOString()\r\n        });\r\n    }\r\n\r\n    // Generate random grades\r\n    students.forEach(student => {\r\n        grades[student.id] = {};\r\n        projects.forEach(project => {\r\n            // Generate random grade between 60-95\r\n            const percentage = Math.round((Math.random() * 35 + 60) * 100) / 100;\r\n            grades[student.id][project.id] = {\r\n                percentage,\r\n                letterGrade: percentageToLetterGrade(percentage),\r\n                rawScore: percentage,\r\n                lastModified: new Date().toISOString()\r\n            };\r\n        });\r\n    });\r\n\r\n    return {\r\n        projects,\r\n        students,\r\n        grades,\r\n        metadata: {\r\n            courseName: 'Sample Course',\r\n            courseCode: 'SMPL101',\r\n            instructor: 'Dr. Sample',\r\n            term: 'Fall 2024',\r\n            created: new Date().toISOString(),\r\n            lastModified: new Date().toISOString(),\r\n            gradingPolicy: 'degree'\r\n        }\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}