{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n\n  // Shared course-details state (for your GradingTemplate’s setSharedCourseDetails)\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n\n  // Active tab state\n  const [activeTab, setActiveTab] = useState('rubric-creator');\n  // ─── Persist imported class-list across tabs ───────────────────────\n  const [classList, setClassList] = useState(null);\n\n  // ─── Which student is being graded right now ──────────────────────\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ─── In-progress grading drafts, keyed by student ID ─────────────\n  const [drafts, setDrafts] = useState({});\n  // Separate storage for final (submitted) grades\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // When you save final, move it out of drafts\n  function saveFinalGrade(studentId, data) {\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: data\n    }));\n    setDrafts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[studentId];\n      return updated;\n    });\n  }\n\n  // Tell UI if a student is 'draft', 'final' or 'not_started'\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n\n  // ─── Batch grading session state ───────────────────────────────────\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Comprehensive persistent form data for grading tool\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // Replace the existing navigation functions in SharedContext.js:\n  // Navigate to next student in grading session\n  const nextStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !classList || gradingSession.currentStudentIndex >= classList.students.length - 1) {\n      return false; // End of session or no active session\n    }\n    const nextIndex = gradingSession.currentStudentIndex + 1;\n    const nextStudent = classList.students[nextIndex];\n\n    // Update session state\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: nextIndex,\n      currentStudent: nextStudent,\n      gradedStudents: [...prev.gradedStudents, classList.students[gradingSession.currentStudentIndex].id]\n    }));\n\n    // Update current student\n    setCurrentStudent(nextStudent);\n\n    // Update grading form data with new student info\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: nextStudent.name,\n        id: nextStudent.id,\n        email: nextStudent.email\n      }\n    }));\n\n    // Update class list progress\n    const updatedProgress = [...classList.gradingProgress];\n    updatedProgress[gradingSession.currentStudentIndex] = {\n      ...updatedProgress[gradingSession.currentStudentIndex],\n      status: 'completed',\n      lastModified: new Date().toISOString()\n    };\n    setClassList(prev => ({\n      ...prev,\n      gradingProgress: updatedProgress\n    }));\n    return true; // Successfully moved to next student\n  }, [gradingSession, classList, setGradingSession, setCurrentStudent, setClassList, setGradingFormData]);\n\n  // Navigate to previous student in grading session\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || gradingSession.currentStudentIndex <= 0) {\n      return false;\n    }\n    const prevIndex = gradingSession.currentStudentIndex - 1;\n    const prevStudent = classList.students[prevIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: prevIndex,\n      currentStudent: prevStudent\n    }));\n    setCurrentStudent(prevStudent);\n\n    // Update grading form data with student info\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: prevStudent.name,\n        id: prevStudent.id,\n        email: prevStudent.email\n      }\n    }));\n    return true;\n  }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\n\n  // Jump to specific student by index\n  const jumpToStudentInSession = useCallback(index => {\n    if (!gradingSession.active || !classList || index < 0 || index >= classList.students.length) {\n      return false;\n    }\n    const targetStudent = classList.students[index];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: index,\n      currentStudent: targetStudent\n    }));\n    setCurrentStudent(targetStudent);\n\n    // Update grading form data with student info\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: targetStudent.name,\n        id: targetStudent.id,\n        email: targetStudent.email\n      }\n    }));\n    return true;\n  }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\n\n  // Update grading session state\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, [setGradingSession]);\n\n  // Persistent form data for rubric creator\n  const [rubricFormData, setRubricFormData] = useState({\n    assignmentInfo: {\n      title: '',\n      description: '',\n      weight: 25,\n      passingThreshold: 60,\n      totalPoints: 100\n    },\n    rubricLevels: [{\n      level: 'incomplete',\n      name: 'Incomplete',\n      description: 'No submission or unusable',\n      color: '#95a5a6',\n      multiplier: 0\n    }, {\n      level: 'unacceptable',\n      name: 'Unacceptable',\n      description: 'Below minimum standards',\n      color: '#e74c3c',\n      multiplier: 0.3\n    }, {\n      level: 'developing',\n      name: 'Developing',\n      description: 'Approaching standards',\n      color: '#f39c12',\n      multiplier: 0.55\n    }, {\n      level: 'acceptable',\n      name: 'Acceptable (PASS)',\n      description: 'Meets minimum standards',\n      color: '#27ae60',\n      multiplier: 0.7\n    }, {\n      level: 'emerging',\n      name: 'Emerging',\n      description: 'Above standard expectations',\n      color: '#2980b9',\n      multiplier: 0.82\n    }, {\n      level: 'accomplished',\n      name: 'Accomplished',\n      description: 'Strong professional quality',\n      color: '#16a085',\n      multiplier: 0.92\n    }, {\n      level: 'exceptional',\n      name: 'Exceptional',\n      description: 'Outstanding professional quality',\n      color: '#8e44ad',\n      multiplier: 1.0\n    }],\n    criteria: [{\n      id: 'criterion-1',\n      name: '',\n      description: '',\n      maxPoints: 20,\n      weight: 20,\n      levels: {},\n      feedbackLibrary: {\n        strengths: [],\n        improvements: [],\n        general: []\n      }\n    }],\n    pointingSystem: 'multiplier',\n    reversedOrder: false,\n    expandedFeedback: {},\n    modalEdit: {\n      show: false,\n      content: '',\n      field: null,\n      onSave: null\n    }\n  });\n\n  // Transfer rubric to grading tool and switch tabs\n  const transferRubricToGrading = useCallback(rubricData => {\n    setSharedRubric(rubricData);\n\n    // Update grading form data with rubric information\n    setGradingFormData(prev => {\n      var _rubricData$assignmen, _rubricData$assignmen2;\n      return {\n        ...prev,\n        assignment: {\n          ...prev.assignment,\n          name: ((_rubricData$assignmen = rubricData.assignmentInfo) === null || _rubricData$assignmen === void 0 ? void 0 : _rubricData$assignmen.title) || prev.assignment.name,\n          maxPoints: ((_rubricData$assignmen2 = rubricData.assignmentInfo) === null || _rubricData$assignmen2 === void 0 ? void 0 : _rubricData$assignmen2.totalPoints) || prev.assignment.maxPoints\n        },\n        metadata: {\n          ...prev.metadata,\n          rubricIntegrated: true\n        }\n      };\n    });\n    setActiveTab('grading-tool');\n  }, []);\n\n  // Enhanced transfer function that preserves all form data\n  const transferRubricToGradingWithDetails = useCallback(rubricData => {\n    setSharedRubric(rubricData);\n\n    // Update grading form data with rubric information\n    setGradingFormData(prev => {\n      var _rubricData$assignmen3, _rubricData$assignmen4;\n      return {\n        ...prev,\n        assignment: {\n          ...prev.assignment,\n          name: ((_rubricData$assignmen3 = rubricData.assignmentInfo) === null || _rubricData$assignmen3 === void 0 ? void 0 : _rubricData$assignmen3.title) || prev.assignment.name,\n          maxPoints: ((_rubricData$assignmen4 = rubricData.assignmentInfo) === null || _rubricData$assignmen4 === void 0 ? void 0 : _rubricData$assignmen4.totalPoints) || prev.assignment.maxPoints\n        },\n        metadata: {\n          ...prev.metadata,\n          rubricIntegrated: true\n        }\n      };\n    });\n    setActiveTab('grading-tool');\n  }, []);\n\n  // Update functions for grading form data\n  const updateGradingFormData = useCallback(updates => {\n    setGradingFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const updateStudentInfo = useCallback(studentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...studentInfo\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(courseInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...courseInfo\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignmentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback(feedbackInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        ...feedbackInfo\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicy = useCallback(latePolicy => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy\n    }));\n  }, []);\n  const updateRubricGrading = useCallback(rubricGrading => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading\n    }));\n  }, []);\n  const updateMetadata = useCallback(metadata => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        ...metadata\n      }\n    }));\n  }, []);\n\n  // Update functions for rubric form data\n  const updateRubricFormData = useCallback(updates => {\n    setRubricFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const updateRubricAssignmentInfo = useCallback(assignmentInfo => {\n    setRubricFormData(prev => ({\n      ...prev,\n      assignmentInfo: {\n        ...prev.assignmentInfo,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateRubricCriteria = useCallback(criteria => {\n    setRubricFormData(prev => ({\n      ...prev,\n      criteria\n    }));\n  }, []);\n  const updateRubricLevels = useCallback(rubricLevels => {\n    setRubricFormData(prev => ({\n      ...prev,\n      rubricLevels\n    }));\n  }, []);\n  const updateRubricSettings = useCallback(settings => {\n    setRubricFormData(prev => ({\n      ...prev,\n      ...settings\n    }));\n  }, []);\n\n  // Clear functions\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      assignmentInfo: {\n        title: '',\n        description: '',\n        weight: 25,\n        passingThreshold: 60,\n        totalPoints: 100\n      },\n      rubricLevels: [{\n        level: 'incomplete',\n        name: 'Incomplete',\n        description: 'No submission or unusable',\n        color: '#95a5a6',\n        multiplier: 0\n      }, {\n        level: 'unacceptable',\n        name: 'Unacceptable',\n        description: 'Below minimum standards',\n        color: '#e74c3c',\n        multiplier: 0.3\n      }, {\n        level: 'developing',\n        name: 'Developing',\n        description: 'Approaching standards',\n        color: '#f39c12',\n        multiplier: 0.55\n      }, {\n        level: 'acceptable',\n        name: 'Acceptable (PASS)',\n        description: 'Meets minimum standards',\n        color: '#27ae60',\n        multiplier: 0.7\n      }, {\n        level: 'emerging',\n        name: 'Emerging',\n        description: 'Above standard expectations',\n        color: '#2980b9',\n        multiplier: 0.82\n      }, {\n        level: 'accomplished',\n        name: 'Accomplished',\n        description: 'Strong professional quality',\n        color: '#16a085',\n        multiplier: 0.92\n      }, {\n        level: 'exceptional',\n        name: 'Exceptional',\n        description: 'Outstanding professional quality',\n        color: '#8e44ad',\n        multiplier: 1.0\n      }],\n      criteria: [{\n        id: 'criterion-1',\n        name: '',\n        description: '',\n        maxPoints: 20,\n        weight: 20,\n        levels: {},\n        feedbackLibrary: {\n          strengths: [],\n          improvements: [],\n          general: []\n        }\n      }],\n      pointingSystem: 'multiplier',\n      reversedOrder: false,\n      expandedFeedback: {},\n      modalEdit: {\n        show: false,\n        content: '',\n        field: null,\n        onSave: null\n      }\n    });\n  }, []);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    clearGradingFormData();\n    clearRubricFormData();\n  }, [clearGradingFormData, clearRubricFormData]);\n\n  // ─── Draft save/load ───────────────────────────────────────────────\n  function saveDraft(studentId, data) {\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: data\n    }));\n  }\n  function loadDraft(studentId) {\n    return drafts[studentId] || null;\n  }\n\n  // Helper to check if a student has a saved draft\n  const hasDraft = useCallback(studentId => {\n    return studentId && drafts[studentId] != null;\n  }, [drafts]);\n\n  // Initialize grading session with first student\n  const initializeGradingSession = useCallback(classListData => {\n    if (!classListData || !classListData.students.length) {\n      return false;\n    }\n    const firstStudent = classListData.students[0];\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: classListData.students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // Load first student into grading form\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: firstStudent.name,\n        id: firstStudent.id,\n        email: firstStudent.email\n      }\n    }));\n\n    // Auto-populate course from Excel import\n    if (classListData.courseMetadata) {\n      updateCourseInfo({\n        code: classListData.courseMetadata.courseCode || '',\n        name: classListData.courseMetadata.courseName || '',\n        instructor: classListData.courseMetadata.professors || '',\n        term: classListData.courseMetadata.term || ''\n      });\n    }\n\n    // Auto-populate assignment from loaded rubric\n    if (sharedRubric !== null && sharedRubric !== void 0 && sharedRubric.assignmentInfo) {\n      updateAssignmentInfo({\n        name: sharedRubric.assignmentInfo.title || '',\n        maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\n      });\n    }\n    return true;\n  }, [setGradingSession, setCurrentStudent, setGradingFormData, updateCourseInfo, updateAssignmentInfo, sharedRubric]);\n\n  // Legacy compatibility - map persistent form data\n  const persistentFormData = gradingFormData;\n  const updatePersistentFormData = updateGradingFormData;\n  const value = {\n    // Shared state\n    sharedRubric,\n    setSharedRubric,\n    // Navigation\n    activeTab,\n    setActiveTab,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingFormData,\n    setGradingData: setGradingFormData,\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicy,\n    updateRubricGrading,\n    updateMetadata,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    updateRubricFormData,\n    updateRubricAssignmentInfo,\n    updateRubricCriteria,\n    updateRubricLevels,\n    updateRubricSettings,\n    // Actions - rubric management\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    // Actions - clear functions\n    clearGradingFormData,\n    clearRubricFormData,\n    clearAllData,\n    // ─── Class & grading flow ────────────────────────────────────────\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    drafts,\n    saveDraft,\n    loadDraft,\n    hasDraft,\n    nextStudentInSession,\n    previousStudentInSession,\n    jumpToStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // ─── Expose grading session ───────────────────────────────────────\n    gradingSession,\n    setGradingSession,\n    // Legacy compatibility\n    persistentFormData,\n    updatePersistentFormData,\n    sharedCourseDetails,\n    setSharedCourseDetails\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 612,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"piX7pFGKBcjHktUvIqLsKOcIiUI=\");\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","saveFinalGrade","studentId","data","prev","updated","getGradeStatus","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","nextStudentInSession","students","length","nextIndex","nextStudent","updatedProgress","gradingProgress","status","lastModified","Date","toISOString","previousStudentInSession","prevIndex","prevStudent","jumpToStudentInSession","index","targetStudent","updateGradingSession","updates","rubricFormData","setRubricFormData","assignmentInfo","title","description","weight","passingThreshold","totalPoints","rubricLevels","color","multiplier","criteria","levels","feedbackLibrary","pointingSystem","reversedOrder","expandedFeedback","modalEdit","show","content","field","onSave","transferRubricToGrading","rubricData","_rubricData$assignmen","_rubricData$assignmen2","transferRubricToGradingWithDetails","_rubricData$assignmen3","_rubricData$assignmen4","updateGradingFormData","updateStudentInfo","studentInfo","updateCourseInfo","courseInfo","updateAssignmentInfo","updateFeedbackInfo","feedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicy","updateRubricGrading","updateMetadata","updateRubricFormData","updateRubricAssignmentInfo","updateRubricCriteria","updateRubricLevels","updateRubricSettings","settings","clearSharedRubric","clearGradingFormData","clearRubricFormData","clearAllData","saveDraft","loadDraft","hasDraft","initializeGradingSession","classListData","firstStudent","session","courseMetadata","courseCode","courseName","professors","persistentFormData","updatePersistentFormData","value","gradingData","setGradingData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n\r\n    // Shared course-details state (for your GradingTemplate’s setSharedCourseDetails)\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n\r\n    // Active tab state\r\n    const [activeTab, setActiveTab] = useState('rubric-creator');\r\n    // ─── Persist imported class-list across tabs ───────────────────────\r\n    const [classList, setClassList] = useState(null);\r\n\r\n    // ─── Which student is being graded right now ──────────────────────\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ─── In-progress grading drafts, keyed by student ID ─────────────\r\n    const [drafts, setDrafts] = useState({});\r\n    // Separate storage for final (submitted) grades\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // When you save final, move it out of drafts\r\n    function saveFinalGrade(studentId, data) {\r\n        setFinalGrades(prev => ({ ...prev, [studentId]: data }));\r\n        setDrafts(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[studentId];\r\n            return updated;\r\n        });\r\n    }\r\n\r\n    // Tell UI if a student is 'draft', 'final' or 'not_started'\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    // ─── Batch grading session state ───────────────────────────────────\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Comprehensive persistent form data for grading tool\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // Replace the existing navigation functions in SharedContext.js:\r\n    // Navigate to next student in grading session\r\n    const nextStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !classList || gradingSession.currentStudentIndex >= classList.students.length - 1) {\r\n            return false; // End of session or no active session\r\n        }\r\n\r\n        const nextIndex = gradingSession.currentStudentIndex + 1;\r\n        const nextStudent = classList.students[nextIndex];\r\n\r\n        // Update session state\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: nextIndex,\r\n            currentStudent: nextStudent,\r\n            gradedStudents: [...prev.gradedStudents, classList.students[gradingSession.currentStudentIndex].id]\r\n        }));\r\n\r\n        // Update current student\r\n        setCurrentStudent(nextStudent);\r\n\r\n        // Update grading form data with new student info\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: nextStudent.name,\r\n                id: nextStudent.id,\r\n                email: nextStudent.email\r\n            }\r\n        }));\r\n\r\n        // Update class list progress\r\n        const updatedProgress = [...classList.gradingProgress];\r\n        updatedProgress[gradingSession.currentStudentIndex] = {\r\n            ...updatedProgress[gradingSession.currentStudentIndex],\r\n            status: 'completed',\r\n            lastModified: new Date().toISOString()\r\n        };\r\n\r\n        setClassList(prev => ({\r\n            ...prev,\r\n            gradingProgress: updatedProgress\r\n        }));\r\n\r\n        return true; // Successfully moved to next student\r\n    }, [gradingSession, classList, setGradingSession, setCurrentStudent, setClassList, setGradingFormData]);\r\n\r\n    // Navigate to previous student in grading session\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || gradingSession.currentStudentIndex <= 0) {\r\n            return false;\r\n        }\r\n\r\n        const prevIndex = gradingSession.currentStudentIndex - 1;\r\n        const prevStudent = classList.students[prevIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: prevIndex,\r\n            currentStudent: prevStudent\r\n        }));\r\n\r\n        setCurrentStudent(prevStudent);\r\n\r\n        // Update grading form data with student info\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: prevStudent.name,\r\n                id: prevStudent.id,\r\n                email: prevStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\r\n\r\n    // Jump to specific student by index\r\n    const jumpToStudentInSession = useCallback((index) => {\r\n        if (!gradingSession.active || !classList || index < 0 || index >= classList.students.length) {\r\n            return false;\r\n        }\r\n\r\n        const targetStudent = classList.students[index];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: index,\r\n            currentStudent: targetStudent\r\n        }));\r\n\r\n        setCurrentStudent(targetStudent);\r\n\r\n        // Update grading form data with student info\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: targetStudent.name,\r\n                id: targetStudent.id,\r\n                email: targetStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\r\n\r\n\r\n    // Update grading session state\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, [setGradingSession]);\r\n\r\n    // Persistent form data for rubric creator\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        assignmentInfo: {\r\n            title: '',\r\n            description: '',\r\n            weight: 25,\r\n            passingThreshold: 60,\r\n            totalPoints: 100\r\n        },\r\n        rubricLevels: [\r\n            { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n            { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n            { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n            { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n            { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n            { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n            { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n        ],\r\n        criteria: [\r\n            {\r\n                id: 'criterion-1',\r\n                name: '',\r\n                description: '',\r\n                maxPoints: 20,\r\n                weight: 20,\r\n                levels: {},\r\n                feedbackLibrary: {\r\n                    strengths: [],\r\n                    improvements: [],\r\n                    general: []\r\n                }\r\n            }\r\n        ],\r\n        pointingSystem: 'multiplier',\r\n        reversedOrder: false,\r\n        expandedFeedback: {},\r\n        modalEdit: { show: false, content: '', field: null, onSave: null }\r\n    });\r\n\r\n    // Transfer rubric to grading tool and switch tabs\r\n    const transferRubricToGrading = useCallback((rubricData) => {\r\n        setSharedRubric(rubricData);\r\n\r\n        // Update grading form data with rubric information\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: {\r\n                ...prev.assignment,\r\n                name: rubricData.assignmentInfo?.title || prev.assignment.name,\r\n                maxPoints: rubricData.assignmentInfo?.totalPoints || prev.assignment.maxPoints\r\n            },\r\n            metadata: {\r\n                ...prev.metadata,\r\n                rubricIntegrated: true\r\n            }\r\n        }));\r\n\r\n        setActiveTab('grading-tool');\r\n    }, []);\r\n\r\n    // Enhanced transfer function that preserves all form data\r\n    const transferRubricToGradingWithDetails = useCallback((rubricData) => {\r\n        setSharedRubric(rubricData);\r\n\r\n        // Update grading form data with rubric information\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: {\r\n                ...prev.assignment,\r\n                name: rubricData.assignmentInfo?.title || prev.assignment.name,\r\n                maxPoints: rubricData.assignmentInfo?.totalPoints || prev.assignment.maxPoints\r\n            },\r\n            metadata: {\r\n                ...prev.metadata,\r\n                rubricIntegrated: true\r\n            }\r\n        }));\r\n\r\n        setActiveTab('grading-tool');\r\n    }, []);\r\n\r\n    // Update functions for grading form data\r\n    const updateGradingFormData = useCallback((updates) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    const updateStudentInfo = useCallback((studentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                ...prev.student,\r\n                ...studentInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((courseInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: {\r\n                ...prev.course,\r\n                ...courseInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: {\r\n                ...prev.assignment,\r\n                ...assignmentInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((feedbackInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: {\r\n                ...prev.feedback,\r\n                ...feedbackInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicy = useCallback((latePolicy) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((rubricGrading) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((metadata) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: {\r\n                ...prev.metadata,\r\n                ...metadata\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    // Update functions for rubric form data\r\n    const updateRubricFormData = useCallback((updates) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            assignmentInfo: {\r\n                ...prev.assignmentInfo,\r\n                ...assignmentInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricCriteria = useCallback((criteria) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            criteria\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricLevels = useCallback((rubricLevels) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            rubricLevels\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricSettings = useCallback((settings) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            ...settings\r\n        }));\r\n    }, []);\r\n\r\n    // Clear functions\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            assignmentInfo: {\r\n                title: '',\r\n                description: '',\r\n                weight: 25,\r\n                passingThreshold: 60,\r\n                totalPoints: 100\r\n            },\r\n            rubricLevels: [\r\n                { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n                { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n                { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n                { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n                { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n                { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n                { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n            ],\r\n            criteria: [\r\n                {\r\n                    id: 'criterion-1',\r\n                    name: '',\r\n                    description: '',\r\n                    maxPoints: 20,\r\n                    weight: 20,\r\n                    levels: {},\r\n                    feedbackLibrary: {\r\n                        strengths: [],\r\n                        improvements: [],\r\n                        general: []\r\n                    }\r\n                }\r\n            ],\r\n            pointingSystem: 'multiplier',\r\n            reversedOrder: false,\r\n            expandedFeedback: {},\r\n            modalEdit: { show: false, content: '', field: null, onSave: null }\r\n        });\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n    }, [clearGradingFormData, clearRubricFormData]);\r\n\r\n    // ─── Draft save/load ───────────────────────────────────────────────\r\n    function saveDraft(studentId, data) {\r\n        setDrafts(prev => ({ ...prev, [studentId]: data }));\r\n    }\r\n    function loadDraft(studentId) {\r\n        return drafts[studentId] || null;\r\n    }\r\n\r\n    // Helper to check if a student has a saved draft\r\n    const hasDraft = useCallback((studentId) => {\r\n        return studentId && drafts[studentId] != null;\r\n    }, [drafts]);\r\n\r\n    // Initialize grading session with first student\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        if (!classListData || !classListData.students.length) {\r\n            return false;\r\n        }\r\n\r\n        const firstStudent = classListData.students[0];\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: classListData.students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // Load first student into grading form\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            }\r\n        }));\r\n\r\n        // Auto-populate course from Excel import\r\n        if (classListData.courseMetadata) {\r\n            updateCourseInfo({\r\n                code: classListData.courseMetadata.courseCode || '',\r\n                name: classListData.courseMetadata.courseName || '',\r\n                instructor: classListData.courseMetadata.professors || '',\r\n                term: classListData.courseMetadata.term || ''\r\n            });\r\n        }\r\n\r\n        // Auto-populate assignment from loaded rubric\r\n        if (sharedRubric?.assignmentInfo) {\r\n            updateAssignmentInfo({\r\n                name: sharedRubric.assignmentInfo.title || '',\r\n                maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\r\n            });\r\n        }\r\n\r\n        return true;\r\n    }, [\r\n        setGradingSession,\r\n        setCurrentStudent,\r\n        setGradingFormData,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        sharedRubric\r\n    ]);\r\n\r\n    // Legacy compatibility - map persistent form data\r\n    const persistentFormData = gradingFormData;\r\n    const updatePersistentFormData = updateGradingFormData;\r\n\r\n    const value = {\r\n        // Shared state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n\r\n        // Navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicy,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n        updateRubricFormData,\r\n        updateRubricAssignmentInfo,\r\n        updateRubricCriteria,\r\n        updateRubricLevels,\r\n        updateRubricSettings,\r\n\r\n        // Actions - rubric management\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n\r\n        // Actions - clear functions\r\n        clearGradingFormData,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // ─── Class & grading flow ────────────────────────────────────────\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n        drafts,\r\n        saveDraft,\r\n        loadDraft,\r\n        hasDraft,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        jumpToStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // ─── Expose grading session ───────────────────────────────────────\r\n        gradingSession,\r\n        setGradingSession,\r\n\r\n        // Legacy compatibility\r\n        persistentFormData,\r\n        updatePersistentFormData,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}