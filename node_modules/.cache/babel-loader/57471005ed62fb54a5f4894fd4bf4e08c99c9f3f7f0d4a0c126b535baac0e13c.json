{"ast":null,"code":"// Frontend service for Grading Policy Manager with TanStack Query v5 support\n// File: src/services/gradingPolicyService.js\n\nimport axios from 'axios';\nclass GradingPolicyService {\n  constructor() {\n    // Use local JSON data for development, API for production\n    this.useLocalData = process.env.NODE_ENV === 'development' && !process.env.REACT_APP_API_URL;\n    if (!this.useLocalData) {\n      this.client = axios.create({\n        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n        timeout: 5000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n\n    // policies for local development\n    this.localPolicies = this.initializeLocalPolicies();\n  }\n\n  // Initialize local policies for development\n  initializeLocalPolicies() {\n    return {\n      'standard-2024': {\n        id: 'standard-2024',\n        name: 'Standard (Current)',\n        description: 'Standard grading policy for degree, diploma, certificate, and graduate certificate programs',\n        programTypes: ['degree', 'diploma', 'certificate', 'graduateCertificate'],\n        gradeScale: [{\n          letter: 'A+',\n          gpa: 4.0,\n          minPercentage: 90,\n          maxPercentage: 100,\n          passingGrade: true\n        }, {\n          letter: 'A',\n          gpa: 3.75,\n          minPercentage: 80,\n          maxPercentage: 89,\n          passingGrade: true\n        }, {\n          letter: 'B+',\n          gpa: 3.25,\n          minPercentage: 75,\n          maxPercentage: 79,\n          passingGrade: true\n        }, {\n          letter: 'B',\n          gpa: 3.0,\n          minPercentage: 70,\n          maxPercentage: 74,\n          passingGrade: true\n        }, {\n          letter: 'C+',\n          gpa: 2.25,\n          minPercentage: 65,\n          maxPercentage: 69,\n          passingGrade: true\n        }, {\n          letter: 'C',\n          gpa: 2.0,\n          minPercentage: 60,\n          maxPercentage: 64,\n          passingGrade: true\n        }, {\n          letter: 'D',\n          gpa: 1.0,\n          minPercentage: 55,\n          maxPercentage: 59,\n          passingGrade: false\n        }, {\n          letter: 'F',\n          gpa: 0.0,\n          minPercentage: 0,\n          maxPercentage: 54,\n          passingGrade: false\n        }],\n        isActive: true,\n        isDefault: true\n      },\n      'apprenticeship-2024': {\n        id: 'apprenticeship-2024',\n        name: 'Apprenticeship (Current)',\n        description: 'Apprenticeship programs with higher passing requirements (70%)',\n        programTypes: ['apprenticeship'],\n        gradeScale: [{\n          letter: 'A+',\n          gpa: 4.0,\n          minPercentage: 90,\n          maxPercentage: 100,\n          passingGrade: true\n        }, {\n          letter: 'A',\n          gpa: 3.75,\n          minPercentage: 80,\n          maxPercentage: 89,\n          passingGrade: true\n        }, {\n          letter: 'B+',\n          gpa: 3.25,\n          minPercentage: 75,\n          maxPercentage: 79,\n          passingGrade: true\n        }, {\n          letter: 'B',\n          gpa: 3.0,\n          minPercentage: 70,\n          maxPercentage: 74,\n          passingGrade: true\n        }, {\n          letter: 'F',\n          gpa: 0.0,\n          minPercentage: 0,\n          maxPercentage: 69,\n          passingGrade: false\n        }],\n        isActive: true,\n        isDefault: false\n      },\n      'health-science-2024': {\n        id: 'health-science-2024',\n        name: 'Health Science (Current)',\n        description: 'Health science programs with higher passing requirements (65%)',\n        programTypes: ['healthScience'],\n        gradeScale: [{\n          letter: 'A+',\n          gpa: 4.0,\n          minPercentage: 90,\n          maxPercentage: 100,\n          passingGrade: true\n        }, {\n          letter: 'A',\n          gpa: 3.75,\n          minPercentage: 80,\n          maxPercentage: 89,\n          passingGrade: true\n        }, {\n          letter: 'B+',\n          gpa: 3.25,\n          minPercentage: 75,\n          maxPercentage: 79,\n          passingGrade: true\n        }, {\n          letter: 'B',\n          gpa: 3.0,\n          minPercentage: 70,\n          maxPercentage: 74,\n          passingGrade: true\n        }, {\n          letter: 'C+',\n          gpa: 2.25,\n          minPercentage: 65,\n          maxPercentage: 69,\n          passingGrade: true\n        }, {\n          letter: 'F',\n          gpa: 0.0,\n          minPercentage: 0,\n          maxPercentage: 64,\n          passingGrade: false\n        }],\n        isActive: true,\n        isDefault: false\n      },\n      'gas-technician-2024': {\n        id: 'gas-technician-2024',\n        name: 'GAS Technician (Current)',\n        description: 'GAS technician programs with highest passing requirements (75%)',\n        programTypes: ['gasTechnician'],\n        gradeScale: [{\n          letter: 'A+',\n          gpa: 4.0,\n          minPercentage: 90,\n          maxPercentage: 100,\n          passingGrade: true\n        }, {\n          letter: 'A',\n          gpa: 3.75,\n          minPercentage: 80,\n          maxPercentage: 89,\n          passingGrade: true\n        }, {\n          letter: 'B+',\n          gpa: 3.25,\n          minPercentage: 75,\n          maxPercentage: 79,\n          passingGrade: true\n        }, {\n          letter: 'F',\n          gpa: 0.0,\n          minPercentage: 0,\n          maxPercentage: 74,\n          passingGrade: false\n        }],\n        isActive: true,\n        isDefault: false\n      }\n    };\n  }\n\n  // Get all grading policies\n  async getPolicies(params = {}) {\n    if (this.useLocalData) {\n      const policies = Object.values(this.localPolicies);\n\n      // Apply filters if specified\n      let filteredPolicies = policies;\n      if (params.programType) {\n        filteredPolicies = policies.filter(policy => policy.programTypes.includes(params.programType));\n      }\n      if (params.isActive !== undefined) {\n        filteredPolicies = filteredPolicies.filter(policy => policy.isActive === params.isActive);\n      }\n      return {\n        data: filteredPolicies,\n        success: true\n      };\n    }\n    try {\n      const response = await this.client.get('/grading-policies', {\n        params\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error fetching policies:', error);\n      return {\n        data: [],\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get policy for specific program type\n  async getPolicyForProgram(programType) {\n    if (this.useLocalData) {\n      const policy = Object.values(this.localPolicies).find(p => p.programTypes.includes(programType) && p.isActive);\n      return policy ? {\n        data: policy,\n        success: true\n      } : {\n        data: null,\n        success: false\n      };\n    }\n    try {\n      const response = await this.client.get(`/grading-policies/by-program/${programType}`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error fetching policy for program:', error);\n      return {\n        data: null,\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Create a new policy\n  async createPolicy(policyData) {\n    if (this.useLocalData) {\n      const id = `custom_${Date.now()}`;\n      const newPolicy = {\n        ...policyData,\n        id,\n        isDefault: false\n      };\n      this.localPolicies[id] = newPolicy;\n      return {\n        data: newPolicy,\n        success: true\n      };\n    }\n    // This is where you would make an API call, e.g.:\n    try {\n      const response = await this.client.post('/grading-policies', policyData);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error creating policy:', error);\n      return {\n        data: null,\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update an existing policy\n  async updatePolicy(policyId, policyData) {\n    if (this.useLocalData) {\n      if (!this.localPolicies[policyId]) {\n        return {\n          data: null,\n          success: false,\n          error: 'Policy not found'\n        };\n      }\n      const updatedPolicy = {\n        ...this.localPolicies[policyId],\n        ...policyData\n      };\n      this.localPolicies[policyId] = updatedPolicy;\n      return {\n        data: updatedPolicy,\n        success: true\n      };\n    }\n    // This is where you would make an API call, e.g.:\n    try {\n      const response = await this.client.put(`/grading-policies/${policyId}`, policyData);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating policy:', error);\n      return {\n        data: null,\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Delete a policy\n  async deletePolicy(policyId) {\n    if (this.useLocalData) {\n      if (!this.localPolicies[policyId]) {\n        return {\n          data: null,\n          success: false,\n          error: 'Policy not found'\n        };\n      }\n      delete this.localPolicies[policyId];\n      return {\n        data: {\n          message: 'Policy deleted'\n        },\n        success: true\n      };\n    }\n    // This is where you would make an API call, e.g.:\n    try {\n      const response = await this.client.delete(`/grading-policies/${policyId}`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting policy:', error);\n      return {\n        data: null,\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Calculate letter grade from percentage\n  async calculateGrade(percentage, policyId = null, programType = 'degree', customProgramId = null) {\n    if (this.useLocalData) {\n      return this.calculateGradeLocal(percentage, policyId, programType);\n    }\n    try {\n      const response = await this.client.post('/grading-policies/calculate-grade', {\n        percentage,\n        policyId,\n        programType,\n        customProgramId\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error calculating grade:', error);\n      // Fallback to local calculation\n      return this.calculateGradeLocal(percentage, policyId, programType);\n    }\n  }\n\n  // Local grade calculation for development/fallback\n  calculateGradeLocal(percentage, policyId = null, programType = 'degree') {\n    try {\n      let policy;\n      if (policyId) {\n        policy = this.localPolicies[policyId];\n      } else {\n        // Find policy by program type\n        policy = Object.values(this.localPolicies).find(p => p.programTypes.includes(programType) && p.isActive);\n      }\n\n      // Fallback to standard policy\n      if (!policy) {\n        policy = this.localPolicies['standard-2024'];\n      }\n\n      // Find the appropriate grade\n      const grade = policy.gradeScale.find(scale => percentage >= scale.minPercentage && percentage <= scale.maxPercentage);\n      if (grade) {\n        return {\n          data: {\n            letterGrade: grade.letter,\n            gpaPoints: grade.gpa,\n            passingGrade: grade.passingGrade,\n            percentage: percentage,\n            policy: {\n              id: policy.id,\n              name: policy.name\n            }\n          },\n          success: true\n        };\n      }\n\n      // Fallback for invalid percentage\n      return {\n        data: {\n          letterGrade: 'F',\n          gpaPoints: 0.0,\n          passingGrade: false,\n          percentage: percentage,\n          policy: {\n            id: policy.id,\n            name: policy.name\n          }\n        },\n        success: true\n      };\n    } catch (error) {\n      console.error('Local grade calculation failed:', error);\n      return {\n        data: {\n          letterGrade: 'F',\n          gpaPoints: 0.0,\n          passingGrade: false,\n          percentage: percentage,\n          error: 'Calculation failed'\n        },\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Validate policy data\n  async validatePolicy(policyData) {\n    const errors = [];\n\n    // Check required fields\n    if (!policyData.name) errors.push('Policy name is required');\n    if (!policyData.programTypes || policyData.programTypes.length === 0) {\n      errors.push('At least one program type is required');\n    }\n    if (!policyData.gradeScale || policyData.gradeScale.length === 0) {\n      errors.push('Grade scale is required');\n    }\n\n    // Check grade scale integrity\n    if (policyData.gradeScale) {\n      const sortedGrades = [...policyData.gradeScale].sort((a, b) => b.minPercentage - a.minPercentage);\n      for (let i = 0; i < sortedGrades.length - 1; i++) {\n        if (sortedGrades[i].minPercentage <= sortedGrades[i + 1].maxPercentage) {\n          errors.push('Grade scale ranges overlap or have gaps');\n          break;\n        }\n      }\n    }\n    return {\n      isValid: errors.length === 0,\n      errors: errors\n    };\n  }\n\n  // Get supported program types\n  getSupportedProgramTypes() {\n    return [{\n      value: 'degree',\n      label: 'Degree Programs'\n    }, {\n      value: 'diploma',\n      label: 'Diploma Programs'\n    }, {\n      value: 'certificate',\n      label: 'Certificate Programs'\n    }, {\n      value: 'graduateCertificate',\n      label: 'Graduate Certificate'\n    }, {\n      value: 'apprenticeship',\n      label: 'Apprenticeship Programs'\n    }, {\n      value: 'healthScience',\n      label: 'Health Science Programs'\n    }, {\n      value: 'gasTechnician',\n      label: 'GAS Technician Programs'\n    }, {\n      value: 'other',\n      label: 'Other/Custom Programs'\n    }];\n  }\n}\n\n// Create singleton instance\nexport const gradingPolicyService = new GradingPolicyService();\nexport default gradingPolicyService;","map":{"version":3,"names":["axios","GradingPolicyService","constructor","useLocalData","process","env","NODE_ENV","REACT_APP_API_URL","client","create","baseURL","timeout","headers","localPolicies","initializeLocalPolicies","id","name","description","programTypes","gradeScale","letter","gpa","minPercentage","maxPercentage","passingGrade","isActive","isDefault","getPolicies","params","policies","Object","values","filteredPolicies","programType","filter","policy","includes","undefined","data","success","response","get","error","console","message","getPolicyForProgram","find","p","createPolicy","policyData","Date","now","newPolicy","post","updatePolicy","policyId","updatedPolicy","put","deletePolicy","delete","calculateGrade","percentage","customProgramId","calculateGradeLocal","grade","scale","letterGrade","gpaPoints","validatePolicy","errors","push","length","sortedGrades","sort","a","b","i","isValid","getSupportedProgramTypes","value","label","gradingPolicyService"],"sources":["C:/local clones/rubric-creation-app/src/services/gradingPolicyService.js"],"sourcesContent":["// Frontend service for Grading Policy Manager with TanStack Query v5 support\r\n// File: src/services/gradingPolicyService.js\r\n\r\nimport axios from 'axios';\r\n\r\nclass GradingPolicyService {\r\n    constructor() {\r\n        // Use local JSON data for development, API for production\r\n        this.useLocalData = process.env.NODE_ENV === 'development' && !process.env.REACT_APP_API_URL;\r\n\r\n        if (!this.useLocalData) {\r\n            this.client = axios.create({\r\n                baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\r\n                timeout: 5000,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n        }\r\n\r\n        // policies for local development\r\n        this.localPolicies = this.initializeLocalPolicies();\r\n    }\r\n\r\n    // Initialize local policies for development\r\n    initializeLocalPolicies() {\r\n        return {\r\n            'standard-2024': {\r\n                id: 'standard-2024',\r\n                name: 'Standard (Current)',\r\n                description: 'Standard grading policy for degree, diploma, certificate, and graduate certificate programs',\r\n                programTypes: ['degree', 'diploma', 'certificate', 'graduateCertificate'],\r\n                gradeScale: [\r\n                    { letter: 'A+', gpa: 4.0, minPercentage: 90, maxPercentage: 100, passingGrade: true },\r\n                    { letter: 'A', gpa: 3.75, minPercentage: 80, maxPercentage: 89, passingGrade: true },\r\n                    { letter: 'B+', gpa: 3.25, minPercentage: 75, maxPercentage: 79, passingGrade: true },\r\n                    { letter: 'B', gpa: 3.0, minPercentage: 70, maxPercentage: 74, passingGrade: true },\r\n                    { letter: 'C+', gpa: 2.25, minPercentage: 65, maxPercentage: 69, passingGrade: true },\r\n                    { letter: 'C', gpa: 2.0, minPercentage: 60, maxPercentage: 64, passingGrade: true },\r\n                    { letter: 'D', gpa: 1.0, minPercentage: 55, maxPercentage: 59, passingGrade: false },\r\n                    { letter: 'F', gpa: 0.0, minPercentage: 0, maxPercentage: 54, passingGrade: false }\r\n                ],\r\n                isActive: true,\r\n                isDefault: true\r\n            },\r\n            'apprenticeship-2024': {\r\n                id: 'apprenticeship-2024',\r\n                name: 'Apprenticeship (Current)',\r\n                description: 'Apprenticeship programs with higher passing requirements (70%)',\r\n                programTypes: ['apprenticeship'],\r\n                gradeScale: [\r\n                    { letter: 'A+', gpa: 4.0, minPercentage: 90, maxPercentage: 100, passingGrade: true },\r\n                    { letter: 'A', gpa: 3.75, minPercentage: 80, maxPercentage: 89, passingGrade: true },\r\n                    { letter: 'B+', gpa: 3.25, minPercentage: 75, maxPercentage: 79, passingGrade: true },\r\n                    { letter: 'B', gpa: 3.0, minPercentage: 70, maxPercentage: 74, passingGrade: true },\r\n                    { letter: 'F', gpa: 0.0, minPercentage: 0, maxPercentage: 69, passingGrade: false }\r\n                ],\r\n                isActive: true,\r\n                isDefault: false\r\n            },\r\n            'health-science-2024': {\r\n                id: 'health-science-2024',\r\n                name: 'Health Science (Current)',\r\n                description: 'Health science programs with higher passing requirements (65%)',\r\n                programTypes: ['healthScience'],\r\n                gradeScale: [\r\n                    { letter: 'A+', gpa: 4.0, minPercentage: 90, maxPercentage: 100, passingGrade: true },\r\n                    { letter: 'A', gpa: 3.75, minPercentage: 80, maxPercentage: 89, passingGrade: true },\r\n                    { letter: 'B+', gpa: 3.25, minPercentage: 75, maxPercentage: 79, passingGrade: true },\r\n                    { letter: 'B', gpa: 3.0, minPercentage: 70, maxPercentage: 74, passingGrade: true },\r\n                    { letter: 'C+', gpa: 2.25, minPercentage: 65, maxPercentage: 69, passingGrade: true },\r\n                    { letter: 'F', gpa: 0.0, minPercentage: 0, maxPercentage: 64, passingGrade: false }\r\n                ],\r\n                isActive: true,\r\n                isDefault: false\r\n            },\r\n            'gas-technician-2024': {\r\n                id: 'gas-technician-2024',\r\n                name: 'GAS Technician (Current)',\r\n                description: 'GAS technician programs with highest passing requirements (75%)',\r\n                programTypes: ['gasTechnician'],\r\n                gradeScale: [\r\n                    { letter: 'A+', gpa: 4.0, minPercentage: 90, maxPercentage: 100, passingGrade: true },\r\n                    { letter: 'A', gpa: 3.75, minPercentage: 80, maxPercentage: 89, passingGrade: true },\r\n                    { letter: 'B+', gpa: 3.25, minPercentage: 75, maxPercentage: 79, passingGrade: true },\r\n                    { letter: 'F', gpa: 0.0, minPercentage: 0, maxPercentage: 74, passingGrade: false }\r\n                ],\r\n                isActive: true,\r\n                isDefault: false\r\n            }\r\n        };\r\n    }\r\n\r\n    // Get all grading policies\r\n    async getPolicies(params = {}) {\r\n        if (this.useLocalData) {\r\n            const policies = Object.values(this.localPolicies);\r\n\r\n            // Apply filters if specified\r\n            let filteredPolicies = policies;\r\n\r\n            if (params.programType) {\r\n                filteredPolicies = policies.filter(policy =>\r\n                    policy.programTypes.includes(params.programType)\r\n                );\r\n            }\r\n\r\n            if (params.isActive !== undefined) {\r\n                filteredPolicies = filteredPolicies.filter(policy =>\r\n                    policy.isActive === params.isActive\r\n                );\r\n            }\r\n\r\n            return { data: filteredPolicies, success: true };\r\n        }\r\n\r\n        try {\r\n            const response = await this.client.get('/grading-policies', { params });\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error fetching policies:', error);\r\n            return { data: [], success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Get policy for specific program type\r\n    async getPolicyForProgram(programType) {\r\n        if (this.useLocalData) {\r\n            const policy = Object.values(this.localPolicies).find(p =>\r\n                p.programTypes.includes(programType) && p.isActive\r\n            );\r\n            return policy ? { data: policy, success: true } : { data: null, success: false };\r\n        }\r\n\r\n        try {\r\n            const response = await this.client.get(`/grading-policies/by-program/${programType}`);\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error fetching policy for program:', error);\r\n            return { data: null, success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Create a new policy\r\n    async createPolicy(policyData) {\r\n        if (this.useLocalData) {\r\n            const id = `custom_${Date.now()}`;\r\n            const newPolicy = { ...policyData, id, isDefault: false };\r\n            this.localPolicies[id] = newPolicy;\r\n            return { data: newPolicy, success: true };\r\n        }\r\n        // This is where you would make an API call, e.g.:\r\n        try {\r\n            const response = await this.client.post('/grading-policies', policyData);\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error creating policy:', error);\r\n            return { data: null, success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Update an existing policy\r\n    async updatePolicy(policyId, policyData) {\r\n        if (this.useLocalData) {\r\n            if (!this.localPolicies[policyId]) {\r\n                return { data: null, success: false, error: 'Policy not found' };\r\n            }\r\n            const updatedPolicy = { ...this.localPolicies[policyId], ...policyData };\r\n            this.localPolicies[policyId] = updatedPolicy;\r\n            return { data: updatedPolicy, success: true };\r\n        }\r\n        // This is where you would make an API call, e.g.:\r\n        try {\r\n            const response = await this.client.put(`/grading-policies/${policyId}`, policyData);\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error updating policy:', error);\r\n            return { data: null, success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Delete a policy\r\n    async deletePolicy(policyId) {\r\n        if (this.useLocalData) {\r\n            if (!this.localPolicies[policyId]) {\r\n                return { data: null, success: false, error: 'Policy not found' };\r\n            }\r\n            delete this.localPolicies[policyId];\r\n            return { data: { message: 'Policy deleted' }, success: true };\r\n        }\r\n        // This is where you would make an API call, e.g.:\r\n        try {\r\n            const response = await this.client.delete(`/grading-policies/${policyId}`);\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error deleting policy:', error);\r\n            return { data: null, success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    // Calculate letter grade from percentage\r\n    async calculateGrade(percentage, policyId = null, programType = 'degree', customProgramId = null) {\r\n        if (this.useLocalData) {\r\n            return this.calculateGradeLocal(percentage, policyId, programType);\r\n        }\r\n\r\n        try {\r\n            const response = await this.client.post('/grading-policies/calculate-grade', {\r\n                percentage,\r\n                policyId,\r\n                programType,\r\n                customProgramId\r\n            });\r\n            return { data: response.data, success: true };\r\n        } catch (error) {\r\n            console.error('Error calculating grade:', error);\r\n            // Fallback to local calculation\r\n            return this.calculateGradeLocal(percentage, policyId, programType);\r\n        }\r\n    }\r\n\r\n    // Local grade calculation for development/fallback\r\n    calculateGradeLocal(percentage, policyId = null, programType = 'degree') {\r\n        try {\r\n            let policy;\r\n\r\n            if (policyId) {\r\n                policy = this.localPolicies[policyId];\r\n            } else {\r\n                // Find policy by program type\r\n                policy = Object.values(this.localPolicies).find(p =>\r\n                    p.programTypes.includes(programType) && p.isActive\r\n                );\r\n            }\r\n\r\n            // Fallback to standard policy\r\n            if (!policy) {\r\n                policy = this.localPolicies['standard-2024'];\r\n            }\r\n\r\n            // Find the appropriate grade\r\n            const grade = policy.gradeScale.find(scale =>\r\n                percentage >= scale.minPercentage && percentage <= scale.maxPercentage\r\n            );\r\n\r\n            if (grade) {\r\n                return {\r\n                    data: {\r\n                        letterGrade: grade.letter,\r\n                        gpaPoints: grade.gpa,\r\n                        passingGrade: grade.passingGrade,\r\n                        percentage: percentage,\r\n                        policy: {\r\n                            id: policy.id,\r\n                            name: policy.name\r\n                        }\r\n                    },\r\n                    success: true\r\n                };\r\n            }\r\n\r\n            // Fallback for invalid percentage\r\n            return {\r\n                data: {\r\n                    letterGrade: 'F',\r\n                    gpaPoints: 0.0,\r\n                    passingGrade: false,\r\n                    percentage: percentage,\r\n                    policy: {\r\n                        id: policy.id,\r\n                        name: policy.name\r\n                    }\r\n                },\r\n                success: true\r\n            };\r\n\r\n        } catch (error) {\r\n            console.error('Local grade calculation failed:', error);\r\n            return {\r\n                data: {\r\n                    letterGrade: 'F',\r\n                    gpaPoints: 0.0,\r\n                    passingGrade: false,\r\n                    percentage: percentage,\r\n                    error: 'Calculation failed'\r\n                },\r\n                success: false,\r\n                error: error.message\r\n            };\r\n        }\r\n    }\r\n\r\n    // Validate policy data\r\n    async validatePolicy(policyData) {\r\n        const errors = [];\r\n\r\n        // Check required fields\r\n        if (!policyData.name) errors.push('Policy name is required');\r\n        if (!policyData.programTypes || policyData.programTypes.length === 0) {\r\n            errors.push('At least one program type is required');\r\n        }\r\n        if (!policyData.gradeScale || policyData.gradeScale.length === 0) {\r\n            errors.push('Grade scale is required');\r\n        }\r\n\r\n        // Check grade scale integrity\r\n        if (policyData.gradeScale) {\r\n            const sortedGrades = [...policyData.gradeScale].sort((a, b) => b.minPercentage - a.minPercentage);\r\n\r\n            for (let i = 0; i < sortedGrades.length - 1; i++) {\r\n                if (sortedGrades[i].minPercentage <= sortedGrades[i + 1].maxPercentage) {\r\n                    errors.push('Grade scale ranges overlap or have gaps');\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            isValid: errors.length === 0,\r\n            errors: errors\r\n        };\r\n    }\r\n\r\n    // Get supported program types\r\n    getSupportedProgramTypes() {\r\n        return [\r\n            { value: 'degree', label: 'Degree Programs' },\r\n            { value: 'diploma', label: 'Diploma Programs' },\r\n            { value: 'certificate', label: 'Certificate Programs' },\r\n            { value: 'graduateCertificate', label: 'Graduate Certificate' },\r\n            { value: 'apprenticeship', label: 'Apprenticeship Programs' },\r\n            { value: 'healthScience', label: 'Health Science Programs' },\r\n            { value: 'gasTechnician', label: 'GAS Technician Programs' },\r\n            { value: 'other', label: 'Other/Custom Programs' }\r\n        ];\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nexport const gradingPolicyService = new GradingPolicyService();\r\nexport default gradingPolicyService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}