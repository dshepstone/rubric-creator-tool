{"ast":null,"code":"/**\r\n * ensureUniqueCriterionIds.js\r\n *\r\n * Guarantees that every criterion in a rubric array has a **unique** `id`.\r\n * ─────────────────────────────────────────────────────────────────────────\r\n * • If an `id` is missing, it generates one (`criterion_<index>`).  \r\n * • If a duplicate is detected, it appends a short random hash (`_<abcd>`)  \r\n *   until the value is unique.  \r\n * • The original objects are **not** mutated; a shallow‑copy is returned.\r\n *\r\n * Usage:\r\n *   import ensureUniqueCriterionIds from \"./utils/ensureUniqueCriterionIds\";\r\n *   const safeCriteria = ensureUniqueCriterionIds(rawCriteria);\r\n */\n\n/**\r\n * @typedef {Object} Criterion\r\n * @property {string} [id]   Optional unique identifier for the criterion\r\n * // ...other rubric‑specific properties\r\n */\n\n/**\r\n * @param {Criterion[]} criteria  Array of criterion objects\r\n * @returns {Criterion[]}         New array with unique, collision‑free ids\r\n */\nexport function ensureUniqueCriterionIds(criteria = []) {\n  const seen = new Set();\n  return criteria.map((criterion, index) => {\n    var _c$id;\n    // Create a shallow copy to avoid side‑effects\n    const c = {\n      ...criterion\n    };\n\n    // Fallback ID if none provided\n    let id = ((_c$id = c.id) !== null && _c$id !== void 0 ? _c$id : `criterion_${index}`).trim();\n\n    // Resolve collisions by appending a short random suffix\n    while (seen.has(id)) {\n      id = `${id}_${Math.random().toString(36).slice(2, 6)}`;\n    }\n    seen.add(id);\n    c.id = id;\n    return c;\n  });\n}\nexport default ensureUniqueCriterionIds;","map":{"version":3,"names":["ensureUniqueCriterionIds","criteria","seen","Set","map","criterion","index","_c$id","c","id","trim","has","Math","random","toString","slice","add"],"sources":["C:/local clones/rubric-creation-app/src/utils/ensureUniqueCriterionIds.js"],"sourcesContent":["/**\r\n * ensureUniqueCriterionIds.js\r\n *\r\n * Guarantees that every criterion in a rubric array has a **unique** `id`.\r\n * ─────────────────────────────────────────────────────────────────────────\r\n * • If an `id` is missing, it generates one (`criterion_<index>`).  \r\n * • If a duplicate is detected, it appends a short random hash (`_<abcd>`)  \r\n *   until the value is unique.  \r\n * • The original objects are **not** mutated; a shallow‑copy is returned.\r\n *\r\n * Usage:\r\n *   import ensureUniqueCriterionIds from \"./utils/ensureUniqueCriterionIds\";\r\n *   const safeCriteria = ensureUniqueCriterionIds(rawCriteria);\r\n */\r\n\r\n/**\r\n * @typedef {Object} Criterion\r\n * @property {string} [id]   Optional unique identifier for the criterion\r\n * // ...other rubric‑specific properties\r\n */\r\n\r\n/**\r\n * @param {Criterion[]} criteria  Array of criterion objects\r\n * @returns {Criterion[]}         New array with unique, collision‑free ids\r\n */\r\nexport function ensureUniqueCriterionIds(criteria = []) {\r\n    const seen = new Set();\r\n\r\n    return criteria.map((criterion, index) => {\r\n        // Create a shallow copy to avoid side‑effects\r\n        const c = { ...criterion };\r\n\r\n        // Fallback ID if none provided\r\n        let id = (c.id ?? `criterion_${index}`).trim();\r\n\r\n        // Resolve collisions by appending a short random suffix\r\n        while (seen.has(id)) {\r\n            id = `${id}_${Math.random().toString(36).slice(2, 6)}`;\r\n        }\r\n\r\n        seen.add(id);\r\n        c.id = id;\r\n        return c;\r\n    });\r\n}\r\n\r\nexport default ensureUniqueCriterionIds;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASA,wBAAwBA,CAACC,QAAQ,GAAG,EAAE,EAAE;EACpD,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEtB,OAAOF,QAAQ,CAACG,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IAAA,IAAAC,KAAA;IACtC;IACA,MAAMC,CAAC,GAAG;MAAE,GAAGH;IAAU,CAAC;;IAE1B;IACA,IAAII,EAAE,GAAG,EAAAF,KAAA,GAACC,CAAC,CAACC,EAAE,cAAAF,KAAA,cAAAA,KAAA,GAAI,aAAaD,KAAK,EAAE,EAAEI,IAAI,CAAC,CAAC;;IAE9C;IACA,OAAOR,IAAI,CAACS,GAAG,CAACF,EAAE,CAAC,EAAE;MACjBA,EAAE,GAAG,GAAGA,EAAE,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAC1D;IAEAb,IAAI,CAACc,GAAG,CAACP,EAAE,CAAC;IACZD,CAAC,CAACC,EAAE,GAAGA,EAAE;IACT,OAAOD,CAAC;EACZ,CAAC,CAAC;AACN;AAEA,eAAeR,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}