{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Updated SharedContext.js with Enhanced Draft/Final Grade Management + AI Prompt Generator + Assignment Prompt Generator\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [activeTab, setActiveTab] = useState('assignment-prompt-generator'); // Updated to start with assignment prompt generator\n\n  // AI Prompt Generator state (for rubrics) - UPDATED with weight percentage\n  const [aiPromptFormData, setAIPromptFormData] = useState(null);\n\n  // NEW: Assignment Prompt Generator state\n  const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\n\n  // Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ENHANCED: Separate storage for draft and final grades\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // Batch grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Form data states\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n  const [rubricFormData, setRubricFormData] = useState({\n    assignmentInfo: {\n      title: '',\n      description: '',\n      weight: 25,\n      passingThreshold: 60,\n      totalPoints: 100\n    },\n    rubricLevels: [{\n      level: 'incomplete',\n      name: 'Incomplete',\n      description: 'No submission or unusable',\n      color: '#95a5a6',\n      multiplier: 0\n    }, {\n      level: 'unacceptable',\n      name: 'Unacceptable',\n      description: 'Below minimum standards',\n      color: '#e74c3c',\n      multiplier: 0.3\n    }, {\n      level: 'developing',\n      name: 'Developing',\n      description: 'Approaching standards',\n      color: '#f39c12',\n      multiplier: 0.55\n    }, {\n      level: 'acceptable',\n      name: 'Acceptable (PASS)',\n      description: 'Meets minimum standards',\n      color: '#27ae60',\n      multiplier: 0.7\n    }, {\n      level: 'emerging',\n      name: 'Emerging',\n      description: 'Above standard expectations',\n      color: '#2980b9',\n      multiplier: 0.82\n    }, {\n      level: 'accomplished',\n      name: 'Accomplished',\n      description: 'Strong professional quality',\n      color: '#16a085',\n      multiplier: 0.92\n    }, {\n      level: 'exceptional',\n      name: 'Exceptional',\n      description: 'Outstanding professional quality',\n      color: '#8e44ad',\n      multiplier: 1.0\n    }],\n    criteria: [{\n      id: 'criterion-1',\n      name: '',\n      description: '',\n      maxPoints: 20,\n      weight: 20,\n      levels: {},\n      feedbackLibrary: {\n        strengths: [],\n        improvements: [],\n        general: []\n      }\n    }],\n    pointingSystem: 'multiplier',\n    reversedOrder: false,\n    expandedFeedback: {},\n    modalEdit: {\n      show: false,\n      content: '',\n      field: null,\n      onSave: null\n    }\n  });\n\n  // AI Prompt Generator functions (for rubrics) - UPDATED with weight percentage\n  const initializeAIPromptFormData = useCallback(() => {\n    setAIPromptFormData({\n      assignmentType: '',\n      programType: '',\n      programLevel: '',\n      subjectArea: '',\n      assignmentDescription: '',\n      totalPoints: '100',\n      weightPercentage: '',\n      // NEW: Add weight percentage field\n      numCriteria: '4',\n      criteriaType: 'ai-suggested',\n      userCriteria: '',\n      learningObjectives: '',\n      studentPopulation: '',\n      timeFrameNumber: '',\n      timeFrameUnit: 'weeks',\n      specialConsiderations: ''\n    });\n  }, []);\n  const updateAIPromptFormData = useCallback((field, value) => {\n    setAIPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const clearAIPromptFormData = useCallback(() => {\n    setAIPromptFormData(null);\n  }, []);\n\n  // NEW: Assignment Prompt Generator functions\n  const initializeAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData({\n      assignmentTitle: '',\n      assignmentNumber: '',\n      weightPercentage: '',\n      courseCode: '',\n      programLevel: '',\n      subjectArea: '',\n      assignmentDescription: '',\n      rationale: 'This assignment will evaluate the following Course Learning Outcomes:',\n      clos: [{\n        id: 1,\n        number: '1',\n        text: '',\n        type: 'CLO'\n      }, {\n        id: 2,\n        number: '2',\n        text: '',\n        type: 'CLO'\n      }, {\n        id: 3,\n        number: '3',\n        text: '',\n        type: 'CLO'\n      }, {\n        id: 4,\n        number: '4',\n        text: '',\n        type: 'CLO'\n      }],\n      directions: '',\n      gradingMethod: 'rubric',\n      gradingDetails: '',\n      dueDate: '',\n      submissionFolder: 'Assignment X',\n      specialInstructions: ''\n    });\n  }, []);\n  const updateAssignmentPromptFormData = useCallback((field, value) => {\n    setAssignmentPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const clearAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData(null);\n  }, []);\n\n  // Form update functions\n  const updateStudentInfo = useCallback(studentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...studentInfo\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(courseInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...courseInfo\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignmentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback(feedbackInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        ...feedbackInfo\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicyInfo = useCallback(latePolicyInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy: {\n        ...prev.latePolicy,\n        ...latePolicyInfo\n      }\n    }));\n  }, []);\n  const updateRubricGrading = useCallback(rubricGrading => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading\n    }));\n  }, []);\n  const updateMetadata = useCallback(metadata => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        ...metadata\n      }\n    }));\n  }, []);\n\n  // ENHANCED: Draft and Final Grade Management\n  const saveDraft = useCallback((studentId, gradingData) => {\n    const draftData = {\n      ...gradingData,\n      metadata: {\n        ...gradingData.metadata,\n        savedAt: new Date().toISOString(),\n        status: 'draft'\n      }\n    };\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: draftData\n    }));\n    console.log('✅ Draft saved for student:', studentId);\n    return true;\n  }, []);\n  const hasDraft = useCallback(studentId => {\n    return drafts[studentId] !== undefined;\n  }, [drafts]);\n  const loadDraft = useCallback(studentId => {\n    const draft = drafts[studentId];\n    if (draft) {\n      console.log('📝 Draft loaded for student:', studentId);\n      return draft;\n    }\n    console.log('⚠️ No draft found for student:', studentId);\n    return null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, data) => {\n    console.log('✅ Saving final grade for student:', studentId);\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: data\n    }));\n\n    // Remove from drafts once finalized\n    setDrafts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[studentId];\n      return updated;\n    });\n\n    // Update class list progress\n    if (classList) {\n      const studentIndex = classList.students.findIndex(s => s.id === studentId);\n      if (studentIndex >= 0) {\n        const updatedProgress = [...classList.gradingProgress];\n        updatedProgress[studentIndex] = {\n          ...updatedProgress[studentIndex],\n          status: 'completed_final',\n          lastModified: new Date().toISOString(),\n          gradeType: 'final'\n        };\n        setClassList(prev => ({\n          ...prev,\n          gradingProgress: updatedProgress\n        }));\n      }\n    }\n  }, [classList, setDrafts, setClassList]);\n  const loadFinalGrade = useCallback(studentId => {\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n\n  // Navigation helpers for grading sessions\n  const nextStudentInSession = useCallback((saveType = 'draft') => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    const students = classList.students;\n    if (currentIndex < students.length - 1) {\n      const nextIndex = currentIndex + 1;\n      const nextStudent = students[nextIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: nextIndex,\n        currentStudent: nextStudent,\n        gradedStudents: [...prev.gradedStudents, currentStudent.id]\n      }));\n      setCurrentStudent(nextStudent);\n      return true;\n    }\n\n    // End of session\n    setGradingSession(prev => ({\n      ...prev,\n      active: false,\n      gradedStudents: [...prev.gradedStudents, currentStudent.id]\n    }));\n    return false;\n  }, [gradingSession, classList, currentStudent]);\n  const previousStudentInSession = useCallback(() => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    if (currentIndex > 0) {\n      const prevIndex = currentIndex - 1;\n      const prevStudent = classList.students[prevIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: prevIndex,\n        currentStudent: prevStudent\n      }));\n      setCurrentStudent(prevStudent);\n      return true;\n    }\n    return false;\n  }, [gradingSession, classList]);\n\n  // **FIXED: Enhanced initializeGradingSession function**\n  const initializeGradingSession = useCallback(classListData => {\n    var _classListData$studen;\n    // 1. Guard against missing or empty class list\n    if (!classListData || !((_classListData$studen = classListData.students) !== null && _classListData$studen !== void 0 && _classListData$studen.length)) {\n      console.warn('⚠️ Cannot initialize grading session: No students found');\n      return false;\n    }\n\n    // 2. Extract the students array and the imported course metadata\n    const {\n      students,\n      courseMetadata\n    } = classListData;\n\n    // 3. Pick the first student to start the session\n    const firstStudent = students[0];\n\n    // 4. Build and set the grading session state\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // 5. Prefill the grading form: student + course details\n    setGradingFormData(prev => {\n      var _courseMetadata$cours, _courseMetadata$cours2, _courseMetadata$instr, _courseMetadata$term, _sharedCourseDetails$;\n      return {\n        ...prev,\n        student: {\n          name: firstStudent.name,\n          id: firstStudent.id,\n          email: firstStudent.email\n        },\n        course: {\n          code: (_courseMetadata$cours = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseCode) !== null && _courseMetadata$cours !== void 0 ? _courseMetadata$cours : prev.course.code,\n          name: (_courseMetadata$cours2 = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseName) !== null && _courseMetadata$cours2 !== void 0 ? _courseMetadata$cours2 : prev.course.name,\n          instructor: (_courseMetadata$instr = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.instructor) !== null && _courseMetadata$instr !== void 0 ? _courseMetadata$instr : prev.course.instructor,\n          term: (_courseMetadata$term = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.term) !== null && _courseMetadata$term !== void 0 ? _courseMetadata$term : prev.course.term\n        },\n        assignment: (_sharedCourseDetails$ = sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.assignment) !== null && _sharedCourseDetails$ !== void 0 ? _sharedCourseDetails$ : prev.assignment\n      };\n    });\n    console.log(`🚀 Grading session started for ${students.length} students`);\n    return true;\n  }, [sharedCourseDetails]);\n\n  // Update grading session\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n\n  // Rubric management functions\n  const transferRubricToGrading = useCallback(() => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n  const transferRubricToGradingWithDetails = useCallback(details => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setSharedCourseDetails(details);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n\n  // Clear functions\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      assignmentInfo: {\n        title: '',\n        description: '',\n        weight: 25,\n        passingThreshold: 60,\n        totalPoints: 100\n      },\n      rubricLevels: [{\n        level: 'incomplete',\n        name: 'Incomplete',\n        description: 'No submission or unusable',\n        color: '#95a5a6',\n        multiplier: 0\n      }, {\n        level: 'unacceptable',\n        name: 'Unacceptable',\n        description: 'Below minimum standards',\n        color: '#e74c3c',\n        multiplier: 0.3\n      }, {\n        level: 'developing',\n        name: 'Developing',\n        description: 'Approaching standards',\n        color: '#f39c12',\n        multiplier: 0.55\n      }, {\n        level: 'acceptable',\n        name: 'Acceptable (PASS)',\n        description: 'Meets minimum standards',\n        color: '#27ae60',\n        multiplier: 0.7\n      }, {\n        level: 'emerging',\n        name: 'Emerging',\n        description: 'Above standard expectations',\n        color: '#2980b9',\n        multiplier: 0.82\n      }, {\n        level: 'accomplished',\n        name: 'Accomplished',\n        description: 'Strong professional quality',\n        color: '#16a085',\n        multiplier: 0.92\n      }, {\n        level: 'exceptional',\n        name: 'Exceptional',\n        description: 'Outstanding professional quality',\n        color: '#8e44ad',\n        multiplier: 1.0\n      }],\n      criteria: [{\n        id: 'criterion-1',\n        name: '',\n        description: '',\n        maxPoints: 20,\n        weight: 20,\n        levels: {},\n        feedbackLibrary: {\n          strengths: [],\n          improvements: [],\n          general: []\n        }\n      }],\n      pointingSystem: 'multiplier',\n      reversedOrder: false,\n      expandedFeedback: {},\n      modalEdit: {\n        show: false,\n        content: '',\n        field: null,\n        onSave: null\n      }\n    });\n  }, []);\n\n  // Finalize a draft grade\n  const finalizeGrade = useCallback(studentId => {\n    const draftData = drafts[studentId];\n    if (draftData) {\n      saveFinalGrade(studentId, draftData);\n      console.log('🎯 Finalized draft for student:', studentId);\n    }\n  }, [drafts, saveFinalGrade]);\n\n  // Unlock a final grade (convert back to draft)\n  const unlockGrade = useCallback(studentId => {\n    const finalData = finalGrades[studentId];\n    if (finalData) {\n      // Move from final back to draft\n      setDrafts(prev => ({\n        ...prev,\n        [studentId]: finalData\n      }));\n      setFinalGrades(prev => {\n        const updated = {\n          ...prev\n        };\n        delete updated[studentId];\n        return updated;\n      });\n\n      // Update class list progress\n      if (classList) {\n        const studentIndex = classList.students.findIndex(s => s.id === studentId);\n        if (studentIndex >= 0) {\n          const updatedProgress = [...classList.gradingProgress];\n          updatedProgress[studentIndex] = {\n            ...updatedProgress[studentIndex],\n            status: 'completed_draft',\n            lastModified: new Date().toISOString(),\n            gradeType: 'draft'\n          };\n          setClassList(prev => ({\n            ...prev,\n            gradingProgress: updatedProgress\n          }));\n        }\n      }\n      console.log('🔓 Unlocked final grade for student:', studentId);\n    }\n  }, [finalGrades, setDrafts, setFinalGrades, classList, setClassList]);\n\n  // UPDATED: Export Session Function with AI Prompt Data and Assignment Prompt Data\n  const exportSession = useCallback(() => {\n    const sessionData = {\n      sharedRubric,\n      classList,\n      drafts,\n      finalGrades,\n      activeTab,\n      currentStudent,\n      gradingSession,\n      sharedCourseDetails,\n      aiPromptFormData,\n      // AI Rubric prompt data\n      assignmentPromptFormData // NEW: Assignment prompt data\n    };\n    const dataStr = JSON.stringify(sessionData, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);\n    link.download = `grading-session-${timestamp}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }, [sharedRubric, classList, drafts, finalGrades, activeTab, currentStudent, gradingSession, sharedCourseDetails, aiPromptFormData, assignmentPromptFormData]);\n\n  // UPDATED: Import Session Function with AI Prompt Data and Assignment Prompt Data\n  const importSession = useCallback(jsonContent => {\n    try {\n      const sessionData = JSON.parse(jsonContent);\n      if (sessionData && typeof sessionData === 'object') {\n        setSharedRubric(sessionData.sharedRubric || null);\n        setClassList(sessionData.classList || null);\n        setDrafts(sessionData.drafts || {});\n        setFinalGrades(sessionData.finalGrades || {});\n        setActiveTab(sessionData.activeTab || 'assignment-prompt-generator');\n        setCurrentStudent(sessionData.currentStudent || null);\n        setGradingSession(sessionData.gradingSession || {\n          active: false\n        });\n        setSharedCourseDetails(sessionData.sharedCourseDetails || null);\n        setAIPromptFormData(sessionData.aiPromptFormData || null); // AI Rubric prompt data\n        setAssignmentPromptFormData(sessionData.assignmentPromptFormData || null); // NEW: Assignment prompt data\n        alert('Session loaded successfully!');\n      } else {\n        throw new Error('Invalid file format.');\n      }\n    } catch (error) {\n      console.error(\"Failed to import session:\", error);\n      alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\n    }\n  }, []);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    clearGradingFormData();\n    clearRubricFormData();\n    clearAIPromptFormData(); // Clear AI Rubric prompt data\n    clearAssignmentPromptFormData(); // NEW: Clear assignment prompt data\n  }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\n  const persistentFormData = gradingFormData;\n  const updatePersistentFormData = setGradingFormData;\n  const value = {\n    // Shared state\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    // Navigation\n    activeTab,\n    setActiveTab,\n    // AI Prompt Generator (for rubrics)\n    aiPromptFormData,\n    updateAIPromptFormData,\n    initializeAIPromptFormData,\n    clearAIPromptFormData,\n    // NEW: Assignment Prompt Generator\n    assignmentPromptFormData,\n    updateAssignmentPromptFormData,\n    initializeAssignmentPromptFormData,\n    clearAssignmentPromptFormData,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    clearGradingFormData,\n    persistentFormData,\n    updatePersistentFormData,\n    // Form update functions\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicyInfo,\n    updateRubricGrading,\n    updateMetadata,\n    // Draft and Final Grade Management - ENHANCED\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Class management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Grading session\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    // Utility functions\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    clearRubricFormData,\n    clearAllData,\n    // Session management\n    exportSession,\n    importSession\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 683,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"tffgXE3hpPDAJPhdqVU9UZzcj6Q=\");\n_c = AssessmentProvider;\nexport default AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","aiPromptFormData","setAIPromptFormData","assignmentPromptFormData","setAssignmentPromptFormData","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","rubricFormData","setRubricFormData","assignmentInfo","title","description","weight","passingThreshold","totalPoints","rubricLevels","color","multiplier","criteria","levels","feedbackLibrary","pointingSystem","reversedOrder","expandedFeedback","modalEdit","show","content","field","onSave","initializeAIPromptFormData","assignmentType","programType","programLevel","subjectArea","assignmentDescription","weightPercentage","numCriteria","criteriaType","userCriteria","learningObjectives","studentPopulation","timeFrameNumber","timeFrameUnit","specialConsiderations","updateAIPromptFormData","value","prev","clearAIPromptFormData","initializeAssignmentPromptFormData","assignmentTitle","assignmentNumber","courseCode","rationale","clos","number","text","type","directions","gradingMethod","gradingDetails","submissionFolder","specialInstructions","updateAssignmentPromptFormData","clearAssignmentPromptFormData","updateStudentInfo","studentInfo","updateCourseInfo","courseInfo","updateAssignmentInfo","updateFeedbackInfo","feedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicyInfo","latePolicyInfo","updateRubricGrading","updateMetadata","saveDraft","studentId","gradingData","draftData","savedAt","Date","toISOString","status","console","log","hasDraft","undefined","loadDraft","draft","saveFinalGrade","data","updated","studentIndex","students","findIndex","s","updatedProgress","gradingProgress","lastModified","gradeType","loadFinalGrade","getGradeStatus","nextStudentInSession","saveType","currentIndex","length","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","initializeGradingSession","classListData","_classListData$studen","warn","courseMetadata","firstStudent","session","_courseMetadata$cours","_courseMetadata$cours2","_courseMetadata$instr","_courseMetadata$term","_sharedCourseDetails$","courseName","updateGradingSession","updates","transferRubricToGrading","transferRubricToGradingWithDetails","details","clearSharedRubric","clearGradingFormData","clearRubricFormData","finalizeGrade","unlockGrade","finalData","exportSession","sessionData","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","timestamp","replace","slice","download","body","appendChild","click","removeChild","revokeObjectURL","importSession","jsonContent","parse","alert","error","clearAllData","persistentFormData","updatePersistentFormData","setGradingData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// Updated SharedContext.js with Enhanced Draft/Final Grade Management + AI Prompt Generator + Assignment Prompt Generator\r\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('assignment-prompt-generator'); // Updated to start with assignment prompt generator\r\n\r\n    // AI Prompt Generator state (for rubrics) - UPDATED with weight percentage\r\n    const [aiPromptFormData, setAIPromptFormData] = useState(null);\r\n\r\n    // NEW: Assignment Prompt Generator state\r\n    const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\r\n\r\n    // Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ENHANCED: Separate storage for draft and final grades\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // Batch grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Form data states\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        assignmentInfo: {\r\n            title: '',\r\n            description: '',\r\n            weight: 25,\r\n            passingThreshold: 60,\r\n            totalPoints: 100\r\n        },\r\n        rubricLevels: [\r\n            { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n            { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n            { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n            { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n            { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n            { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n            { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n        ],\r\n        criteria: [\r\n            {\r\n                id: 'criterion-1',\r\n                name: '',\r\n                description: '',\r\n                maxPoints: 20,\r\n                weight: 20,\r\n                levels: {},\r\n                feedbackLibrary: {\r\n                    strengths: [],\r\n                    improvements: [],\r\n                    general: []\r\n                }\r\n            }\r\n        ],\r\n        pointingSystem: 'multiplier',\r\n        reversedOrder: false,\r\n        expandedFeedback: {},\r\n        modalEdit: { show: false, content: '', field: null, onSave: null }\r\n    });\r\n\r\n    // AI Prompt Generator functions (for rubrics) - UPDATED with weight percentage\r\n    const initializeAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData({\r\n            assignmentType: '',\r\n            programType: '',\r\n            programLevel: '',\r\n            subjectArea: '',\r\n            assignmentDescription: '',\r\n            totalPoints: '100',\r\n            weightPercentage: '', // NEW: Add weight percentage field\r\n            numCriteria: '4',\r\n            criteriaType: 'ai-suggested',\r\n            userCriteria: '',\r\n            learningObjectives: '',\r\n            studentPopulation: '',\r\n            timeFrameNumber: '',\r\n            timeFrameUnit: 'weeks',\r\n            specialConsiderations: ''\r\n        });\r\n    }, []);\r\n\r\n    const updateAIPromptFormData = useCallback((field, value) => {\r\n        setAIPromptFormData(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n    }, []);\r\n\r\n    const clearAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData(null);\r\n    }, []);\r\n\r\n    // NEW: Assignment Prompt Generator functions\r\n    const initializeAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData({\r\n            assignmentTitle: '',\r\n            assignmentNumber: '',\r\n            weightPercentage: '',\r\n            courseCode: '',\r\n            programLevel: '',\r\n            subjectArea: '',\r\n            assignmentDescription: '',\r\n            rationale: 'This assignment will evaluate the following Course Learning Outcomes:',\r\n            clos: [\r\n                { id: 1, number: '1', text: '', type: 'CLO' },\r\n                { id: 2, number: '2', text: '', type: 'CLO' },\r\n                { id: 3, number: '3', text: '', type: 'CLO' },\r\n                { id: 4, number: '4', text: '', type: 'CLO' }\r\n            ],\r\n            directions: '',\r\n            gradingMethod: 'rubric',\r\n            gradingDetails: '',\r\n            dueDate: '',\r\n            submissionFolder: 'Assignment X',\r\n            specialInstructions: ''\r\n        });\r\n    }, []);\r\n\r\n    const updateAssignmentPromptFormData = useCallback((field, value) => {\r\n        setAssignmentPromptFormData(prev => ({\r\n            ...prev,\r\n            [field]: value\r\n        }));\r\n    }, []);\r\n\r\n    const clearAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData(null);\r\n    }, []);\r\n\r\n    // Form update functions\r\n    const updateStudentInfo = useCallback((studentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, ...studentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((courseInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, ...courseInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, ...assignmentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((feedbackInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: { ...prev.feedback, ...feedbackInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicyInfo = useCallback((latePolicyInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy: { ...prev.latePolicy, ...latePolicyInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((rubricGrading) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((metadata) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: { ...prev.metadata, ...metadata }\r\n        }));\r\n    }, []);\r\n\r\n    // ENHANCED: Draft and Final Grade Management\r\n    const saveDraft = useCallback((studentId, gradingData) => {\r\n        const draftData = {\r\n            ...gradingData,\r\n            metadata: {\r\n                ...gradingData.metadata,\r\n                savedAt: new Date().toISOString(),\r\n                status: 'draft'\r\n            }\r\n        };\r\n\r\n        setDrafts(prev => ({\r\n            ...prev,\r\n            [studentId]: draftData\r\n        }));\r\n\r\n        console.log('✅ Draft saved for student:', studentId);\r\n        return true;\r\n    }, []);\r\n\r\n    const hasDraft = useCallback((studentId) => {\r\n        return drafts[studentId] !== undefined;\r\n    }, [drafts]);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        const draft = drafts[studentId];\r\n        if (draft) {\r\n            console.log('📝 Draft loaded for student:', studentId);\r\n            return draft;\r\n        }\r\n        console.log('⚠️ No draft found for student:', studentId);\r\n        return null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, data) => {\r\n        console.log('✅ Saving final grade for student:', studentId);\r\n        setFinalGrades(prev => ({ ...prev, [studentId]: data }));\r\n\r\n        // Remove from drafts once finalized\r\n        setDrafts(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[studentId];\r\n            return updated;\r\n        });\r\n\r\n        // Update class list progress\r\n        if (classList) {\r\n            const studentIndex = classList.students.findIndex(s => s.id === studentId);\r\n            if (studentIndex >= 0) {\r\n                const updatedProgress = [...classList.gradingProgress];\r\n                updatedProgress[studentIndex] = {\r\n                    ...updatedProgress[studentIndex],\r\n                    status: 'completed_final',\r\n                    lastModified: new Date().toISOString(),\r\n                    gradeType: 'final'\r\n                };\r\n                setClassList(prev => ({\r\n                    ...prev,\r\n                    gradingProgress: updatedProgress\r\n                }));\r\n            }\r\n        }\r\n    }, [classList, setDrafts, setClassList]);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    // Navigation helpers for grading sessions\r\n    const nextStudentInSession = useCallback((saveType = 'draft') => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        const students = classList.students;\r\n\r\n        if (currentIndex < students.length - 1) {\r\n            const nextIndex = currentIndex + 1;\r\n            const nextStudent = students[nextIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: nextIndex,\r\n                currentStudent: nextStudent,\r\n                gradedStudents: [...prev.gradedStudents, currentStudent.id]\r\n            }));\r\n\r\n            setCurrentStudent(nextStudent);\r\n            return true;\r\n        }\r\n\r\n        // End of session\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            active: false,\r\n            gradedStudents: [...prev.gradedStudents, currentStudent.id]\r\n        }));\r\n        return false;\r\n    }, [gradingSession, classList, currentStudent]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        if (currentIndex > 0) {\r\n            const prevIndex = currentIndex - 1;\r\n            const prevStudent = classList.students[prevIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: prevIndex,\r\n                currentStudent: prevStudent\r\n            }));\r\n\r\n            setCurrentStudent(prevStudent);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [gradingSession, classList]);\r\n\r\n    // **FIXED: Enhanced initializeGradingSession function**\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        // 1. Guard against missing or empty class list\r\n        if (!classListData || !classListData.students?.length) {\r\n            console.warn('⚠️ Cannot initialize grading session: No students found');\r\n            return false;\r\n        }\r\n\r\n        // 2. Extract the students array and the imported course metadata\r\n        const { students, courseMetadata } = classListData;\r\n\r\n        // 3. Pick the first student to start the session\r\n        const firstStudent = students[0];\r\n\r\n        // 4. Build and set the grading session state\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // 5. Prefill the grading form: student + course details\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            },\r\n            course: {\r\n                code: courseMetadata?.courseCode ?? prev.course.code,\r\n                name: courseMetadata?.courseName ?? prev.course.name,\r\n                instructor: courseMetadata?.instructor ?? prev.course.instructor,\r\n                term: courseMetadata?.term ?? prev.course.term,\r\n            },\r\n            assignment: sharedCourseDetails?.assignment ?? prev.assignment\r\n        }));\r\n\r\n        console.log(`🚀 Grading session started for ${students.length} students`);\r\n        return true;\r\n    }, [sharedCourseDetails]);\r\n\r\n    // Update grading session\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    // Rubric management functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((details) => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setSharedCourseDetails(details);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    // Clear functions\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            assignmentInfo: {\r\n                title: '',\r\n                description: '',\r\n                weight: 25,\r\n                passingThreshold: 60,\r\n                totalPoints: 100\r\n            },\r\n            rubricLevels: [\r\n                { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n                { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n                { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n                { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n                { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n                { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n                { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n            ],\r\n            criteria: [\r\n                {\r\n                    id: 'criterion-1',\r\n                    name: '',\r\n                    description: '',\r\n                    maxPoints: 20,\r\n                    weight: 20,\r\n                    levels: {},\r\n                    feedbackLibrary: {\r\n                        strengths: [],\r\n                        improvements: [],\r\n                        general: []\r\n                    }\r\n                }\r\n            ],\r\n            pointingSystem: 'multiplier',\r\n            reversedOrder: false,\r\n            expandedFeedback: {},\r\n            modalEdit: { show: false, content: '', field: null, onSave: null }\r\n        });\r\n    }, []);\r\n\r\n    // Finalize a draft grade\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draftData = drafts[studentId];\r\n        if (draftData) {\r\n            saveFinalGrade(studentId, draftData);\r\n            console.log('🎯 Finalized draft for student:', studentId);\r\n        }\r\n    }, [drafts, saveFinalGrade]);\r\n\r\n    // Unlock a final grade (convert back to draft)\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalData = finalGrades[studentId];\r\n        if (finalData) {\r\n            // Move from final back to draft\r\n            setDrafts(prev => ({ ...prev, [studentId]: finalData }));\r\n            setFinalGrades(prev => {\r\n                const updated = { ...prev };\r\n                delete updated[studentId];\r\n                return updated;\r\n            });\r\n\r\n            // Update class list progress\r\n            if (classList) {\r\n                const studentIndex = classList.students.findIndex(s => s.id === studentId);\r\n                if (studentIndex >= 0) {\r\n                    const updatedProgress = [...classList.gradingProgress];\r\n                    updatedProgress[studentIndex] = {\r\n                        ...updatedProgress[studentIndex],\r\n                        status: 'completed_draft',\r\n                        lastModified: new Date().toISOString(),\r\n                        gradeType: 'draft'\r\n                    };\r\n                    setClassList(prev => ({\r\n                        ...prev,\r\n                        gradingProgress: updatedProgress\r\n                    }));\r\n                }\r\n            }\r\n\r\n            console.log('🔓 Unlocked final grade for student:', studentId);\r\n        }\r\n    }, [finalGrades, setDrafts, setFinalGrades, classList, setClassList]);\r\n\r\n    // UPDATED: Export Session Function with AI Prompt Data and Assignment Prompt Data\r\n    const exportSession = useCallback(() => {\r\n        const sessionData = {\r\n            sharedRubric,\r\n            classList,\r\n            drafts,\r\n            finalGrades,\r\n            activeTab,\r\n            currentStudent,\r\n            gradingSession,\r\n            sharedCourseDetails,\r\n            aiPromptFormData, // AI Rubric prompt data\r\n            assignmentPromptFormData, // NEW: Assignment prompt data\r\n        };\r\n        const dataStr = JSON.stringify(sessionData, null, 2);\r\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n        const url = URL.createObjectURL(dataBlob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);\r\n        link.download = `grading-session-${timestamp}.json`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n    }, [sharedRubric, classList, drafts, finalGrades, activeTab, currentStudent, gradingSession, sharedCourseDetails, aiPromptFormData, assignmentPromptFormData]);\r\n\r\n    // UPDATED: Import Session Function with AI Prompt Data and Assignment Prompt Data\r\n    const importSession = useCallback((jsonContent) => {\r\n        try {\r\n            const sessionData = JSON.parse(jsonContent);\r\n            if (sessionData && typeof sessionData === 'object') {\r\n                setSharedRubric(sessionData.sharedRubric || null);\r\n                setClassList(sessionData.classList || null);\r\n                setDrafts(sessionData.drafts || {});\r\n                setFinalGrades(sessionData.finalGrades || {});\r\n                setActiveTab(sessionData.activeTab || 'assignment-prompt-generator');\r\n                setCurrentStudent(sessionData.currentStudent || null);\r\n                setGradingSession(sessionData.gradingSession || { active: false });\r\n                setSharedCourseDetails(sessionData.sharedCourseDetails || null);\r\n                setAIPromptFormData(sessionData.aiPromptFormData || null); // AI Rubric prompt data\r\n                setAssignmentPromptFormData(sessionData.assignmentPromptFormData || null); // NEW: Assignment prompt data\r\n                alert('Session loaded successfully!');\r\n            } else {\r\n                throw new Error('Invalid file format.');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to import session:\", error);\r\n            alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\r\n        }\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n        clearAIPromptFormData(); // Clear AI Rubric prompt data\r\n        clearAssignmentPromptFormData(); // NEW: Clear assignment prompt data\r\n    }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\r\n\r\n    const persistentFormData = gradingFormData;\r\n    const updatePersistentFormData = setGradingFormData;\r\n\r\n    const value = {\r\n        // Shared state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n\r\n        // Navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // AI Prompt Generator (for rubrics)\r\n        aiPromptFormData,\r\n        updateAIPromptFormData,\r\n        initializeAIPromptFormData,\r\n        clearAIPromptFormData,\r\n\r\n        // NEW: Assignment Prompt Generator\r\n        assignmentPromptFormData,\r\n        updateAssignmentPromptFormData,\r\n        initializeAssignmentPromptFormData,\r\n        clearAssignmentPromptFormData,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        clearGradingFormData,\r\n        persistentFormData,\r\n        updatePersistentFormData,\r\n\r\n        // Form update functions\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicyInfo,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Draft and Final Grade Management - ENHANCED\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Class management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Utility functions\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Session management\r\n        exportSession,\r\n        importSession\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AssessmentProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}