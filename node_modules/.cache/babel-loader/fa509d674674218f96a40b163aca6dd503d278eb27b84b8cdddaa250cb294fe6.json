{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Complete Fixed SharedContext.js - Fully Merged with ALL Original Features + Late Policy Enhancement\n// This version preserves EVERY function and feature from the original while adding late policy support\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n\n// DEFAULT LATE POLICY SYSTEM\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const DEFAULT_LATE_POLICY = {\n  id: 'institutional',\n  name: 'Institutional Policy',\n  description: 'Standard institutional late assignment policy',\n  levels: {\n    none: {\n      name: 'On Time',\n      multiplier: 1.0,\n      description: 'Assignment submitted on or before due date and time - marked out of 100%',\n      color: '#16a34a',\n      timeframe: 'On or before due date'\n    },\n    within24: {\n      name: '1-24 Hours Late',\n      multiplier: 0.8,\n      description: 'Assignment received within 24 hours of due date - 20% reduction (marked out of 80%)',\n      color: '#ea580c',\n      timeframe: 'Up to 24 hours late'\n    },\n    after24: {\n      name: 'More than 24 Hours Late',\n      multiplier: 0.0,\n      description: 'Assignment received after 24 hours from due date - mark of zero (0)',\n      color: '#dc2626',\n      timeframe: 'More than 24 hours late'\n    }\n  }\n};\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // ORIGINAL: Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [activeTab, setActiveTab] = useState('assignment-prompt-generator');\n\n  // ORIGINAL: AI Prompt Generator state (for rubrics)\n  const [aiPromptFormData, setAIPromptFormData] = useState(null);\n\n  // ORIGINAL: Assignment Prompt Generator state\n  const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\n\n  // ORIGINAL: Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ORIGINAL: Grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    classListData: null,\n    currentStudentIndex: 0,\n    currentStudent: null,\n    startedAt: null\n  });\n\n  // ORIGINAL: Form data states\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      semester: '',\n      year: ''\n    },\n    assignment: {\n      title: '',\n      description: '',\n      dueDate: '',\n      totalPoints: 100,\n      maxPoints: 100\n    },\n    rubricGrading: {},\n    feedback: {\n      strengths: '',\n      improvements: '',\n      general: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      version: '1.0',\n      notes: ''\n    },\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false,\n      policyId: null,\n      originalScore: null,\n      adjustedScore: null,\n      multiplier: 1.0\n    }\n  });\n  const [rubricFormData, setRubricFormData] = useState({\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      semester: '',\n      year: ''\n    },\n    assignment: {\n      title: '',\n      description: '',\n      dueDate: '',\n      totalPoints: 100,\n      passingThreshold: 70\n    },\n    criteria: []\n  });\n\n  // ORIGINAL: Draft and final grade storage\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // NEW: Late policy management\n  const [currentLatePolicy, setCurrentLatePolicy] = useState(DEFAULT_LATE_POLICY);\n  const [customLatePolicies, setCustomLatePolicies] = useState([]);\n\n  // ORIGINAL: AI Prompt form management\n  const initializeAIPromptFormData = useCallback(() => {\n    setAIPromptFormData({\n      assignmentType: '',\n      programType: 'diploma',\n      // Default to diploma program type to match policy system\n      programLevel: '',\n      subjectArea: '',\n      assignmentDescription: '',\n      totalPoints: '100',\n      weightPercentage: '',\n      numCriteria: '4',\n      criteriaType: 'ai-suggested',\n      userCriteria: '',\n      learningObjectives: '',\n      studentPopulation: '',\n      timeFrameNumber: '',\n      timeFrameUnit: 'weeks',\n      specialConsiderations: ''\n    });\n  }, []);\n  const updateAIPromptFormData = useCallback((field, value) => {\n    setAIPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const clearAIPromptFormData = useCallback(() => {\n    setAIPromptFormData(null);\n  }, []);\n\n  // ORIGINAL: Assignment Prompt form management\n  const initializeAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData({\n      assignmentTitle: '',\n      assignmentNumber: '',\n      assignmentDescription: '',\n      weightPercentage: '',\n      subjectArea: '',\n      programLevel: '',\n      clos: [],\n      specialInstructions: ''\n    });\n  }, []);\n  const updateAssignmentPromptFormData = useCallback((field, value) => {\n    setAssignmentPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const clearAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData(null);\n  }, []);\n\n  // ORIGINAL: Grading form update functions\n  const updateStudentInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicyInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy: {\n        ...prev.latePolicy,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateRubricGrading = useCallback((criterionId, data) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading: {\n        ...prev.rubricGrading,\n        [criterionId]: data\n      }\n    }));\n  }, []);\n  const updateMetadata = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  // ORIGINAL: Draft and final grade management\n  const saveDraft = useCallback((studentId, gradeData) => {\n    const draftData = {\n      ...gradeData,\n      savedAt: new Date().toISOString(),\n      type: 'draft'\n    };\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: draftData\n    }));\n\n    // Also save to localStorage for persistence\n    try {\n      const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\n      existingDrafts[studentId] = draftData;\n      localStorage.setItem('gradingDrafts', JSON.stringify(existingDrafts));\n    } catch (error) {\n      console.error('Failed to save draft to localStorage:', error);\n    }\n    console.log('âœ… Draft saved for student:', studentId);\n  }, []);\n  const loadDraft = useCallback(studentId => {\n    // First check memory\n    if (drafts[studentId]) {\n      return drafts[studentId];\n    }\n\n    // Then check localStorage\n    try {\n      const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\n      if (existingDrafts[studentId]) {\n        // Update memory with localStorage data\n        setDrafts(prev => ({\n          ...prev,\n          [studentId]: existingDrafts[studentId]\n        }));\n        return existingDrafts[studentId];\n      }\n    } catch (error) {\n      console.error('Failed to load draft from localStorage:', error);\n    }\n    return null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, gradeData) => {\n    const finalData = {\n      ...gradeData,\n      finalizedAt: new Date().toISOString(),\n      type: 'final'\n    };\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: finalData\n    }));\n\n    // Remove from drafts when finalized\n    setDrafts(prev => {\n      const newDrafts = {\n        ...prev\n      };\n      delete newDrafts[studentId];\n      return newDrafts;\n    });\n\n    // Also save to localStorage and remove draft\n    try {\n      const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\n      existingFinals[studentId] = finalData;\n      localStorage.setItem('finalGrades', JSON.stringify(existingFinals));\n      const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\n      delete existingDrafts[studentId];\n      localStorage.setItem('gradingDrafts', JSON.stringify(existingDrafts));\n    } catch (error) {\n      console.error('Failed to save final grade to localStorage:', error);\n    }\n    console.log('âœ… Final grade saved for student:', studentId);\n  }, []);\n  const loadFinalGrade = useCallback(studentId => {\n    // First check memory\n    if (finalGrades[studentId]) {\n      return finalGrades[studentId];\n    }\n\n    // Then check localStorage\n    try {\n      const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\n      if (existingFinals[studentId]) {\n        // Update memory with localStorage data\n        setFinalGrades(prev => ({\n          ...prev,\n          [studentId]: existingFinals[studentId]\n        }));\n        return existingFinals[studentId];\n      }\n    } catch (error) {\n      console.error('Failed to load final grade from localStorage:', error);\n    }\n    return null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId] || localStorage.getItem('finalGrades') && JSON.parse(localStorage.getItem('finalGrades'))[studentId]) {\n      return 'final';\n    }\n    if (drafts[studentId] || localStorage.getItem('gradingDrafts') && JSON.parse(localStorage.getItem('gradingDrafts'))[studentId]) {\n      return 'draft';\n    }\n    return 'none';\n  }, [drafts, finalGrades]);\n  const hasDraft = useCallback(studentId => {\n    return getGradeStatus(studentId) === 'draft';\n  }, [getGradeStatus]);\n  const finalizeGrade = useCallback(studentId => {\n    const draft = loadDraft(studentId);\n    if (draft) {\n      saveFinalGrade(studentId, draft);\n      return true;\n    }\n    return false;\n  }, [loadDraft, saveFinalGrade]);\n  const unlockGrade = useCallback(studentId => {\n    const finalGrade = loadFinalGrade(studentId);\n    if (finalGrade) {\n      // Move final grade back to draft\n      saveDraft(studentId, {\n        ...finalGrade,\n        type: 'draft'\n      });\n\n      // Remove from final grades\n      setFinalGrades(prev => {\n        const newFinals = {\n          ...prev\n        };\n        delete newFinals[studentId];\n        return newFinals;\n      });\n\n      // Also update localStorage\n      try {\n        const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\n        delete existingFinals[studentId];\n        localStorage.setItem('finalGrades', JSON.stringify(existingFinals));\n      } catch (error) {\n        console.error('Failed to update localStorage:', error);\n      }\n      console.log('âœ… Grade unlocked for student:', studentId);\n      return true;\n    }\n    return false;\n  }, [loadFinalGrade, saveDraft]);\n\n  // ORIGINAL: Grading session management\n  const initializeGradingSession = useCallback((classListData, rubricData) => {\n    if (!classListData || !classListData.students || classListData.students.length === 0) {\n      console.warn('Cannot initialize grading session: No students found');\n      return false;\n    }\n    const firstStudent = classListData.students[0];\n    setGradingSession({\n      active: true,\n      classListData: classListData,\n      currentStudentIndex: 0,\n      currentStudent: firstStudent,\n      startedAt: new Date().toISOString()\n    });\n    setCurrentStudent(firstStudent);\n\n    // Auto-populate course information from class list\n    if (classListData.courseMetadata) {\n      updateCourseInfo('code', classListData.courseMetadata.courseCode || '');\n      updateCourseInfo('name', classListData.courseMetadata.courseName || '');\n      updateCourseInfo('instructor', classListData.courseMetadata.instructor || classListData.courseMetadata.professors || '');\n    }\n\n    // Auto-populate assignment information from rubric\n    if (rubricData && rubricData.assignmentInfo) {\n      updateAssignmentInfo('title', rubricData.assignmentInfo.title || '');\n      updateAssignmentInfo('description', rubricData.assignmentInfo.description || '');\n      updateAssignmentInfo('totalPoints', rubricData.assignmentInfo.totalPoints || 100);\n      updateAssignmentInfo('maxPoints', rubricData.assignmentInfo.totalPoints || 100);\n    }\n\n    // Auto-populate student information for first student\n    updateStudentInfo('name', firstStudent.name || '');\n    updateStudentInfo('id', firstStudent.id || '');\n    updateStudentInfo('email', firstStudent.email || '');\n    console.log('âœ… Grading session initialized:', {\n      totalStudents: classListData.students.length,\n      firstStudent: firstStudent.name,\n      courseInfo: classListData.courseMetadata\n    });\n    return true;\n  }, [updateCourseInfo, updateAssignmentInfo, updateStudentInfo]);\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const nextStudentInSession = useCallback((saveType = null) => {\n    if (!gradingSession.active || !gradingSession.classListData) {\n      console.warn('No active grading session');\n      return false;\n    }\n    const nextIndex = gradingSession.currentStudentIndex + 1;\n    if (nextIndex >= gradingSession.classListData.students.length) {\n      console.log('Reached end of student list');\n      return false;\n    }\n    const nextStudent = gradingSession.classListData.students[nextIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: nextIndex,\n      currentStudent: nextStudent\n    }));\n    setCurrentStudent(nextStudent);\n\n    // Auto-populate student information for next student\n    updateStudentInfo('name', nextStudent.name || '');\n    updateStudentInfo('id', nextStudent.id || '');\n    updateStudentInfo('email', nextStudent.email || '');\n    console.log('âœ… Moved to next student:', nextStudent.name);\n    return true;\n  }, [gradingSession, updateStudentInfo]);\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !gradingSession.classListData) {\n      console.warn('No active grading session');\n      return false;\n    }\n    const prevIndex = gradingSession.currentStudentIndex - 1;\n    if (prevIndex < 0) {\n      console.log('Already at first student');\n      return false;\n    }\n    const prevStudent = gradingSession.classListData.students[prevIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: prevIndex,\n      currentStudent: prevStudent\n    }));\n    setCurrentStudent(prevStudent);\n\n    // Auto-populate student information for previous student\n    updateStudentInfo('name', prevStudent.name || '');\n    updateStudentInfo('id', prevStudent.id || '');\n    updateStudentInfo('email', prevStudent.email || '');\n    console.log('âœ… Moved to previous student:', prevStudent.name);\n    return true;\n  }, [gradingSession, updateStudentInfo]);\n\n  // NEW: Late policy management functions\n  const loadLatePoliciesFromStorage = useCallback(() => {\n    try {\n      const stored = localStorage.getItem('customLatePolicies');\n      if (stored) {\n        const policies = JSON.parse(stored);\n        setCustomLatePolicies(policies);\n      }\n      const currentPolicyStored = localStorage.getItem('currentLatePolicy');\n      if (currentPolicyStored) {\n        const policy = JSON.parse(currentPolicyStored);\n        setCurrentLatePolicy(policy);\n      }\n    } catch (error) {\n      console.error('Failed to load late policies from localStorage:', error);\n    }\n  }, []);\n  const saveCustomLatePolicy = useCallback(policyData => {\n    const newPolicy = {\n      ...policyData,\n      id: `custom-${Date.now()}`,\n      createdAt: new Date().toISOString()\n    };\n    setCustomLatePolicies(prev => [...prev, newPolicy]);\n    try {\n      const updated = [...customLatePolicies, newPolicy];\n      localStorage.setItem('customLatePolicies', JSON.stringify(updated));\n    } catch (error) {\n      console.error('Failed to save custom late policy:', error);\n    }\n    return newPolicy;\n  }, [customLatePolicies]);\n  const updateCustomLatePolicy = useCallback((policyId, policyData) => {\n    setCustomLatePolicies(prev => prev.map(policy => policy.id === policyId ? {\n      ...policy,\n      ...policyData,\n      updatedAt: new Date().toISOString()\n    } : policy));\n    try {\n      const updated = customLatePolicies.map(policy => policy.id === policyId ? {\n        ...policy,\n        ...policyData,\n        updatedAt: new Date().toISOString()\n      } : policy);\n      localStorage.setItem('customLatePolicies', JSON.stringify(updated));\n    } catch (error) {\n      console.error('Failed to update custom late policy:', error);\n    }\n  }, [customLatePolicies]);\n  const deleteCustomLatePolicy = useCallback(policyId => {\n    setCustomLatePolicies(prev => prev.filter(policy => policy.id !== policyId));\n    try {\n      const updated = customLatePolicies.filter(policy => policy.id !== policyId);\n      localStorage.setItem('customLatePolicies', JSON.stringify(updated));\n    } catch (error) {\n      console.error('Failed to delete custom late policy:', error);\n    }\n\n    // If this was the current policy, reset to default\n    if (currentLatePolicy.id === policyId) {\n      setCurrentLatePolicy(DEFAULT_LATE_POLICY);\n    }\n  }, [customLatePolicies, currentLatePolicy]);\n  const applyLatePolicy = useCallback((score, level, policyId = null) => {\n    const policy = policyId ? [...customLatePolicies, DEFAULT_LATE_POLICY].find(p => p.id === policyId) : currentLatePolicy;\n    if (!policy || !policy.levels[level]) {\n      return {\n        adjustedScore: score,\n        penaltyApplied: false\n      };\n    }\n    const multiplier = policy.levels[level].multiplier;\n    const adjustedScore = score * multiplier;\n    return {\n      adjustedScore: Math.round(adjustedScore * 10) / 10,\n      // Round to 1 decimal\n      penaltyApplied: level !== 'none',\n      multiplier: multiplier,\n      policyUsed: policy.name,\n      levelUsed: policy.levels[level].name\n    };\n  }, [customLatePolicies, currentLatePolicy]);\n  const calculateScoreWithLatePolicy = useCallback((baseScore, latePolicyLevel = 'none') => {\n    const policyLevel = currentLatePolicy.levels[latePolicyLevel];\n    if (!policyLevel) {\n      return baseScore;\n    }\n    const adjustedScore = baseScore * policyLevel.multiplier;\n    updateLatePolicyInfo('originalScore', baseScore);\n    updateLatePolicyInfo('adjustedScore', adjustedScore);\n    updateLatePolicyInfo('multiplier', policyLevel.multiplier);\n    updateLatePolicyInfo('penaltyApplied', latePolicyLevel !== 'none');\n    return adjustedScore;\n  }, [currentLatePolicy, updateLatePolicyInfo]);\n\n  // ORIGINAL: Clear form data functions\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        semester: '',\n        year: ''\n      },\n      assignment: {\n        title: '',\n        description: '',\n        dueDate: '',\n        totalPoints: 100,\n        maxPoints: 100\n      },\n      rubricGrading: {},\n      feedback: {\n        strengths: '',\n        improvements: '',\n        general: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        version: '1.0',\n        notes: ''\n      },\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false,\n        policyId: null,\n        originalScore: null,\n        adjustedScore: null,\n        multiplier: 1.0\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        semester: '',\n        year: ''\n      },\n      assignment: {\n        title: '',\n        description: '',\n        dueDate: '',\n        totalPoints: 100,\n        passingThreshold: 70\n      },\n      criteria: []\n    });\n  }, []);\n\n  // ORIGINAL: Transfer and utility functions\n  const transferRubricToGrading = useCallback(() => {\n    if (sharedRubric) {\n      setGradingFormData(prev => ({\n        ...prev,\n        course: sharedRubric.courseInfo || prev.course,\n        assignment: sharedRubric.assignmentInfo || prev.assignment\n      }));\n    }\n  }, [sharedRubric]);\n  const transferRubricToGradingWithDetails = useCallback(rubricData => {\n    if (rubricData) {\n      setGradingFormData(prev => ({\n        ...prev,\n        course: rubricData.courseInfo || prev.course,\n        assignment: rubricData.assignmentInfo || prev.assignment,\n        rubricGrading: {}\n      }));\n    }\n  }, []);\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n\n  // ORIGINAL: Session management\n  const exportSession = useCallback(() => {\n    const sessionData = {\n      rubric: sharedRubric,\n      courseDetails: sharedCourseDetails,\n      gradingData: gradingFormData,\n      classList: classList,\n      currentStudent: currentStudent,\n      drafts: drafts,\n      finalGrades: finalGrades,\n      customLatePolicies: customLatePolicies,\n      currentLatePolicy: currentLatePolicy,\n      exportedAt: new Date().toISOString(),\n      version: '2.0'\n    };\n    const blob = new Blob([JSON.stringify(sessionData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `grading-session-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }, [sharedRubric, sharedCourseDetails, gradingFormData, classList, currentStudent, drafts, finalGrades, customLatePolicies, currentLatePolicy]);\n  const importSession = useCallback(sessionData => {\n    try {\n      const data = typeof sessionData === 'string' ? JSON.parse(sessionData) : sessionData;\n      if (data.rubric) setSharedRubric(data.rubric);\n      if (data.courseDetails) setSharedCourseDetails(data.courseDetails);\n      if (data.gradingData) setGradingFormData(data.gradingData);\n      if (data.classList) setClassList(data.classList);\n      if (data.currentStudent) setCurrentStudent(data.currentStudent);\n      if (data.drafts) setDrafts(data.drafts);\n      if (data.finalGrades) setFinalGrades(data.finalGrades);\n\n      // Import late policy data if available\n      if (data.customLatePolicies) setCustomLatePolicies(data.customLatePolicies);\n      if (data.currentLatePolicy) setCurrentLatePolicy(data.currentLatePolicy);\n      console.log('âœ… Session imported successfully with late policy data');\n    } catch (error) {\n      console.error(\"Failed to import session:\", error);\n      alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\n    }\n  }, []);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    clearGradingFormData();\n    clearRubricFormData();\n    clearAIPromptFormData();\n    clearAssignmentPromptFormData();\n    setDrafts({});\n    setFinalGrades({});\n    setCustomLatePolicies([]);\n    setCurrentLatePolicy(DEFAULT_LATE_POLICY);\n\n    // Also clear localStorage\n    try {\n      localStorage.removeItem('gradingDrafts');\n      localStorage.removeItem('finalGrades');\n      localStorage.removeItem('customLatePolicies');\n      localStorage.removeItem('currentLatePolicy');\n    } catch (error) {\n      console.error('Failed to clear localStorage:', error);\n    }\n  }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\n\n  // Context value with ALL functions\n  const value = {\n    // Shared state\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    // Navigation\n    activeTab,\n    setActiveTab,\n    // AI Prompt Generator (for rubrics)\n    aiPromptFormData,\n    updateAIPromptFormData,\n    initializeAIPromptFormData,\n    clearAIPromptFormData,\n    // Assignment Prompt Generator\n    assignmentPromptFormData,\n    updateAssignmentPromptFormData,\n    initializeAssignmentPromptFormData,\n    clearAssignmentPromptFormData,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    clearGradingFormData,\n    persistentFormData: gradingFormData,\n    updatePersistentFormData: setGradingFormData,\n    // Form update functions\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicyInfo,\n    updateRubricGrading,\n    updateMetadata,\n    // Draft and Final Grade Management\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Class management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Grading session\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    // Late Policy Management\n    currentLatePolicy,\n    setCurrentLatePolicy,\n    customLatePolicies,\n    setCustomLatePolicies,\n    loadLatePoliciesFromStorage,\n    saveCustomLatePolicy,\n    updateCustomLatePolicy,\n    deleteCustomLatePolicy,\n    applyLatePolicy,\n    calculateScoreWithLatePolicy,\n    // Utility functions\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    clearRubricFormData,\n    clearAllData,\n    // Session management\n    exportSession,\n    importSession\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 813,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"KfmWCRZ35x0Lm/PJsWxGSc3Egus=\");\n_c = AssessmentProvider;\nexport default AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","DEFAULT_LATE_POLICY","id","name","description","levels","none","multiplier","color","timeframe","within24","after24","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","aiPromptFormData","setAIPromptFormData","assignmentPromptFormData","setAssignmentPromptFormData","classList","setClassList","currentStudent","setCurrentStudent","gradingSession","setGradingSession","active","classListData","currentStudentIndex","startedAt","gradingFormData","setGradingFormData","student","email","course","code","instructor","semester","year","assignment","title","dueDate","totalPoints","maxPoints","rubricGrading","feedback","strengths","improvements","general","attachments","videoLinks","metadata","gradedBy","gradedDate","version","notes","latePolicy","level","penaltyApplied","policyId","originalScore","adjustedScore","rubricFormData","setRubricFormData","passingThreshold","criteria","drafts","setDrafts","finalGrades","setFinalGrades","currentLatePolicy","setCurrentLatePolicy","customLatePolicies","setCustomLatePolicies","initializeAIPromptFormData","assignmentType","programType","programLevel","subjectArea","assignmentDescription","weightPercentage","numCriteria","criteriaType","userCriteria","learningObjectives","studentPopulation","timeFrameNumber","timeFrameUnit","specialConsiderations","updateAIPromptFormData","field","value","prev","clearAIPromptFormData","initializeAssignmentPromptFormData","assignmentTitle","assignmentNumber","clos","specialInstructions","updateAssignmentPromptFormData","clearAssignmentPromptFormData","updateStudentInfo","updateCourseInfo","updateAssignmentInfo","updateFeedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicyInfo","updateRubricGrading","criterionId","data","updateMetadata","saveDraft","studentId","gradeData","draftData","savedAt","Date","toISOString","type","existingDrafts","JSON","parse","localStorage","getItem","setItem","stringify","error","console","log","loadDraft","saveFinalGrade","finalData","finalizedAt","newDrafts","existingFinals","loadFinalGrade","getGradeStatus","hasDraft","finalizeGrade","draft","unlockGrade","finalGrade","newFinals","initializeGradingSession","rubricData","students","length","warn","firstStudent","courseMetadata","courseCode","courseName","professors","assignmentInfo","totalStudents","courseInfo","updateGradingSession","updates","nextStudentInSession","saveType","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","loadLatePoliciesFromStorage","stored","policies","currentPolicyStored","policy","saveCustomLatePolicy","policyData","newPolicy","now","createdAt","updated","updateCustomLatePolicy","map","updatedAt","deleteCustomLatePolicy","filter","applyLatePolicy","score","find","p","Math","round","policyUsed","levelUsed","calculateScoreWithLatePolicy","baseScore","latePolicyLevel","policyLevel","clearGradingFormData","clearRubricFormData","transferRubricToGrading","transferRubricToGradingWithDetails","clearSharedRubric","exportSession","sessionData","rubric","courseDetails","gradingData","exportedAt","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","importSession","alert","clearAllData","removeItem","setGradingData","persistentFormData","updatePersistentFormData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// Complete Fixed SharedContext.js - Fully Merged with ALL Original Features + Late Policy Enhancement\r\n// This version preserves EVERY function and feature from the original while adding late policy support\r\n\r\nimport React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\n// DEFAULT LATE POLICY SYSTEM\r\nexport const DEFAULT_LATE_POLICY = {\r\n    id: 'institutional',\r\n    name: 'Institutional Policy',\r\n    description: 'Standard institutional late assignment policy',\r\n    levels: {\r\n        none: {\r\n            name: 'On Time',\r\n            multiplier: 1.0,\r\n            description: 'Assignment submitted on or before due date and time - marked out of 100%',\r\n            color: '#16a34a',\r\n            timeframe: 'On or before due date'\r\n        },\r\n        within24: {\r\n            name: '1-24 Hours Late',\r\n            multiplier: 0.8,\r\n            description: 'Assignment received within 24 hours of due date - 20% reduction (marked out of 80%)',\r\n            color: '#ea580c',\r\n            timeframe: 'Up to 24 hours late'\r\n        },\r\n        after24: {\r\n            name: 'More than 24 Hours Late',\r\n            multiplier: 0.0,\r\n            description: 'Assignment received after 24 hours from due date - mark of zero (0)',\r\n            color: '#dc2626',\r\n            timeframe: 'More than 24 hours late'\r\n        }\r\n    }\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // ORIGINAL: Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('assignment-prompt-generator');\r\n\r\n    // ORIGINAL: AI Prompt Generator state (for rubrics)\r\n    const [aiPromptFormData, setAIPromptFormData] = useState(null);\r\n\r\n    // ORIGINAL: Assignment Prompt Generator state\r\n    const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\r\n\r\n    // ORIGINAL: Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ORIGINAL: Grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        classListData: null,\r\n        currentStudentIndex: 0,\r\n        currentStudent: null,\r\n        startedAt: null\r\n    });\r\n\r\n    // ORIGINAL: Form data states\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n        assignment: { title: '', description: '', dueDate: '', totalPoints: 100, maxPoints: 100 },\r\n        rubricGrading: {},\r\n        feedback: { strengths: '', improvements: '', general: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        metadata: { gradedBy: '', gradedDate: '', version: '1.0', notes: '' },\r\n        latePolicy: {\r\n            level: 'none',\r\n            penaltyApplied: false,\r\n            policyId: null,\r\n            originalScore: null,\r\n            adjustedScore: null,\r\n            multiplier: 1.0\r\n        }\r\n    });\r\n\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n        assignment: { title: '', description: '', dueDate: '', totalPoints: 100, passingThreshold: 70 },\r\n        criteria: []\r\n    });\r\n\r\n    // ORIGINAL: Draft and final grade storage\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // NEW: Late policy management\r\n    const [currentLatePolicy, setCurrentLatePolicy] = useState(DEFAULT_LATE_POLICY);\r\n    const [customLatePolicies, setCustomLatePolicies] = useState([]);\r\n\r\n    // ORIGINAL: AI Prompt form management\r\n    const initializeAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData({\r\n            assignmentType: '',\r\n            programType: 'diploma', // Default to diploma program type to match policy system\r\n            programLevel: '',\r\n            subjectArea: '',\r\n            assignmentDescription: '',\r\n            totalPoints: '100',\r\n            weightPercentage: '',\r\n            numCriteria: '4',\r\n            criteriaType: 'ai-suggested',\r\n            userCriteria: '',\r\n            learningObjectives: '',\r\n            studentPopulation: '',\r\n            timeFrameNumber: '',\r\n            timeFrameUnit: 'weeks',\r\n            specialConsiderations: ''\r\n        });\r\n    }, []);\r\n\r\n    const updateAIPromptFormData = useCallback((field, value) => {\r\n        setAIPromptFormData(prev => ({ ...prev, [field]: value }));\r\n    }, []);\r\n\r\n    const clearAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData(null);\r\n    }, []);\r\n\r\n    // ORIGINAL: Assignment Prompt form management\r\n    const initializeAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData({\r\n            assignmentTitle: '',\r\n            assignmentNumber: '',\r\n            assignmentDescription: '',\r\n            weightPercentage: '',\r\n            subjectArea: '',\r\n            programLevel: '',\r\n            clos: [],\r\n            specialInstructions: ''\r\n        });\r\n    }, []);\r\n\r\n    const updateAssignmentPromptFormData = useCallback((field, value) => {\r\n        setAssignmentPromptFormData(prev => ({ ...prev, [field]: value }));\r\n    }, []);\r\n\r\n    const clearAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData(null);\r\n    }, []);\r\n\r\n    // ORIGINAL: Grading form update functions\r\n    const updateStudentInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: { ...prev.feedback, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({ ...prev, attachments }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({ ...prev, videoLinks }));\r\n    }, []);\r\n\r\n    const updateLatePolicyInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy: { ...prev.latePolicy, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((criterionId, data) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading: { ...prev.rubricGrading, [criterionId]: data }\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: { ...prev.metadata, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    // ORIGINAL: Draft and final grade management\r\n    const saveDraft = useCallback((studentId, gradeData) => {\r\n        const draftData = {\r\n            ...gradeData,\r\n            savedAt: new Date().toISOString(),\r\n            type: 'draft'\r\n        };\r\n        setDrafts(prev => ({ ...prev, [studentId]: draftData }));\r\n\r\n        // Also save to localStorage for persistence\r\n        try {\r\n            const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\r\n            existingDrafts[studentId] = draftData;\r\n            localStorage.setItem('gradingDrafts', JSON.stringify(existingDrafts));\r\n        } catch (error) {\r\n            console.error('Failed to save draft to localStorage:', error);\r\n        }\r\n\r\n        console.log('âœ… Draft saved for student:', studentId);\r\n    }, []);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        // First check memory\r\n        if (drafts[studentId]) {\r\n            return drafts[studentId];\r\n        }\r\n\r\n        // Then check localStorage\r\n        try {\r\n            const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\r\n            if (existingDrafts[studentId]) {\r\n                // Update memory with localStorage data\r\n                setDrafts(prev => ({ ...prev, [studentId]: existingDrafts[studentId] }));\r\n                return existingDrafts[studentId];\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load draft from localStorage:', error);\r\n        }\r\n\r\n        return null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, gradeData) => {\r\n        const finalData = {\r\n            ...gradeData,\r\n            finalizedAt: new Date().toISOString(),\r\n            type: 'final'\r\n        };\r\n        setFinalGrades(prev => ({ ...prev, [studentId]: finalData }));\r\n\r\n        // Remove from drafts when finalized\r\n        setDrafts(prev => {\r\n            const newDrafts = { ...prev };\r\n            delete newDrafts[studentId];\r\n            return newDrafts;\r\n        });\r\n\r\n        // Also save to localStorage and remove draft\r\n        try {\r\n            const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\r\n            existingFinals[studentId] = finalData;\r\n            localStorage.setItem('finalGrades', JSON.stringify(existingFinals));\r\n\r\n            const existingDrafts = JSON.parse(localStorage.getItem('gradingDrafts') || '{}');\r\n            delete existingDrafts[studentId];\r\n            localStorage.setItem('gradingDrafts', JSON.stringify(existingDrafts));\r\n        } catch (error) {\r\n            console.error('Failed to save final grade to localStorage:', error);\r\n        }\r\n\r\n        console.log('âœ… Final grade saved for student:', studentId);\r\n    }, []);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        // First check memory\r\n        if (finalGrades[studentId]) {\r\n            return finalGrades[studentId];\r\n        }\r\n\r\n        // Then check localStorage\r\n        try {\r\n            const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\r\n            if (existingFinals[studentId]) {\r\n                // Update memory with localStorage data\r\n                setFinalGrades(prev => ({ ...prev, [studentId]: existingFinals[studentId] }));\r\n                return existingFinals[studentId];\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load final grade from localStorage:', error);\r\n        }\r\n\r\n        return null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId] || (localStorage.getItem('finalGrades') &&\r\n            JSON.parse(localStorage.getItem('finalGrades'))[studentId])) {\r\n            return 'final';\r\n        }\r\n        if (drafts[studentId] || (localStorage.getItem('gradingDrafts') &&\r\n            JSON.parse(localStorage.getItem('gradingDrafts'))[studentId])) {\r\n            return 'draft';\r\n        }\r\n        return 'none';\r\n    }, [drafts, finalGrades]);\r\n\r\n    const hasDraft = useCallback((studentId) => {\r\n        return getGradeStatus(studentId) === 'draft';\r\n    }, [getGradeStatus]);\r\n\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draft = loadDraft(studentId);\r\n        if (draft) {\r\n            saveFinalGrade(studentId, draft);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [loadDraft, saveFinalGrade]);\r\n\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalGrade = loadFinalGrade(studentId);\r\n        if (finalGrade) {\r\n            // Move final grade back to draft\r\n            saveDraft(studentId, { ...finalGrade, type: 'draft' });\r\n\r\n            // Remove from final grades\r\n            setFinalGrades(prev => {\r\n                const newFinals = { ...prev };\r\n                delete newFinals[studentId];\r\n                return newFinals;\r\n            });\r\n\r\n            // Also update localStorage\r\n            try {\r\n                const existingFinals = JSON.parse(localStorage.getItem('finalGrades') || '{}');\r\n                delete existingFinals[studentId];\r\n                localStorage.setItem('finalGrades', JSON.stringify(existingFinals));\r\n            } catch (error) {\r\n                console.error('Failed to update localStorage:', error);\r\n            }\r\n\r\n            console.log('âœ… Grade unlocked for student:', studentId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [loadFinalGrade, saveDraft]);\r\n\r\n    // ORIGINAL: Grading session management\r\n    const initializeGradingSession = useCallback((classListData, rubricData) => {\r\n        if (!classListData || !classListData.students || classListData.students.length === 0) {\r\n            console.warn('Cannot initialize grading session: No students found');\r\n            return false;\r\n        }\r\n\r\n        const firstStudent = classListData.students[0];\r\n\r\n        setGradingSession({\r\n            active: true,\r\n            classListData: classListData,\r\n            currentStudentIndex: 0,\r\n            currentStudent: firstStudent,\r\n            startedAt: new Date().toISOString()\r\n        });\r\n\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // Auto-populate course information from class list\r\n        if (classListData.courseMetadata) {\r\n            updateCourseInfo('code', classListData.courseMetadata.courseCode || '');\r\n            updateCourseInfo('name', classListData.courseMetadata.courseName || '');\r\n            updateCourseInfo('instructor', classListData.courseMetadata.instructor ||\r\n                classListData.courseMetadata.professors || '');\r\n        }\r\n\r\n        // Auto-populate assignment information from rubric\r\n        if (rubricData && rubricData.assignmentInfo) {\r\n            updateAssignmentInfo('title', rubricData.assignmentInfo.title || '');\r\n            updateAssignmentInfo('description', rubricData.assignmentInfo.description || '');\r\n            updateAssignmentInfo('totalPoints', rubricData.assignmentInfo.totalPoints || 100);\r\n            updateAssignmentInfo('maxPoints', rubricData.assignmentInfo.totalPoints || 100);\r\n        }\r\n\r\n        // Auto-populate student information for first student\r\n        updateStudentInfo('name', firstStudent.name || '');\r\n        updateStudentInfo('id', firstStudent.id || '');\r\n        updateStudentInfo('email', firstStudent.email || '');\r\n\r\n        console.log('âœ… Grading session initialized:', {\r\n            totalStudents: classListData.students.length,\r\n            firstStudent: firstStudent.name,\r\n            courseInfo: classListData.courseMetadata\r\n        });\r\n\r\n        return true;\r\n    }, [updateCourseInfo, updateAssignmentInfo, updateStudentInfo]);\r\n\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({ ...prev, ...updates }));\r\n    }, []);\r\n\r\n    const nextStudentInSession = useCallback((saveType = null) => {\r\n        if (!gradingSession.active || !gradingSession.classListData) {\r\n            console.warn('No active grading session');\r\n            return false;\r\n        }\r\n\r\n        const nextIndex = gradingSession.currentStudentIndex + 1;\r\n        if (nextIndex >= gradingSession.classListData.students.length) {\r\n            console.log('Reached end of student list');\r\n            return false;\r\n        }\r\n\r\n        const nextStudent = gradingSession.classListData.students[nextIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: nextIndex,\r\n            currentStudent: nextStudent\r\n        }));\r\n\r\n        setCurrentStudent(nextStudent);\r\n\r\n        // Auto-populate student information for next student\r\n        updateStudentInfo('name', nextStudent.name || '');\r\n        updateStudentInfo('id', nextStudent.id || '');\r\n        updateStudentInfo('email', nextStudent.email || '');\r\n\r\n        console.log('âœ… Moved to next student:', nextStudent.name);\r\n        return true;\r\n    }, [gradingSession, updateStudentInfo]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !gradingSession.classListData) {\r\n            console.warn('No active grading session');\r\n            return false;\r\n        }\r\n\r\n        const prevIndex = gradingSession.currentStudentIndex - 1;\r\n        if (prevIndex < 0) {\r\n            console.log('Already at first student');\r\n            return false;\r\n        }\r\n\r\n        const prevStudent = gradingSession.classListData.students[prevIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: prevIndex,\r\n            currentStudent: prevStudent\r\n        }));\r\n\r\n        setCurrentStudent(prevStudent);\r\n\r\n        // Auto-populate student information for previous student\r\n        updateStudentInfo('name', prevStudent.name || '');\r\n        updateStudentInfo('id', prevStudent.id || '');\r\n        updateStudentInfo('email', prevStudent.email || '');\r\n\r\n        console.log('âœ… Moved to previous student:', prevStudent.name);\r\n        return true;\r\n    }, [gradingSession, updateStudentInfo]);\r\n\r\n    // NEW: Late policy management functions\r\n    const loadLatePoliciesFromStorage = useCallback(() => {\r\n        try {\r\n            const stored = localStorage.getItem('customLatePolicies');\r\n            if (stored) {\r\n                const policies = JSON.parse(stored);\r\n                setCustomLatePolicies(policies);\r\n            }\r\n\r\n            const currentPolicyStored = localStorage.getItem('currentLatePolicy');\r\n            if (currentPolicyStored) {\r\n                const policy = JSON.parse(currentPolicyStored);\r\n                setCurrentLatePolicy(policy);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load late policies from localStorage:', error);\r\n        }\r\n    }, []);\r\n\r\n    const saveCustomLatePolicy = useCallback((policyData) => {\r\n        const newPolicy = {\r\n            ...policyData,\r\n            id: `custom-${Date.now()}`,\r\n            createdAt: new Date().toISOString()\r\n        };\r\n\r\n        setCustomLatePolicies(prev => [...prev, newPolicy]);\r\n\r\n        try {\r\n            const updated = [...customLatePolicies, newPolicy];\r\n            localStorage.setItem('customLatePolicies', JSON.stringify(updated));\r\n        } catch (error) {\r\n            console.error('Failed to save custom late policy:', error);\r\n        }\r\n\r\n        return newPolicy;\r\n    }, [customLatePolicies]);\r\n\r\n    const updateCustomLatePolicy = useCallback((policyId, policyData) => {\r\n        setCustomLatePolicies(prev =>\r\n            prev.map(policy =>\r\n                policy.id === policyId\r\n                    ? { ...policy, ...policyData, updatedAt: new Date().toISOString() }\r\n                    : policy\r\n            )\r\n        );\r\n\r\n        try {\r\n            const updated = customLatePolicies.map(policy =>\r\n                policy.id === policyId\r\n                    ? { ...policy, ...policyData, updatedAt: new Date().toISOString() }\r\n                    : policy\r\n            );\r\n            localStorage.setItem('customLatePolicies', JSON.stringify(updated));\r\n        } catch (error) {\r\n            console.error('Failed to update custom late policy:', error);\r\n        }\r\n    }, [customLatePolicies]);\r\n\r\n    const deleteCustomLatePolicy = useCallback((policyId) => {\r\n        setCustomLatePolicies(prev => prev.filter(policy => policy.id !== policyId));\r\n\r\n        try {\r\n            const updated = customLatePolicies.filter(policy => policy.id !== policyId);\r\n            localStorage.setItem('customLatePolicies', JSON.stringify(updated));\r\n        } catch (error) {\r\n            console.error('Failed to delete custom late policy:', error);\r\n        }\r\n\r\n        // If this was the current policy, reset to default\r\n        if (currentLatePolicy.id === policyId) {\r\n            setCurrentLatePolicy(DEFAULT_LATE_POLICY);\r\n        }\r\n    }, [customLatePolicies, currentLatePolicy]);\r\n\r\n    const applyLatePolicy = useCallback((score, level, policyId = null) => {\r\n        const policy = policyId\r\n            ? [...customLatePolicies, DEFAULT_LATE_POLICY].find(p => p.id === policyId)\r\n            : currentLatePolicy;\r\n\r\n        if (!policy || !policy.levels[level]) {\r\n            return { adjustedScore: score, penaltyApplied: false };\r\n        }\r\n\r\n        const multiplier = policy.levels[level].multiplier;\r\n        const adjustedScore = score * multiplier;\r\n\r\n        return {\r\n            adjustedScore: Math.round(adjustedScore * 10) / 10, // Round to 1 decimal\r\n            penaltyApplied: level !== 'none',\r\n            multiplier: multiplier,\r\n            policyUsed: policy.name,\r\n            levelUsed: policy.levels[level].name\r\n        };\r\n    }, [customLatePolicies, currentLatePolicy]);\r\n\r\n    const calculateScoreWithLatePolicy = useCallback((baseScore, latePolicyLevel = 'none') => {\r\n        const policyLevel = currentLatePolicy.levels[latePolicyLevel];\r\n        if (!policyLevel) {\r\n            return baseScore;\r\n        }\r\n\r\n        const adjustedScore = baseScore * policyLevel.multiplier;\r\n\r\n        updateLatePolicyInfo('originalScore', baseScore);\r\n        updateLatePolicyInfo('adjustedScore', adjustedScore);\r\n        updateLatePolicyInfo('multiplier', policyLevel.multiplier);\r\n        updateLatePolicyInfo('penaltyApplied', latePolicyLevel !== 'none');\r\n\r\n        return adjustedScore;\r\n    }, [currentLatePolicy, updateLatePolicyInfo]);\r\n\r\n    // ORIGINAL: Clear form data functions\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n            assignment: { title: '', description: '', dueDate: '', totalPoints: 100, maxPoints: 100 },\r\n            rubricGrading: {},\r\n            feedback: { strengths: '', improvements: '', general: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            metadata: { gradedBy: '', gradedDate: '', version: '1.0', notes: '' },\r\n            latePolicy: {\r\n                level: 'none',\r\n                penaltyApplied: false,\r\n                policyId: null,\r\n                originalScore: null,\r\n                adjustedScore: null,\r\n                multiplier: 1.0\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n            assignment: { title: '', description: '', dueDate: '', totalPoints: 100, passingThreshold: 70 },\r\n            criteria: []\r\n        });\r\n    }, []);\r\n\r\n    // ORIGINAL: Transfer and utility functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (sharedRubric) {\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                course: sharedRubric.courseInfo || prev.course,\r\n                assignment: sharedRubric.assignmentInfo || prev.assignment\r\n            }));\r\n        }\r\n    }, [sharedRubric]);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((rubricData) => {\r\n        if (rubricData) {\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                course: rubricData.courseInfo || prev.course,\r\n                assignment: rubricData.assignmentInfo || prev.assignment,\r\n                rubricGrading: {}\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    // ORIGINAL: Session management\r\n    const exportSession = useCallback(() => {\r\n        const sessionData = {\r\n            rubric: sharedRubric,\r\n            courseDetails: sharedCourseDetails,\r\n            gradingData: gradingFormData,\r\n            classList: classList,\r\n            currentStudent: currentStudent,\r\n            drafts: drafts,\r\n            finalGrades: finalGrades,\r\n            customLatePolicies: customLatePolicies,\r\n            currentLatePolicy: currentLatePolicy,\r\n            exportedAt: new Date().toISOString(),\r\n            version: '2.0'\r\n        };\r\n\r\n        const blob = new Blob([JSON.stringify(sessionData, null, 2)], { type: 'application/json' });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = `grading-session-${new Date().toISOString().split('T')[0]}.json`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n    }, [sharedRubric, sharedCourseDetails, gradingFormData, classList, currentStudent, drafts, finalGrades, customLatePolicies, currentLatePolicy]);\r\n\r\n    const importSession = useCallback((sessionData) => {\r\n        try {\r\n            const data = typeof sessionData === 'string' ? JSON.parse(sessionData) : sessionData;\r\n\r\n            if (data.rubric) setSharedRubric(data.rubric);\r\n            if (data.courseDetails) setSharedCourseDetails(data.courseDetails);\r\n            if (data.gradingData) setGradingFormData(data.gradingData);\r\n            if (data.classList) setClassList(data.classList);\r\n            if (data.currentStudent) setCurrentStudent(data.currentStudent);\r\n            if (data.drafts) setDrafts(data.drafts);\r\n            if (data.finalGrades) setFinalGrades(data.finalGrades);\r\n\r\n            // Import late policy data if available\r\n            if (data.customLatePolicies) setCustomLatePolicies(data.customLatePolicies);\r\n            if (data.currentLatePolicy) setCurrentLatePolicy(data.currentLatePolicy);\r\n\r\n            console.log('âœ… Session imported successfully with late policy data');\r\n        } catch (error) {\r\n            console.error(\"Failed to import session:\", error);\r\n            alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\r\n        }\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n        clearAIPromptFormData();\r\n        clearAssignmentPromptFormData();\r\n        setDrafts({});\r\n        setFinalGrades({});\r\n        setCustomLatePolicies([]);\r\n        setCurrentLatePolicy(DEFAULT_LATE_POLICY);\r\n\r\n        // Also clear localStorage\r\n        try {\r\n            localStorage.removeItem('gradingDrafts');\r\n            localStorage.removeItem('finalGrades');\r\n            localStorage.removeItem('customLatePolicies');\r\n            localStorage.removeItem('currentLatePolicy');\r\n        } catch (error) {\r\n            console.error('Failed to clear localStorage:', error);\r\n        }\r\n    }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\r\n\r\n    // Context value with ALL functions\r\n    const value = {\r\n        // Shared state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n\r\n        // Navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // AI Prompt Generator (for rubrics)\r\n        aiPromptFormData,\r\n        updateAIPromptFormData,\r\n        initializeAIPromptFormData,\r\n        clearAIPromptFormData,\r\n\r\n        // Assignment Prompt Generator\r\n        assignmentPromptFormData,\r\n        updateAssignmentPromptFormData,\r\n        initializeAssignmentPromptFormData,\r\n        clearAssignmentPromptFormData,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        clearGradingFormData,\r\n        persistentFormData: gradingFormData,\r\n        updatePersistentFormData: setGradingFormData,\r\n\r\n        // Form update functions\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicyInfo,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Draft and Final Grade Management\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Class management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Late Policy Management\r\n        currentLatePolicy,\r\n        setCurrentLatePolicy,\r\n        customLatePolicies,\r\n        setCustomLatePolicies,\r\n        loadLatePoliciesFromStorage,\r\n        saveCustomLatePolicy,\r\n        updateCustomLatePolicy,\r\n        deleteCustomLatePolicy,\r\n        applyLatePolicy,\r\n        calculateScoreWithLatePolicy,\r\n\r\n        // Utility functions\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Session management\r\n        exportSession,\r\n        importSession\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AssessmentProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}