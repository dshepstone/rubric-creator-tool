{"ast":null,"code":"import * as XLSX from 'xlsx';\nexport const parseExcelFile = async file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n\n        // Get first worksheet\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Convert to JSON\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        const students = parseStudentData(jsonData);\n        resolve(students);\n      } catch (error) {\n        reject(new Error(`Excel parsing failed: ${error.message}`));\n      }\n    };\n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsArrayBuffer(file);\n  });\n};\nconst parseStudentData = data => {\n  if (data.length < 2) {\n    throw new Error('Excel file must contain header row and at least one student');\n  }\n  const headers = data[0].map(h => (h === null || h === void 0 ? void 0 : h.toString().toLowerCase().trim()) || '');\n  const students = [];\n\n  // Flexible column detection\n  const findColumn = patterns => {\n    for (const pattern of patterns) {\n      const index = headers.findIndex(h => h.includes(pattern));\n      if (index !== -1) return index;\n    }\n    return -1;\n  };\n  const idCol = findColumn(['id', 'student_id', 'studentid', 'number']);\n  const nameCol = findColumn(['name', 'student_name', 'studentname', 'full name']);\n  const emailCol = findColumn(['email', 'student_email', 'studentemail', 'e-mail']);\n\n  // Parse student rows\n  for (let i = 1; i < data.length; i++) {\n    var _row$idCol, _row$nameCol, _row$emailCol;\n    const row = data[i];\n    if (!row || row.every(cell => !cell)) continue;\n    const student = {\n      id: idCol !== -1 ? (_row$idCol = row[idCol]) === null || _row$idCol === void 0 ? void 0 : _row$idCol.toString().trim() : `student-${i}`,\n      name: nameCol !== -1 ? (_row$nameCol = row[nameCol]) === null || _row$nameCol === void 0 ? void 0 : _row$nameCol.toString().trim() : 'Unknown Student',\n      email: emailCol !== -1 ? ((_row$emailCol = row[emailCol]) === null || _row$emailCol === void 0 ? void 0 : _row$emailCol.toString().trim()) || '' : '',\n      program: '',\n      level: '',\n      status: 'Enrolled'\n    };\n    if (student.id && student.name) {\n      students.push(student);\n    }\n  }\n  return students;\n};","map":{"version":3,"names":["XLSX","parseExcelFile","file","Promise","resolve","reject","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","students","parseStudentData","error","Error","message","onerror","readAsArrayBuffer","length","headers","map","h","toString","toLowerCase","trim","findColumn","patterns","pattern","index","findIndex","includes","idCol","nameCol","emailCol","i","_row$idCol","_row$nameCol","_row$emailCol","row","every","cell","student","id","name","email","program","level","status","push"],"sources":["C:/local clones/rubric-creation-app/src/utils/excelParser.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\n\r\nexport const parseExcelFile = async (file) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            try {\r\n                const data = new Uint8Array(e.target.result);\r\n                const workbook = XLSX.read(data, { type: 'array' });\r\n\r\n                // Get first worksheet\r\n                const sheetName = workbook.SheetNames[0];\r\n                const worksheet = workbook.Sheets[sheetName];\r\n\r\n                // Convert to JSON\r\n                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n\r\n                const students = parseStudentData(jsonData);\r\n                resolve(students);\r\n            } catch (error) {\r\n                reject(new Error(`Excel parsing failed: ${error.message}`));\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => reject(new Error('Failed to read file'));\r\n        reader.readAsArrayBuffer(file);\r\n    });\r\n};\r\n\r\nconst parseStudentData = (data) => {\r\n    if (data.length < 2) {\r\n        throw new Error('Excel file must contain header row and at least one student');\r\n    }\r\n\r\n    const headers = data[0].map(h => h?.toString().toLowerCase().trim() || '');\r\n    const students = [];\r\n\r\n    // Flexible column detection\r\n    const findColumn = (patterns) => {\r\n        for (const pattern of patterns) {\r\n            const index = headers.findIndex(h => h.includes(pattern));\r\n            if (index !== -1) return index;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    const idCol = findColumn(['id', 'student_id', 'studentid', 'number']);\r\n    const nameCol = findColumn(['name', 'student_name', 'studentname', 'full name']);\r\n    const emailCol = findColumn(['email', 'student_email', 'studentemail', 'e-mail']);\r\n\r\n    // Parse student rows\r\n    for (let i = 1; i < data.length; i++) {\r\n        const row = data[i];\r\n        if (!row || row.every(cell => !cell)) continue;\r\n\r\n        const student = {\r\n            id: idCol !== -1 ? row[idCol]?.toString().trim() : `student-${i}`,\r\n            name: nameCol !== -1 ? row[nameCol]?.toString().trim() : 'Unknown Student',\r\n            email: emailCol !== -1 ? (row[emailCol]?.toString().trim() || '') : '',\r\n            program: '',\r\n            level: '',\r\n            status: 'Enrolled'\r\n        };\r\n\r\n        if (student.id && student.name) {\r\n            students.push(student);\r\n        }\r\n    }\r\n\r\n    return students;\r\n};"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAE5B,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC1C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACnB,IAAI;QACA,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,CAAC,CAACG,MAAM,CAACC,MAAM,CAAC;QAC5C,MAAMC,QAAQ,GAAGd,IAAI,CAACe,IAAI,CAACL,IAAI,EAAE;UAAEM,IAAI,EAAE;QAAQ,CAAC,CAAC;;QAEnD;QACA,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;QACxC,MAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;;QAE5C;QACA,MAAMI,QAAQ,GAAGrB,IAAI,CAACsB,KAAK,CAACC,aAAa,CAACJ,SAAS,EAAE;UAAEK,MAAM,EAAE;QAAE,CAAC,CAAC;QAEnE,MAAMC,QAAQ,GAAGC,gBAAgB,CAACL,QAAQ,CAAC;QAC3CjB,OAAO,CAACqB,QAAQ,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZtB,MAAM,CAAC,IAAIuB,KAAK,CAAC,yBAAyBD,KAAK,CAACE,OAAO,EAAE,CAAC,CAAC;MAC/D;IACJ,CAAC;IAEDvB,MAAM,CAACwB,OAAO,GAAG,MAAMzB,MAAM,CAAC,IAAIuB,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC/DtB,MAAM,CAACyB,iBAAiB,CAAC7B,IAAI,CAAC;EAClC,CAAC,CAAC;AACN,CAAC;AAED,MAAMwB,gBAAgB,GAAIhB,IAAI,IAAK;EAC/B,IAAIA,IAAI,CAACsB,MAAM,GAAG,CAAC,EAAE;IACjB,MAAM,IAAIJ,KAAK,CAAC,6DAA6D,CAAC;EAClF;EAEA,MAAMK,OAAO,GAAGvB,IAAI,CAAC,CAAC,CAAC,CAACwB,GAAG,CAACC,CAAC,IAAI,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,KAAI,EAAE,CAAC;EAC1E,MAAMb,QAAQ,GAAG,EAAE;;EAEnB;EACA,MAAMc,UAAU,GAAIC,QAAQ,IAAK;IAC7B,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC5B,MAAME,KAAK,GAAGT,OAAO,CAACU,SAAS,CAACR,CAAC,IAAIA,CAAC,CAACS,QAAQ,CAACH,OAAO,CAAC,CAAC;MACzD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE,OAAOA,KAAK;IAClC;IACA,OAAO,CAAC,CAAC;EACb,CAAC;EAED,MAAMG,KAAK,GAAGN,UAAU,CAAC,CAAC,IAAI,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;EACrE,MAAMO,OAAO,GAAGP,UAAU,CAAC,CAAC,MAAM,EAAE,cAAc,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;EAChF,MAAMQ,QAAQ,GAAGR,UAAU,CAAC,CAAC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;;EAEjF;EACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtC,IAAI,CAACsB,MAAM,EAAEgB,CAAC,EAAE,EAAE;IAAA,IAAAC,UAAA,EAAAC,YAAA,EAAAC,aAAA;IAClC,MAAMC,GAAG,GAAG1C,IAAI,CAACsC,CAAC,CAAC;IACnB,IAAI,CAACI,GAAG,IAAIA,GAAG,CAACC,KAAK,CAACC,IAAI,IAAI,CAACA,IAAI,CAAC,EAAE;IAEtC,MAAMC,OAAO,GAAG;MACZC,EAAE,EAAEX,KAAK,KAAK,CAAC,CAAC,IAAAI,UAAA,GAAGG,GAAG,CAACP,KAAK,CAAC,cAAAI,UAAA,uBAAVA,UAAA,CAAYb,QAAQ,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,GAAG,WAAWU,CAAC,EAAE;MACjES,IAAI,EAAEX,OAAO,KAAK,CAAC,CAAC,IAAAI,YAAA,GAAGE,GAAG,CAACN,OAAO,CAAC,cAAAI,YAAA,uBAAZA,YAAA,CAAcd,QAAQ,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,GAAG,iBAAiB;MAC1EoB,KAAK,EAAEX,QAAQ,KAAK,CAAC,CAAC,GAAI,EAAAI,aAAA,GAAAC,GAAG,CAACL,QAAQ,CAAC,cAAAI,aAAA,uBAAbA,aAAA,CAAef,QAAQ,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,KAAI,EAAE,GAAI,EAAE;MACtEqB,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE;IACZ,CAAC;IAED,IAAIN,OAAO,CAACC,EAAE,IAAID,OAAO,CAACE,IAAI,EAAE;MAC5BhC,QAAQ,CAACqC,IAAI,CAACP,OAAO,CAAC;IAC1B;EACJ;EAEA,OAAO9B,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}