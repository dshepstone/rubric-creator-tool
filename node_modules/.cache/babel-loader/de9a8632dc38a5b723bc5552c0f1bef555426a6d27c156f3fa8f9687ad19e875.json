{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n\n  // Shared course-details state (for your GradingTemplate's setSharedCourseDetails)\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n\n  // Active tab state\n  const [activeTab, setActiveTab] = useState('rubric-creator');\n\n  // ─── Persist imported class-list across tabs ───────────────────────\n  const [classList, setClassList] = useState(null);\n\n  // ─── Which student is being graded right now ──────────────────────\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ─── In-progress grading drafts, keyed by student ID ─────────────\n  const [drafts, setDrafts] = useState({});\n\n  // ─── Separate storage for final (submitted) grades ─────────────────\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // ─── Batch grading session state ───────────────────────────────────\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Comprehensive persistent form data for grading tool\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // ---- ALIAS for backward-compatibility ----\n  const gradingData = gradingFormData;\n\n  // Rubric form data state\n  const [rubricFormData, setRubricFormData] = useState({\n    assignmentInfo: {\n      title: '',\n      description: '',\n      weight: 25,\n      passingThreshold: 60,\n      totalPoints: 100\n    },\n    rubricLevels: [{\n      level: 'incomplete',\n      name: 'Incomplete',\n      description: 'No submission or unusable',\n      color: '#95a5a6',\n      multiplier: 0\n    }, {\n      level: 'unacceptable',\n      name: 'Unacceptable',\n      description: 'Below minimum standards',\n      color: '#e74c3c',\n      multiplier: 0.3\n    }, {\n      level: 'developing',\n      name: 'Developing',\n      description: 'Approaching standards',\n      color: '#f39c12',\n      multiplier: 0.55\n    }, {\n      level: 'acceptable',\n      name: 'Acceptable (PASS)',\n      description: 'Meets minimum standards',\n      color: '#27ae60',\n      multiplier: 0.7\n    }, {\n      level: 'emerging',\n      name: 'Emerging',\n      description: 'Above standard expectations',\n      color: '#2980b9',\n      multiplier: 0.82\n    }, {\n      level: 'accomplished',\n      name: 'Accomplished',\n      description: 'Strong professional quality',\n      color: '#16a085',\n      multiplier: 0.92\n    }, {\n      level: 'exceptional',\n      name: 'Exceptional',\n      description: 'Outstanding professional quality',\n      color: '#8e44ad',\n      multiplier: 1.0\n    }],\n    criteria: [{\n      id: 'criterion-1',\n      name: '',\n      description: '',\n      maxPoints: 20,\n      weight: 20,\n      levels: {},\n      feedbackLibrary: {\n        strengths: [],\n        improvements: [],\n        general: []\n      }\n    }],\n    pointingSystem: 'multiplier',\n    reversedOrder: false,\n    expandedFeedback: {},\n    modalEdit: {\n      show: false,\n      content: '',\n      field: null,\n      onSave: null\n    }\n  });\n\n  // ─── Draft save/load ───────────────────────────────────────────────\n  function saveDraft(studentId, data) {\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: data\n    }));\n  }\n  function loadDraft(studentId) {\n    return drafts[studentId] || null;\n  }\n\n  // ─── Final save/load ───────────────────────────────────────────────\n  function saveFinalGrade(studentId, data) {\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: data\n    }));\n    setDrafts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[studentId];\n      return updated;\n    });\n  }\n  function loadFinalGrade(studentId) {\n    return finalGrades[studentId] || null;\n  }\n\n  // ─── Helper to ask \"what's this student's status?\" ─────────────\n  // returns 'final' if in finalGrades, 'draft' if in drafts, else 'not_started'\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n\n  // Helper to check if a student has a saved draft\n  const hasDraft = useCallback(studentId => {\n    return studentId && drafts[studentId] != null;\n  }, [drafts]);\n\n  // Update functions for grading form data\n  const updateStudentInfo = useCallback(student => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...student\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(course => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...course\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignment => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignment\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback(feedback => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        ...feedback\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicy = useCallback(latePolicy => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy\n    }));\n  }, []);\n  const updateRubricGrading = useCallback(rubricGrading => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading\n    }));\n  }, []);\n  const updateMetadata = useCallback(metadata => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        ...metadata\n      }\n    }));\n  }, []);\n\n  // Update functions for rubric form data\n  const updateRubricFormData = useCallback(updates => {\n    setRubricFormData(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const updateRubricAssignmentInfo = useCallback(assignmentInfo => {\n    setRubricFormData(prev => ({\n      ...prev,\n      assignmentInfo: {\n        ...prev.assignmentInfo,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateRubricCriteria = useCallback(criteria => {\n    setRubricFormData(prev => ({\n      ...prev,\n      criteria\n    }));\n  }, []);\n  const updateRubricLevels = useCallback(rubricLevels => {\n    setRubricFormData(prev => ({\n      ...prev,\n      rubricLevels\n    }));\n  }, []);\n  const updateRubricSettings = useCallback(settings => {\n    setRubricFormData(prev => ({\n      ...prev,\n      ...settings\n    }));\n  }, []);\n\n  // Clear functions\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      assignmentInfo: {\n        title: '',\n        description: '',\n        weight: 25,\n        passingThreshold: 60,\n        totalPoints: 100\n      },\n      rubricLevels: [{\n        level: 'incomplete',\n        name: 'Incomplete',\n        description: 'No submission or unusable',\n        color: '#95a5a6',\n        multiplier: 0\n      }, {\n        level: 'unacceptable',\n        name: 'Unacceptable',\n        description: 'Below minimum standards',\n        color: '#e74c3c',\n        multiplier: 0.3\n      }, {\n        level: 'developing',\n        name: 'Developing',\n        description: 'Approaching standards',\n        color: '#f39c12',\n        multiplier: 0.55\n      }, {\n        level: 'acceptable',\n        name: 'Acceptable (PASS)',\n        description: 'Meets minimum standards',\n        color: '#27ae60',\n        multiplier: 0.7\n      }, {\n        level: 'emerging',\n        name: 'Emerging',\n        description: 'Above standard expectations',\n        color: '#2980b9',\n        multiplier: 0.82\n      }, {\n        level: 'accomplished',\n        name: 'Accomplished',\n        description: 'Strong professional quality',\n        color: '#16a085',\n        multiplier: 0.92\n      }, {\n        level: 'exceptional',\n        name: 'Exceptional',\n        description: 'Outstanding professional quality',\n        color: '#8e44ad',\n        multiplier: 1.0\n      }],\n      criteria: [{\n        id: 'criterion-1',\n        name: '',\n        description: '',\n        maxPoints: 20,\n        weight: 20,\n        levels: {},\n        feedbackLibrary: {\n          strengths: [],\n          improvements: [],\n          general: []\n        }\n      }],\n      pointingSystem: 'multiplier',\n      reversedOrder: false,\n      expandedFeedback: {},\n      modalEdit: {\n        show: false,\n        content: '',\n        field: null,\n        onSave: null\n      }\n    });\n  }, []);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    clearGradingFormData();\n    clearRubricFormData();\n  }, [clearGradingFormData, clearRubricFormData]);\n\n  // Initialize grading session with first student\n  const initializeGradingSession = useCallback(classListData => {\n    if (!classListData || !classListData.students.length) {\n      return false;\n    }\n    const firstStudent = classListData.students[0];\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: classListData.students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // Load first student into grading form\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: firstStudent.name,\n        id: firstStudent.id,\n        email: firstStudent.email\n      }\n    }));\n\n    // Auto-populate course from Excel import\n    if (classListData.courseMetadata) {\n      updateCourseInfo({\n        code: classListData.courseMetadata.courseCode || '',\n        name: classListData.courseMetadata.courseName || '',\n        instructor: classListData.courseMetadata.professors || '',\n        term: classListData.courseMetadata.term || ''\n      });\n    }\n\n    // Auto-populate assignment from loaded rubric\n    if (sharedRubric !== null && sharedRubric !== void 0 && sharedRubric.assignmentInfo) {\n      updateAssignmentInfo({\n        name: sharedRubric.assignmentInfo.title || '',\n        maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\n      });\n    }\n    return true;\n  }, [setGradingSession, setCurrentStudent, setGradingFormData, updateCourseInfo, updateAssignmentInfo, sharedRubric]);\n\n  // Navigate to next student in grading session\n  const nextStudentInSession = useCallback((gradeType = 'draft') => {\n    if (!gradingSession.active || !classList || gradingSession.currentStudentIndex >= classList.students.length - 1) {\n      return false;\n    }\n    const currentIdx = gradingSession.currentStudentIndex;\n    const currentStudent = classList.students[currentIdx];\n\n    // Mark their progress entry\n    setClassList(prev => {\n      const updated = [...prev.gradingProgress];\n      updated[currentIdx] = {\n        ...updated[currentIdx],\n        status: gradeType === 'final' ? 'completed_final' : 'completed_draft',\n        gradeType,\n        lastModified: new Date().toISOString()\n      };\n      return {\n        ...prev,\n        gradingProgress: updated\n      };\n    });\n\n    // Save draft or final grade\n    if (gradeType === 'final') {\n      saveFinalGrade(currentStudent.id, gradingData);\n    } else {\n      saveDraft(currentStudent.id, gradingData);\n    }\n\n    // Advance index\n    const nextIndex = currentIdx + 1;\n    const nextStudent = classList.students[nextIndex];\n\n    // Update session object\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: nextIndex,\n      currentStudent: nextStudent,\n      gradedStudents: [...prev.gradedStudents, currentStudent.id]\n    }));\n\n    // Update \"current student\" convenience state\n    setCurrentStudent(nextStudent);\n\n    // Prime the grading form for the new student\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: nextStudent.name,\n        id: nextStudent.id,\n        email: nextStudent.email\n      }\n    }));\n    return true;\n  }, [gradingSession, classList, gradingData, saveDraft, saveFinalGrade, setClassList, setGradingSession, setCurrentStudent, setGradingFormData]);\n\n  // Navigate to previous student in grading session\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || gradingSession.currentStudentIndex <= 0) {\n      return false;\n    }\n    const prevIndex = gradingSession.currentStudentIndex - 1;\n    const prevStudent = classList.students[prevIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: prevIndex,\n      currentStudent: prevStudent\n    }));\n    setCurrentStudent(prevStudent);\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: prevStudent.name,\n        id: prevStudent.id,\n        email: prevStudent.email\n      }\n    }));\n    return true;\n  }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\n\n  // Jump to specific student in session\n  const jumpToStudentInSession = useCallback(index => {\n    if (!classList || index < 0 || index >= classList.students.length) {\n      return false;\n    }\n    const student = classList.students[index];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: index,\n      currentStudent: student\n    }));\n    setCurrentStudent(student);\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: student.name,\n        id: student.id,\n        email: student.email\n      }\n    }));\n    return true;\n  }, [classList, setGradingSession, setCurrentStudent, setGradingFormData]);\n\n  // Update grading session\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n\n  // Rubric management functions\n  const transferRubricToGrading = useCallback(() => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n  const transferRubricToGradingWithDetails = useCallback(details => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setSharedCourseDetails(details);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n\n  // Legacy compatibility - map persistent form data\n  const persistentFormData = gradingFormData;\n  const updatePersistentFormData = setGradingFormData;\n  const value = {\n    // Shared state\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    // Navigation\n    activeTab,\n    setActiveTab,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingFormData,\n    setGradingData: setGradingFormData,\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicy,\n    updateRubricGrading,\n    updateMetadata,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    updateRubricFormData,\n    updateRubricAssignmentInfo,\n    updateRubricCriteria,\n    updateRubricLevels,\n    updateRubricSettings,\n    // Actions – rubric management\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    // Actions – clear functions\n    clearGradingFormData,\n    clearRubricFormData,\n    clearAllData,\n    // Class & grading flow\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Draft & final helpers - UPDATED WITH MISSING FUNCTIONS\n    drafts,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    // ✅ ADDED - was missing\n    finalGrades,\n    // ✅ ADDED - was missing\n    getGradeStatus,\n    hasDraft,\n    // Session navigation\n    nextStudentInSession,\n    previousStudentInSession,\n    jumpToStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Expose grading session\n    gradingSession,\n    setGradingSession,\n    // Legacy compatibility\n    persistentFormData,\n    updatePersistentFormData\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 618,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"8dsJWHTw8w82d/lM4q7vJoQrG28=\");\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","gradingData","rubricFormData","setRubricFormData","assignmentInfo","title","description","weight","passingThreshold","totalPoints","rubricLevels","color","multiplier","criteria","levels","feedbackLibrary","pointingSystem","reversedOrder","expandedFeedback","modalEdit","show","content","field","onSave","saveDraft","studentId","data","prev","loadDraft","saveFinalGrade","updated","loadFinalGrade","getGradeStatus","hasDraft","updateStudentInfo","updateCourseInfo","updateAssignmentInfo","updateFeedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicy","updateRubricGrading","updateMetadata","updateRubricFormData","updates","updateRubricAssignmentInfo","updateRubricCriteria","updateRubricLevels","updateRubricSettings","settings","clearSharedRubric","clearGradingFormData","clearRubricFormData","clearAllData","initializeGradingSession","classListData","students","length","firstStudent","session","Date","toISOString","courseMetadata","courseCode","courseName","professors","nextStudentInSession","gradeType","currentIdx","gradingProgress","status","lastModified","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","jumpToStudentInSession","index","updateGradingSession","transferRubricToGrading","transferRubricToGradingWithDetails","details","persistentFormData","updatePersistentFormData","value","setGradingData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n\r\n    // Shared course-details state (for your GradingTemplate's setSharedCourseDetails)\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n\r\n    // Active tab state\r\n    const [activeTab, setActiveTab] = useState('rubric-creator');\r\n\r\n    // ─── Persist imported class-list across tabs ───────────────────────\r\n    const [classList, setClassList] = useState(null);\r\n\r\n    // ─── Which student is being graded right now ──────────────────────\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ─── In-progress grading drafts, keyed by student ID ─────────────\r\n    const [drafts, setDrafts] = useState({});\r\n\r\n    // ─── Separate storage for final (submitted) grades ─────────────────\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // ─── Batch grading session state ───────────────────────────────────\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Comprehensive persistent form data for grading tool\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // ---- ALIAS for backward-compatibility ----\r\n    const gradingData = gradingFormData;\r\n\r\n    // Rubric form data state\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        assignmentInfo: {\r\n            title: '',\r\n            description: '',\r\n            weight: 25,\r\n            passingThreshold: 60,\r\n            totalPoints: 100\r\n        },\r\n        rubricLevels: [\r\n            { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n            { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n            { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n            { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n            { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n            { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n            { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n        ],\r\n        criteria: [\r\n            {\r\n                id: 'criterion-1',\r\n                name: '',\r\n                description: '',\r\n                maxPoints: 20,\r\n                weight: 20,\r\n                levels: {},\r\n                feedbackLibrary: {\r\n                    strengths: [],\r\n                    improvements: [],\r\n                    general: []\r\n                }\r\n            }\r\n        ],\r\n        pointingSystem: 'multiplier',\r\n        reversedOrder: false,\r\n        expandedFeedback: {},\r\n        modalEdit: { show: false, content: '', field: null, onSave: null }\r\n    });\r\n\r\n    // ─── Draft save/load ───────────────────────────────────────────────\r\n    function saveDraft(studentId, data) {\r\n        setDrafts(prev => ({ ...prev, [studentId]: data }));\r\n    }\r\n\r\n    function loadDraft(studentId) {\r\n        return drafts[studentId] || null;\r\n    }\r\n\r\n    // ─── Final save/load ───────────────────────────────────────────────\r\n    function saveFinalGrade(studentId, data) {\r\n        setFinalGrades(prev => ({ ...prev, [studentId]: data }));\r\n        setDrafts(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[studentId];\r\n            return updated;\r\n        });\r\n    }\r\n\r\n    function loadFinalGrade(studentId) {\r\n        return finalGrades[studentId] || null;\r\n    }\r\n\r\n    // ─── Helper to ask \"what's this student's status?\" ─────────────\r\n    // returns 'final' if in finalGrades, 'draft' if in drafts, else 'not_started'\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    // Helper to check if a student has a saved draft\r\n    const hasDraft = useCallback((studentId) => {\r\n        return studentId && drafts[studentId] != null;\r\n    }, [drafts]);\r\n\r\n    // Update functions for grading form data\r\n    const updateStudentInfo = useCallback((student) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                ...prev.student,\r\n                ...student\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((course) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: {\r\n                ...prev.course,\r\n                ...course\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignment) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: {\r\n                ...prev.assignment,\r\n                ...assignment\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((feedback) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: {\r\n                ...prev.feedback,\r\n                ...feedback\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicy = useCallback((latePolicy) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((rubricGrading) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((metadata) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: {\r\n                ...prev.metadata,\r\n                ...metadata\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    // Update functions for rubric form data\r\n    const updateRubricFormData = useCallback((updates) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            assignmentInfo: {\r\n                ...prev.assignmentInfo,\r\n                ...assignmentInfo\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricCriteria = useCallback((criteria) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            criteria\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricLevels = useCallback((rubricLevels) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            rubricLevels\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricSettings = useCallback((settings) => {\r\n        setRubricFormData(prev => ({\r\n            ...prev,\r\n            ...settings\r\n        }));\r\n    }, []);\r\n\r\n    // Clear functions\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            assignmentInfo: {\r\n                title: '',\r\n                description: '',\r\n                weight: 25,\r\n                passingThreshold: 60,\r\n                totalPoints: 100\r\n            },\r\n            rubricLevels: [\r\n                { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n                { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n                { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n                { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n                { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n                { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n                { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n            ],\r\n            criteria: [\r\n                {\r\n                    id: 'criterion-1',\r\n                    name: '',\r\n                    description: '',\r\n                    maxPoints: 20,\r\n                    weight: 20,\r\n                    levels: {},\r\n                    feedbackLibrary: {\r\n                        strengths: [],\r\n                        improvements: [],\r\n                        general: []\r\n                    }\r\n                }\r\n            ],\r\n            pointingSystem: 'multiplier',\r\n            reversedOrder: false,\r\n            expandedFeedback: {},\r\n            modalEdit: { show: false, content: '', field: null, onSave: null }\r\n        });\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n    }, [clearGradingFormData, clearRubricFormData]);\r\n\r\n    // Initialize grading session with first student\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        if (!classListData || !classListData.students.length) {\r\n            return false;\r\n        }\r\n\r\n        const firstStudent = classListData.students[0];\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: classListData.students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // Load first student into grading form\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            }\r\n        }));\r\n\r\n        // Auto-populate course from Excel import\r\n        if (classListData.courseMetadata) {\r\n            updateCourseInfo({\r\n                code: classListData.courseMetadata.courseCode || '',\r\n                name: classListData.courseMetadata.courseName || '',\r\n                instructor: classListData.courseMetadata.professors || '',\r\n                term: classListData.courseMetadata.term || ''\r\n            });\r\n        }\r\n\r\n        // Auto-populate assignment from loaded rubric\r\n        if (sharedRubric?.assignmentInfo) {\r\n            updateAssignmentInfo({\r\n                name: sharedRubric.assignmentInfo.title || '',\r\n                maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\r\n            });\r\n        }\r\n\r\n        return true;\r\n    }, [\r\n        setGradingSession,\r\n        setCurrentStudent,\r\n        setGradingFormData,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        sharedRubric\r\n    ]);\r\n\r\n    // Navigate to next student in grading session\r\n    const nextStudentInSession = useCallback((gradeType = 'draft') => {\r\n        if (\r\n            !gradingSession.active ||\r\n            !classList ||\r\n            gradingSession.currentStudentIndex >= classList.students.length - 1\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        const currentIdx = gradingSession.currentStudentIndex;\r\n        const currentStudent = classList.students[currentIdx];\r\n\r\n        // Mark their progress entry\r\n        setClassList(prev => {\r\n            const updated = [...prev.gradingProgress];\r\n            updated[currentIdx] = {\r\n                ...updated[currentIdx],\r\n                status: gradeType === 'final' ? 'completed_final' : 'completed_draft',\r\n                gradeType,\r\n                lastModified: new Date().toISOString()\r\n            };\r\n            return { ...prev, gradingProgress: updated };\r\n        });\r\n\r\n        // Save draft or final grade\r\n        if (gradeType === 'final') {\r\n            saveFinalGrade(currentStudent.id, gradingData);\r\n        } else {\r\n            saveDraft(currentStudent.id, gradingData);\r\n        }\r\n\r\n        // Advance index\r\n        const nextIndex = currentIdx + 1;\r\n        const nextStudent = classList.students[nextIndex];\r\n\r\n        // Update session object\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: nextIndex,\r\n            currentStudent: nextStudent,\r\n            gradedStudents: [...prev.gradedStudents, currentStudent.id]\r\n        }));\r\n\r\n        // Update \"current student\" convenience state\r\n        setCurrentStudent(nextStudent);\r\n\r\n        // Prime the grading form for the new student\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: nextStudent.name,\r\n                id: nextStudent.id,\r\n                email: nextStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [\r\n        gradingSession,\r\n        classList,\r\n        gradingData,\r\n        saveDraft,\r\n        saveFinalGrade,\r\n        setClassList,\r\n        setGradingSession,\r\n        setCurrentStudent,\r\n        setGradingFormData\r\n    ]);\r\n\r\n    // Navigate to previous student in grading session\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || gradingSession.currentStudentIndex <= 0) {\r\n            return false;\r\n        }\r\n\r\n        const prevIndex = gradingSession.currentStudentIndex - 1;\r\n        const prevStudent = classList.students[prevIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: prevIndex,\r\n            currentStudent: prevStudent\r\n        }));\r\n\r\n        setCurrentStudent(prevStudent);\r\n\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: prevStudent.name,\r\n                id: prevStudent.id,\r\n                email: prevStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [gradingSession, classList, setGradingSession, setCurrentStudent, setGradingFormData]);\r\n\r\n    // Jump to specific student in session\r\n    const jumpToStudentInSession = useCallback((index) => {\r\n        if (!classList || index < 0 || index >= classList.students.length) {\r\n            return false;\r\n        }\r\n\r\n        const student = classList.students[index];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: index,\r\n            currentStudent: student\r\n        }));\r\n\r\n        setCurrentStudent(student);\r\n\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: student.name,\r\n                id: student.id,\r\n                email: student.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [classList, setGradingSession, setCurrentStudent, setGradingFormData]);\r\n\r\n    // Update grading session\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    // Rubric management functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((details) => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setSharedCourseDetails(details);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    // Legacy compatibility - map persistent form data\r\n    const persistentFormData = gradingFormData;\r\n    const updatePersistentFormData = setGradingFormData;\r\n\r\n    const value = {\r\n        // Shared state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n\r\n        // Navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicy,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n        updateRubricFormData,\r\n        updateRubricAssignmentInfo,\r\n        updateRubricCriteria,\r\n        updateRubricLevels,\r\n        updateRubricSettings,\r\n\r\n        // Actions – rubric management\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n\r\n        // Actions – clear functions\r\n        clearGradingFormData,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Class & grading flow\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Draft & final helpers - UPDATED WITH MISSING FUNCTIONS\r\n        drafts,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,  // ✅ ADDED - was missing\r\n        finalGrades,     // ✅ ADDED - was missing\r\n        getGradeStatus,\r\n        hasDraft,\r\n\r\n        // Session navigation\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        jumpToStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Expose grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n\r\n        // Legacy compatibility\r\n        persistentFormData,\r\n        updatePersistentFormData,\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}