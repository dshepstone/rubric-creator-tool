{"ast":null,"code":"// utils/excelParser.js\nimport * as XLSX from 'xlsx';\n\n/**\r\n * Parse Excel file and extract students + metadata\r\n */\nexport const parseExcelFile = async file => {\n  try {\n    const buf = await file.arrayBuffer();\n    const wb = XLSX.read(buf, {\n      type: 'array'\n    });\n    const ws = wb.Sheets[wb.SheetNames[0]];\n    const raw = XLSX.utils.sheet_to_json(ws, {\n      header: 1,\n      defval: '',\n      blankrows: false\n    });\n\n    // 1️⃣ Find the real “Component | ID | Name…” header row\n    const tableInfo = findStudentDataTable(raw);\n    if (!tableInfo.found) throw new Error('Couldn’t locate the student table header.');\n\n    // 2️⃣ Slice out just the student rows\n    const headers = raw[tableInfo.headerRow];\n    const rows = raw.slice(tableInfo.dataStartRow, tableInfo.dataEndRow + 1);\n    const students = parseStudentData(headers, rows);\n\n    // 3️⃣ Pull in all the extra course-level info\n    const courseMetadata = extractCourseMetadata(raw, students);\n    return {\n      success: true,\n      students,\n      courseMetadata,\n      totalRows: raw.length,\n      dataRows: rows.length,\n      headers,\n      tableInfo,\n      message: `Parsed ${students.length} students from ${rows.length} rows.`\n    };\n  } catch (err) {\n    console.error(err);\n    return {\n      success: false,\n      error: err.message,\n      students: []\n    };\n  }\n};\n\n/**\r\n * Validate student array (no changes here)\r\n */\nexport const validateStudentData = students => {\n  const validation = {\n    totalStudents: students.length,\n    validStudents: 0,\n    issues: [],\n    completeness: {\n      withId: 0,\n      withName: 0,\n      withEmail: 0,\n      withProgram: 0,\n      withLevel: 0,\n      withCampus: 0,\n      withStatus: 0\n    },\n    duplicateIds: [],\n    invalidEmails: [],\n    missingRequired: [],\n    validationScore: 0\n  };\n  const seen = new Set();\n  students.forEach((s, i) => {\n    let ok = true;\n    // ID\n    if (!s.id) {\n      validation.issues.push(`Row ${i + 1}: Missing ID`);\n      ok = false;\n    } else {\n      validation.completeness.withId++;\n      if (seen.has(s.id)) {\n        validation.duplicateIds.push(s.id);\n        validation.issues.push(`Row ${i + 1}: Duplicate ID ${s.id}`);\n        ok = false;\n      }\n      seen.add(s.id);\n    }\n    // Name\n    if (!s.name) {\n      validation.issues.push(`Row ${i + 1}: Missing Name`);\n      ok = false;\n    } else {\n      validation.completeness.withName++;\n    }\n    // Email (optional)\n    if (s.email) {\n      validation.completeness.withEmail++;\n      const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!re.test(s.email)) {\n        validation.invalidEmails.push(s.email);\n        validation.issues.push(`Row ${i + 1}: Bad Email ${s.email}`);\n      }\n    }\n    // Program, Level, Campus, Status\n    if (s.program) validation.completeness.withProgram++;\n    if (s.level) validation.completeness.withLevel++;\n    if (s.campus) validation.completeness.withCampus++;\n    if (s.status) validation.completeness.withStatus++;\n    if (ok) validation.validStudents++;\n  });\n  validation.validationScore = students.length ? Math.round(validation.validStudents / students.length * 100) : 0;\n  return validation;\n};\n\n/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/\n/*                            Internal helpers                             */\n/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/\n\n// 1) Locate the header row by looking for at least 4 of our known column names\nconst findStudentDataTable = data => {\n  const isHeader = r => {\n    const txt = r.join(' ').toLowerCase();\n    return ['component', 'id', 'name', 'email', 'program', 'level', 'campus', 'status'].filter(t => txt.includes(t)).length >= 4;\n  };\n  for (let i = 0; i < data.length; i++) {\n    if (isHeader(data[i])) {\n      const start = i + 1;\n      const end = findDataEndRow(data, start);\n      return {\n        found: true,\n        headerRow: i,\n        dataStartRow: start,\n        dataEndRow: end\n      };\n    }\n  }\n  return {\n    found: false\n  };\n};\n\n// 2) Walk forward until a row has <3 non-blank cells\nconst findDataEndRow = (data, start) => {\n  let last = start;\n  for (let i = start; i < data.length; i++) {\n    const nonBlank = data[i].filter(c => String(c).trim() !== '').length;\n    if (nonBlank < 3) break;\n    last = i;\n  }\n  return last;\n};\n\n// 3) Map headers → student props\nconst parseStudentData = (hdrs, rows) => {\n  const idx = {};\n  hdrs.forEach((h, i) => {\n    const t = String(h).toLowerCase();\n    if (t.includes('component')) idx.component = i;\n    if (t.includes('id')) idx.id = i;\n    if (t.includes('name')) idx.name = i;\n    if (t.includes('email')) idx.email = i;\n    if (t.includes('program')) idx.program = i;\n    if (t.includes('level')) idx.level = i;\n    if (t.includes('campus')) idx.campus = i;\n    if (t.includes('status')) idx.status = i;\n  });\n  return rows.map(r => ({\n    component: String(r[idx.component] || '').trim(),\n    id: String(r[idx.id] || '').trim(),\n    name: String(r[idx.name] || '').trim(),\n    email: String(r[idx.email] || '').trim(),\n    program: String(r[idx.program] || '').trim(),\n    level: String(r[idx.level] || '').trim(),\n    campus: String(r[idx.campus] || '').trim(),\n    status: String(r[idx.status] || '').trim()\n  })).filter(s => s.id && s.name);\n};\n\n// 4) Extract **all** header-card fields\n// COMPLETE extractCourseMetadata function with instructor field mapping fix\nconst extractCourseMetadata = (raw, students) => {\n  const md = {\n    courseCode: '',\n    courseName: '',\n    section: '',\n    campus: '',\n    professors: '',\n    // Keep original field\n    instructor: '',\n    // ADD: New standardized field for compatibility\n    term: '',\n    hours: '',\n    gradeScale: '',\n    department: '',\n    totalStudents: students.length\n  };\n  const nextNonEmpty = (row, i) => {\n    for (let j = i + 1; j < row.length; j++) {\n      if (String(row[j]).trim() !== '') return String(row[j]).trim();\n    }\n    return '';\n  };\n  for (let i = 0; i < Math.min(raw.length, 15); i++) {\n    const row = raw[i].map(c => String(c).trim());\n    const line = row.join(' ');\n\n    // — Term —\n    const tm = line.match(/\\b(Fall|Winter|Spring|Summer)\\s+(\\d{4})\\b/);\n    if (tm) md.term = `${tm[1]} ${tm[2]}`;\n\n    // — Code / Name / Section / Campus —\n    // row[0] like \"DSGN8060 - Animation Methodologies II (100)  Section 1 - Doon\"\n    if (!md.courseCode && row[0].match(/^([A-Z0-9]+)\\s*[-–]/)) {\n      const parts = row[0].split(/[-–]/).map(p => p.trim());\n      md.courseCode = parts[0];\n      // rebuild the rest without parentheses\n      let rest = parts.slice(1).join(' - ').replace(/\\(.*?\\)/g, '').trim();\n\n      // Section\n      const S = rest.match(/Section\\s+(\\w+)/i);\n      if (S) md.section = `Section ${S[1]}`;\n\n      // Campus = last part\n      if (parts.length >= 3) {\n        md.campus = `${parts[parts.length - 1].trim()} Campus`;\n      }\n\n      // Course name = text before \"Section\"\n      md.courseName = rest.split(/Section/i)[0].trim();\n    }\n\n    // — Professors — ENHANCED: Map to both fields\n    const pi = row.findIndex(c => /Professors?:/i.test(c));\n    if (pi > -1) {\n      const professorValue = nextNonEmpty(row, pi);\n      md.professors = professorValue; // Keep original field\n      md.instructor = professorValue; // ADD: Map to standardized field for compatibility\n    }\n\n    // — Hours —\n    const hi = row.findIndex(c => /Hours:/i.test(c));\n    if (hi > -1) {\n      md.hours = nextNonEmpty(row, hi);\n    }\n\n    // — Grade Scale —\n    const gi = row.findIndex(c => /Grade Scale:/i.test(c));\n    if (gi > -1) {\n      md.gradeScale = nextNonEmpty(row, gi);\n    }\n\n    // — Department (Delivery Dept:) —\n    const di = row.findIndex(c => /(Delivery\\s+)?Dept:/i.test(c));\n    if (di > -1) {\n      md.department = nextNonEmpty(row, di);\n    }\n  }\n  return md;\n};","map":{"version":3,"names":["XLSX","parseExcelFile","file","buf","arrayBuffer","wb","read","type","ws","Sheets","SheetNames","raw","utils","sheet_to_json","header","defval","blankrows","tableInfo","findStudentDataTable","found","Error","headers","headerRow","rows","slice","dataStartRow","dataEndRow","students","parseStudentData","courseMetadata","extractCourseMetadata","success","totalRows","length","dataRows","message","err","console","error","validateStudentData","validation","totalStudents","validStudents","issues","completeness","withId","withName","withEmail","withProgram","withLevel","withCampus","withStatus","duplicateIds","invalidEmails","missingRequired","validationScore","seen","Set","forEach","s","i","ok","id","push","has","add","name","email","re","test","program","level","campus","status","Math","round","data","isHeader","r","txt","join","toLowerCase","filter","t","includes","start","end","findDataEndRow","last","nonBlank","c","String","trim","hdrs","idx","h","component","map","md","courseCode","courseName","section","professors","instructor","term","hours","gradeScale","department","nextNonEmpty","row","j","min","line","tm","match","parts","split","p","rest","replace","S","pi","findIndex","professorValue","hi","gi","di"],"sources":["C:/local clones/rubric-creation-app/src/utils/excelParser.js"],"sourcesContent":["// utils/excelParser.js\r\nimport * as XLSX from 'xlsx';\r\n\r\n/**\r\n * Parse Excel file and extract students + metadata\r\n */\r\nexport const parseExcelFile = async (file) => {\r\n    try {\r\n        const buf = await file.arrayBuffer();\r\n        const wb = XLSX.read(buf, { type: 'array' });\r\n        const ws = wb.Sheets[wb.SheetNames[0]];\r\n        const raw = XLSX.utils.sheet_to_json(ws, { header: 1, defval: '', blankrows: false });\r\n\r\n        // 1️⃣ Find the real “Component | ID | Name…” header row\r\n        const tableInfo = findStudentDataTable(raw);\r\n        if (!tableInfo.found) throw new Error('Couldn’t locate the student table header.');\r\n\r\n        // 2️⃣ Slice out just the student rows\r\n        const headers = raw[tableInfo.headerRow];\r\n        const rows = raw.slice(tableInfo.dataStartRow, tableInfo.dataEndRow + 1);\r\n        const students = parseStudentData(headers, rows);\r\n\r\n        // 3️⃣ Pull in all the extra course-level info\r\n        const courseMetadata = extractCourseMetadata(raw, students);\r\n\r\n        return {\r\n            success: true,\r\n            students,\r\n            courseMetadata,\r\n            totalRows: raw.length,\r\n            dataRows: rows.length,\r\n            headers,\r\n            tableInfo,\r\n            message: `Parsed ${students.length} students from ${rows.length} rows.`\r\n        };\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return {\r\n            success: false,\r\n            error: err.message,\r\n            students: []\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Validate student array (no changes here)\r\n */\r\nexport const validateStudentData = (students) => {\r\n    const validation = {\r\n        totalStudents: students.length,\r\n        validStudents: 0,\r\n        issues: [],\r\n        completeness: { withId: 0, withName: 0, withEmail: 0, withProgram: 0, withLevel: 0, withCampus: 0, withStatus: 0 },\r\n        duplicateIds: [],\r\n        invalidEmails: [],\r\n        missingRequired: [],\r\n        validationScore: 0\r\n    };\r\n    const seen = new Set();\r\n\r\n    students.forEach((s, i) => {\r\n        let ok = true;\r\n        // ID\r\n        if (!s.id) {\r\n            validation.issues.push(`Row ${i + 1}: Missing ID`); ok = false;\r\n        } else {\r\n            validation.completeness.withId++;\r\n            if (seen.has(s.id)) {\r\n                validation.duplicateIds.push(s.id);\r\n                validation.issues.push(`Row ${i + 1}: Duplicate ID ${s.id}`);\r\n                ok = false;\r\n            }\r\n            seen.add(s.id);\r\n        }\r\n        // Name\r\n        if (!s.name) {\r\n            validation.issues.push(`Row ${i + 1}: Missing Name`); ok = false;\r\n        } else {\r\n            validation.completeness.withName++;\r\n        }\r\n        // Email (optional)\r\n        if (s.email) {\r\n            validation.completeness.withEmail++;\r\n            const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!re.test(s.email)) {\r\n                validation.invalidEmails.push(s.email);\r\n                validation.issues.push(`Row ${i + 1}: Bad Email ${s.email}`);\r\n            }\r\n        }\r\n        // Program, Level, Campus, Status\r\n        if (s.program) validation.completeness.withProgram++;\r\n        if (s.level) validation.completeness.withLevel++;\r\n        if (s.campus) validation.completeness.withCampus++;\r\n        if (s.status) validation.completeness.withStatus++;\r\n\r\n        if (ok) validation.validStudents++;\r\n    });\r\n\r\n    validation.validationScore = students.length\r\n        ? Math.round((validation.validStudents / students.length) * 100)\r\n        : 0;\r\n\r\n    return validation;\r\n};\r\n\r\n\r\n/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/\r\n/*                            Internal helpers                             */\r\n/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/\r\n\r\n// 1) Locate the header row by looking for at least 4 of our known column names\r\nconst findStudentDataTable = (data) => {\r\n    const isHeader = (r) => {\r\n        const txt = r.join(' ').toLowerCase();\r\n        return ['component', 'id', 'name', 'email', 'program', 'level', 'campus', 'status']\r\n            .filter(t => txt.includes(t)).length >= 4;\r\n    };\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (isHeader(data[i])) {\r\n            const start = i + 1;\r\n            const end = findDataEndRow(data, start);\r\n            return { found: true, headerRow: i, dataStartRow: start, dataEndRow: end };\r\n        }\r\n    }\r\n    return { found: false };\r\n};\r\n\r\n// 2) Walk forward until a row has <3 non-blank cells\r\nconst findDataEndRow = (data, start) => {\r\n    let last = start;\r\n    for (let i = start; i < data.length; i++) {\r\n        const nonBlank = data[i].filter(c => String(c).trim() !== '').length;\r\n        if (nonBlank < 3) break;\r\n        last = i;\r\n    }\r\n    return last;\r\n};\r\n\r\n// 3) Map headers → student props\r\nconst parseStudentData = (hdrs, rows) => {\r\n    const idx = {};\r\n    hdrs.forEach((h, i) => {\r\n        const t = String(h).toLowerCase();\r\n        if (t.includes('component')) idx.component = i;\r\n        if (t.includes('id')) idx.id = i;\r\n        if (t.includes('name')) idx.name = i;\r\n        if (t.includes('email')) idx.email = i;\r\n        if (t.includes('program')) idx.program = i;\r\n        if (t.includes('level')) idx.level = i;\r\n        if (t.includes('campus')) idx.campus = i;\r\n        if (t.includes('status')) idx.status = i;\r\n    });\r\n\r\n    return rows\r\n        .map(r => ({\r\n            component: String(r[idx.component] || '').trim(),\r\n            id: String(r[idx.id] || '').trim(),\r\n            name: String(r[idx.name] || '').trim(),\r\n            email: String(r[idx.email] || '').trim(),\r\n            program: String(r[idx.program] || '').trim(),\r\n            level: String(r[idx.level] || '').trim(),\r\n            campus: String(r[idx.campus] || '').trim(),\r\n            status: String(r[idx.status] || '').trim(),\r\n        }))\r\n        .filter(s => s.id && s.name);\r\n};\r\n\r\n// 4) Extract **all** header-card fields\r\n// COMPLETE extractCourseMetadata function with instructor field mapping fix\r\nconst extractCourseMetadata = (raw, students) => {\r\n    const md = {\r\n        courseCode: '',\r\n        courseName: '',\r\n        section: '',\r\n        campus: '',\r\n        professors: '',  // Keep original field\r\n        instructor: '',  // ADD: New standardized field for compatibility\r\n        term: '',\r\n        hours: '',\r\n        gradeScale: '',\r\n        department: '',\r\n        totalStudents: students.length\r\n    };\r\n\r\n    const nextNonEmpty = (row, i) => {\r\n        for (let j = i + 1; j < row.length; j++) {\r\n            if (String(row[j]).trim() !== '') return String(row[j]).trim();\r\n        }\r\n        return '';\r\n    };\r\n\r\n    for (let i = 0; i < Math.min(raw.length, 15); i++) {\r\n        const row = raw[i].map(c => String(c).trim());\r\n        const line = row.join(' ');\r\n\r\n        // — Term —\r\n        const tm = line.match(/\\b(Fall|Winter|Spring|Summer)\\s+(\\d{4})\\b/);\r\n        if (tm) md.term = `${tm[1]} ${tm[2]}`;\r\n\r\n        // — Code / Name / Section / Campus —\r\n        // row[0] like \"DSGN8060 - Animation Methodologies II (100)  Section 1 - Doon\"\r\n        if (!md.courseCode && row[0].match(/^([A-Z0-9]+)\\s*[-–]/)) {\r\n            const parts = row[0].split(/[-–]/).map(p => p.trim());\r\n            md.courseCode = parts[0];\r\n            // rebuild the rest without parentheses\r\n            let rest = parts.slice(1).join(' - ').replace(/\\(.*?\\)/g, '').trim();\r\n\r\n            // Section\r\n            const S = rest.match(/Section\\s+(\\w+)/i);\r\n            if (S) md.section = `Section ${S[1]}`;\r\n\r\n            // Campus = last part\r\n            if (parts.length >= 3) {\r\n                md.campus = `${parts[parts.length - 1].trim()} Campus`;\r\n            }\r\n\r\n            // Course name = text before \"Section\"\r\n            md.courseName = rest.split(/Section/i)[0].trim();\r\n        }\r\n\r\n        // — Professors — ENHANCED: Map to both fields\r\n        const pi = row.findIndex(c => /Professors?:/i.test(c));\r\n        if (pi > -1) {\r\n            const professorValue = nextNonEmpty(row, pi);\r\n            md.professors = professorValue;  // Keep original field\r\n            md.instructor = professorValue;  // ADD: Map to standardized field for compatibility\r\n        }\r\n\r\n        // — Hours —\r\n        const hi = row.findIndex(c => /Hours:/i.test(c));\r\n        if (hi > -1) {\r\n            md.hours = nextNonEmpty(row, hi);\r\n        }\r\n\r\n        // — Grade Scale —\r\n        const gi = row.findIndex(c => /Grade Scale:/i.test(c));\r\n        if (gi > -1) {\r\n            md.gradeScale = nextNonEmpty(row, gi);\r\n        }\r\n\r\n        // — Department (Delivery Dept:) —\r\n        const di = row.findIndex(c => /(Delivery\\s+)?Dept:/i.test(c));\r\n        if (di > -1) {\r\n            md.department = nextNonEmpty(row, di);\r\n        }\r\n    }\r\n\r\n    return md;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}