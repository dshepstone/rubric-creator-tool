{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\n// TanStack Query v5 hooks for Grading Policy Manager\n// File: src/hooks/useGradingPolicies.js\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport gradingPolicyService from '../services/gradingPolicyService';\n\n// Query keys\nexport const gradingPolicyKeys = {\n  all: ['gradingPolicies'],\n  lists: () => [...gradingPolicyKeys.all, 'list'],\n  list: filters => [...gradingPolicyKeys.lists(), {\n    filters\n  }],\n  details: () => [...gradingPolicyKeys.all, 'detail'],\n  detail: id => [...gradingPolicyKeys.details(), id],\n  byProgram: programType => [...gradingPolicyKeys.all, 'byProgram', programType]\n};\n\n// Hook to get all policies\nexport const useGradingPolicies = (params = {}) => {\n  _s();\n  return useQuery({\n    queryKey: gradingPolicyKeys.list(params),\n    queryFn: () => gradingPolicyService.getPolicies(params),\n    select: data => data.success ? data.data : []\n  });\n};\n\n// Hook to get policy for specific program type\n_s(useGradingPolicies, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useGradingPolicyForProgram = programType => {\n  _s2();\n  return useQuery({\n    queryKey: gradingPolicyKeys.byProgram(programType),\n    queryFn: () => gradingPolicyService.getPolicyForProgram(programType),\n    enabled: !!programType,\n    select: data => data.success ? data.data : null\n  });\n};\n\n// Hook for grade calculation\n_s2(useGradingPolicyForProgram, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useGradeCalculation = () => {\n  _s3();\n  return useMutation({\n    mutationFn: ({\n      percentage,\n      policyId,\n      programType,\n      customProgramId\n    }) => gradingPolicyService.calculateGrade(percentage, policyId, programType, customProgramId)\n  });\n};\n\n// Hook for policy validation\n_s3(useGradeCalculation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const usePolicyValidation = () => {\n  _s4();\n  return useMutation({\n    mutationFn: policyData => gradingPolicyService.validatePolicy(policyData)\n  });\n};\n\n// Custom hook for managing policy state in components\n_s4(usePolicyValidation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useGradingPolicyManager = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  const invalidatePolicies = () => {\n    queryClient.invalidateQueries({\n      queryKey: gradingPolicyKeys.all\n    });\n  };\n  const prefetchPolicyForProgram = programType => {\n    queryClient.prefetchQuery({\n      queryKey: gradingPolicyKeys.byProgram(programType),\n      queryFn: () => gradingPolicyService.getPolicyForProgram(programType),\n      staleTime: 1000 * 60 * 10 // 10 minutes\n    });\n  };\n  return {\n    invalidatePolicies,\n    prefetchPolicyForProgram\n  };\n};\n_s5(useGradingPolicyManager, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","gradingPolicyService","gradingPolicyKeys","all","lists","list","filters","details","detail","id","byProgram","programType","useGradingPolicies","params","_s","queryKey","queryFn","getPolicies","select","data","success","useGradingPolicyForProgram","_s2","getPolicyForProgram","enabled","useGradeCalculation","_s3","mutationFn","percentage","policyId","customProgramId","calculateGrade","usePolicyValidation","_s4","policyData","validatePolicy","useGradingPolicyManager","_s5","queryClient","invalidatePolicies","invalidateQueries","prefetchPolicyForProgram","prefetchQuery","staleTime"],"sources":["C:/local clones/rubric-creation-app/src/hooks/useGradingPolicies.js"],"sourcesContent":["// TanStack Query v5 hooks for Grading Policy Manager\r\n// File: src/hooks/useGradingPolicies.js\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport gradingPolicyService from '../services/gradingPolicyService';\r\n\r\n// Query keys\r\nexport const gradingPolicyKeys = {\r\n    all: ['gradingPolicies'],\r\n    lists: () => [...gradingPolicyKeys.all, 'list'],\r\n    list: (filters) => [...gradingPolicyKeys.lists(), { filters }],\r\n    details: () => [...gradingPolicyKeys.all, 'detail'],\r\n    detail: (id) => [...gradingPolicyKeys.details(), id],\r\n    byProgram: (programType) => [...gradingPolicyKeys.all, 'byProgram', programType],\r\n};\r\n\r\n// Hook to get all policies\r\nexport const useGradingPolicies = (params = {}) => {\r\n    return useQuery({\r\n        queryKey: gradingPolicyKeys.list(params),\r\n        queryFn: () => gradingPolicyService.getPolicies(params),\r\n        select: (data) => data.success ? data.data : [],\r\n    });\r\n};\r\n\r\n// Hook to get policy for specific program type\r\nexport const useGradingPolicyForProgram = (programType) => {\r\n    return useQuery({\r\n        queryKey: gradingPolicyKeys.byProgram(programType),\r\n        queryFn: () => gradingPolicyService.getPolicyForProgram(programType),\r\n        enabled: !!programType,\r\n        select: (data) => data.success ? data.data : null,\r\n    });\r\n};\r\n\r\n// Hook for grade calculation\r\nexport const useGradeCalculation = () => {\r\n    return useMutation({\r\n        mutationFn: ({ percentage, policyId, programType, customProgramId }) =>\r\n            gradingPolicyService.calculateGrade(percentage, policyId, programType, customProgramId),\r\n    });\r\n};\r\n\r\n// Hook for policy validation\r\nexport const usePolicyValidation = () => {\r\n    return useMutation({\r\n        mutationFn: (policyData) => gradingPolicyService.validatePolicy(policyData),\r\n    });\r\n};\r\n\r\n// Custom hook for managing policy state in components\r\nexport const useGradingPolicyManager = () => {\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidatePolicies = () => {\r\n        queryClient.invalidateQueries({ queryKey: gradingPolicyKeys.all });\r\n    };\r\n\r\n    const prefetchPolicyForProgram = (programType) => {\r\n        queryClient.prefetchQuery({\r\n            queryKey: gradingPolicyKeys.byProgram(programType),\r\n            queryFn: () => gradingPolicyService.getPolicyForProgram(programType),\r\n            staleTime: 1000 * 60 * 10, // 10 minutes\r\n        });\r\n    };\r\n\r\n    return {\r\n        invalidatePolicies,\r\n        prefetchPolicyForProgram,\r\n    };\r\n};"],"mappings":";;;;;AAAA;AACA;;AAEA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,OAAOC,oBAAoB,MAAM,kCAAkC;;AAEnE;AACA,OAAO,MAAMC,iBAAiB,GAAG;EAC7BC,GAAG,EAAE,CAAC,iBAAiB,CAAC;EACxBC,KAAK,EAAEA,CAAA,KAAM,CAAC,GAAGF,iBAAiB,CAACC,GAAG,EAAE,MAAM,CAAC;EAC/CE,IAAI,EAAGC,OAAO,IAAK,CAAC,GAAGJ,iBAAiB,CAACE,KAAK,CAAC,CAAC,EAAE;IAAEE;EAAQ,CAAC,CAAC;EAC9DC,OAAO,EAAEA,CAAA,KAAM,CAAC,GAAGL,iBAAiB,CAACC,GAAG,EAAE,QAAQ,CAAC;EACnDK,MAAM,EAAGC,EAAE,IAAK,CAAC,GAAGP,iBAAiB,CAACK,OAAO,CAAC,CAAC,EAAEE,EAAE,CAAC;EACpDC,SAAS,EAAGC,WAAW,IAAK,CAAC,GAAGT,iBAAiB,CAACC,GAAG,EAAE,WAAW,EAAEQ,WAAW;AACnF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EAC/C,OAAOhB,QAAQ,CAAC;IACZiB,QAAQ,EAAEb,iBAAiB,CAACG,IAAI,CAACQ,MAAM,CAAC;IACxCG,OAAO,EAAEA,CAAA,KAAMf,oBAAoB,CAACgB,WAAW,CAACJ,MAAM,CAAC;IACvDK,MAAM,EAAGC,IAAI,IAAKA,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACA,IAAI,GAAG;EACjD,CAAC,CAAC;AACN,CAAC;;AAED;AAAAL,EAAA,CARaF,kBAAkB;EAAA,QACpBd,QAAQ;AAAA;AAQnB,OAAO,MAAMuB,0BAA0B,GAAIV,WAAW,IAAK;EAAAW,GAAA;EACvD,OAAOxB,QAAQ,CAAC;IACZiB,QAAQ,EAAEb,iBAAiB,CAACQ,SAAS,CAACC,WAAW,CAAC;IAClDK,OAAO,EAAEA,CAAA,KAAMf,oBAAoB,CAACsB,mBAAmB,CAACZ,WAAW,CAAC;IACpEa,OAAO,EAAE,CAAC,CAACb,WAAW;IACtBO,MAAM,EAAGC,IAAI,IAAKA,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACA,IAAI,GAAG;EACjD,CAAC,CAAC;AACN,CAAC;;AAED;AAAAG,GAAA,CATaD,0BAA0B;EAAA,QAC5BvB,QAAQ;AAAA;AASnB,OAAO,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrC,OAAO3B,WAAW,CAAC;IACf4B,UAAU,EAAEA,CAAC;MAAEC,UAAU;MAAEC,QAAQ;MAAElB,WAAW;MAAEmB;IAAgB,CAAC,KAC/D7B,oBAAoB,CAAC8B,cAAc,CAACH,UAAU,EAAEC,QAAQ,EAAElB,WAAW,EAAEmB,eAAe;EAC9F,CAAC,CAAC;AACN,CAAC;;AAED;AAAAJ,GAAA,CAPaD,mBAAmB;EAAA,QACrB1B,WAAW;AAAA;AAOtB,OAAO,MAAMiC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrC,OAAOlC,WAAW,CAAC;IACf4B,UAAU,EAAGO,UAAU,IAAKjC,oBAAoB,CAACkC,cAAc,CAACD,UAAU;EAC9E,CAAC,CAAC;AACN,CAAC;;AAED;AAAAD,GAAA,CANaD,mBAAmB;EAAA,QACrBjC,WAAW;AAAA;AAMtB,OAAO,MAAMqC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzC,MAAMC,WAAW,GAAGtC,cAAc,CAAC,CAAC;EAEpC,MAAMuC,kBAAkB,GAAGA,CAAA,KAAM;IAC7BD,WAAW,CAACE,iBAAiB,CAAC;MAAEzB,QAAQ,EAAEb,iBAAiB,CAACC;IAAI,CAAC,CAAC;EACtE,CAAC;EAED,MAAMsC,wBAAwB,GAAI9B,WAAW,IAAK;IAC9C2B,WAAW,CAACI,aAAa,CAAC;MACtB3B,QAAQ,EAAEb,iBAAiB,CAACQ,SAAS,CAACC,WAAW,CAAC;MAClDK,OAAO,EAAEA,CAAA,KAAMf,oBAAoB,CAACsB,mBAAmB,CAACZ,WAAW,CAAC;MACpEgC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAE;IAC/B,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IACHJ,kBAAkB;IAClBE;EACJ,CAAC;AACL,CAAC;AAACJ,GAAA,CAnBWD,uBAAuB;EAAA,QACZpC,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}