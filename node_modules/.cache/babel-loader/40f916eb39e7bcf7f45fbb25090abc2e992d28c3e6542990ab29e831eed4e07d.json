{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// SharedContext.js - Enhanced Privacy-Focused Session Management\n// Preserves ALL existing functionality while implementing 1-hour session timeout\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\n\n// Session configuration constants\nconst SESSION_TIMEOUT_MS = 60 * 60 * 1000; // 1 hour in milliseconds\nconst SESSION_WARNING_MS = 55 * 60 * 1000; // 55 minutes - warning time\nconst SESSION_KEY = 'gradingSession';\n\n// Default late policy\nexport const DEFAULT_LATE_POLICY = {\n  id: 'default',\n  name: 'Standard Late Policy',\n  type: 'percentage',\n  penaltyRate: 10,\n  gracePeriod: 0,\n  maxPenalty: 100,\n  levels: {\n    none: {\n      label: 'On Time',\n      multiplier: 1.0,\n      description: 'No penalty applied'\n    },\n    light: {\n      label: 'Lightly Late',\n      multiplier: 0.95,\n      description: '5% penalty'\n    },\n    moderate: {\n      label: 'Moderately Late',\n      multiplier: 0.85,\n      description: '15% penalty'\n    },\n    heavy: {\n      label: 'Heavily Late',\n      multiplier: 0.70,\n      description: '30% penalty'\n    },\n    severe: {\n      label: 'Severely Late',\n      multiplier: 0.50,\n      description: '50% penalty'\n    }\n  }\n};\n\n// Privacy-compliant session manager\nclass SessionManager {\n  constructor() {\n    this.sessionTimer = null;\n    this.warningTimer = null;\n    this.onSessionExpired = null;\n    this.onSessionWarning = null;\n  }\n  startSession() {\n    const sessionStart = Date.now();\n    const sessionData = {\n      startTime: sessionStart,\n      expiryTime: sessionStart + SESSION_TIMEOUT_MS,\n      isActive: true\n    };\n\n    // Store session metadata only (no user data)\n    try {\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionData));\n      console.log('‚úÖ New session started, expires in 1 hour');\n    } catch (error) {\n      console.error('Failed to start session:', error);\n    }\n    this.setTimers();\n    return sessionData;\n  }\n  setTimers() {\n    // Clear existing timers\n    this.clearTimers();\n\n    // Set warning timer (55 minutes)\n    this.warningTimer = setTimeout(() => {\n      this.triggerWarning();\n    }, SESSION_WARNING_MS);\n\n    // Set expiry timer (60 minutes)\n    this.sessionTimer = setTimeout(() => {\n      this.expireSession();\n    }, SESSION_TIMEOUT_MS);\n  }\n  triggerWarning() {\n    console.warn('‚ö†Ô∏è Session expires in 5 minutes');\n    if (this.onSessionWarning) {\n      this.onSessionWarning();\n    }\n  }\n  expireSession() {\n    console.log('üïê Session expired - clearing all data');\n    this.clearAllSessionData();\n    if (this.onSessionExpired) {\n      this.onSessionExpired();\n    }\n  }\n  clearTimers() {\n    if (this.warningTimer) {\n      clearTimeout(this.warningTimer);\n      this.warningTimer = null;\n    }\n    if (this.sessionTimer) {\n      clearTimeout(this.sessionTimer);\n      this.sessionTimer = null;\n    }\n  }\n  isSessionValid() {\n    try {\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      const session = JSON.parse(sessionData);\n      const now = Date.now();\n      return session.isActive && now < session.expiryTime;\n    } catch (error) {\n      console.error('Session validation error:', error);\n      return false;\n    }\n  }\n  clearAllSessionData() {\n    // Clear session storage\n    try {\n      sessionStorage.clear();\n    } catch (error) {\n      console.error('Failed to clear session storage:', error);\n    }\n\n    // Clear localStorage (legacy data) - PRIVACY REQUIREMENT\n    try {\n      localStorage.removeItem('gradingDrafts');\n      localStorage.removeItem('finalGrades');\n      localStorage.removeItem('customLatePolicies');\n      localStorage.removeItem('currentLatePolicy');\n      localStorage.removeItem('activeGradeBook');\n      localStorage.removeItem('activeClassList');\n      console.log('‚úÖ All persistent data cleared for privacy');\n    } catch (error) {\n      console.error('Failed to clear localStorage:', error);\n    }\n    this.clearTimers();\n  }\n  extendSession() {\n    if (this.isSessionValid()) {\n      this.startSession(); // Restart session with new timer\n      return true;\n    }\n    return false;\n  }\n  getTimeRemaining() {\n    try {\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return 0;\n      const session = JSON.parse(sessionData);\n      const now = Date.now();\n      const remaining = session.expiryTime - now;\n      return Math.max(0, remaining);\n    } catch (error) {\n      console.error('Error getting time remaining:', error);\n      return 0;\n    }\n  }\n}\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s();\n  // Session management\n  const [sessionManager] = useState(() => new SessionManager());\n  const [sessionActive, setSessionActive] = useState(false);\n  const [showSessionWarning, setShowSessionWarning] = useState(false);\n\n  // PRESERVED: Navigation state\n  const [activeTab, setActiveTab] = useState('class-manager');\n\n  // PRESERVED: Shared state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n\n  // PRESERVED: Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // PRESERVED: Grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    classListData: null,\n    currentStudentIndex: 0,\n    currentStudent: null,\n    startedAt: null\n  });\n\n  // PRESERVED: Form data states - session-only now\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      semester: '',\n      year: ''\n    },\n    assignment: {\n      title: '',\n      description: '',\n      dueDate: '',\n      totalPoints: 100,\n      maxPoints: 100\n    },\n    rubricGrading: {},\n    feedback: {\n      strengths: '',\n      improvements: '',\n      general: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      version: '1.0',\n      notes: ''\n    },\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false,\n      policyId: null,\n      originalScore: null,\n      adjustedScore: null,\n      multiplier: 1.0\n    }\n  });\n  const [rubricFormData, setRubricFormData] = useState({\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      semester: '',\n      year: ''\n    },\n    assignment: {\n      title: '',\n      description: '',\n      dueDate: '',\n      totalPoints: 100,\n      passingThreshold: 70\n    },\n    criteria: []\n  });\n\n  // PRESERVED: AI form states\n  const [aiPromptFormData, setAIPromptFormData] = useState({\n    assignmentType: '',\n    programType: 'diploma',\n    programLevel: '',\n    subjectArea: '',\n    assignmentDescription: '',\n    totalPoints: '100',\n    weightPercentage: '',\n    numCriteria: '4',\n    criteriaType: 'ai-suggested',\n    userCriteria: '',\n    learningObjectives: '',\n    studentPopulation: '',\n    specialConsiderations: '',\n    institutionType: 'college'\n  });\n  const [assignmentPromptFormData, setAssignmentPromptFormData] = useState({\n    assignmentType: '',\n    topic: '',\n    difficultyLevel: '',\n    learningObjectives: '',\n    deliverables: '',\n    constraints: '',\n    additionalRequirements: ''\n  });\n\n  // PRESERVED: Grade management - session-only, no persistence\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // PRESERVED: Late policy management\n  const [currentLatePolicy, setCurrentLatePolicy] = useState(DEFAULT_LATE_POLICY);\n  const [customLatePolicies, setCustomLatePolicies] = useState([]);\n\n  // PRESERVED: Grade book state - requires manual import\n  const [gradeBook, setGradeBook] = useState(null);\n\n  // Initialize session on mount - PRIVACY FEATURE\n  useEffect(() => {\n    // Clear all data on startup - privacy requirement\n    sessionManager.clearAllSessionData();\n\n    // Start new session\n    sessionManager.startSession();\n    setSessionActive(true);\n\n    // Set up session event handlers\n    sessionManager.onSessionWarning = () => {\n      setShowSessionWarning(true);\n    };\n    sessionManager.onSessionExpired = () => {\n      // Clear all application state\n      clearAllData();\n      setSessionActive(false);\n      setShowSessionWarning(false);\n      alert('Session expired after 1 hour. All data has been cleared for privacy.');\n    };\n\n    // Check for existing session validity\n    if (!sessionManager.isSessionValid()) {\n      sessionManager.startSession();\n    }\n    return () => {\n      sessionManager.clearTimers();\n    };\n  }, []);\n\n  // PRESERVED: AI Prompt form management\n  const initializeAIPromptFormData = useCallback(() => {\n    setAIPromptFormData({\n      assignmentType: '',\n      programType: 'diploma',\n      programLevel: '',\n      subjectArea: '',\n      assignmentDescription: '',\n      totalPoints: '100',\n      weightPercentage: '',\n      numCriteria: '4',\n      criteriaType: 'ai-suggested',\n      userCriteria: '',\n      learningObjectives: '',\n      studentPopulation: '',\n      specialConsiderations: '',\n      institutionType: 'college'\n    });\n  }, []);\n\n  // PRESERVED: Form update functions\n  const updateStudentInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicyInfo = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy: {\n        ...prev.latePolicy,\n        [field]: value\n      }\n    }));\n  }, []);\n  const updateRubricGrading = useCallback((criterionId, data) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading: {\n        ...prev.rubricGrading,\n        [criterionId]: data\n      }\n    }));\n  }, []);\n  const updateMetadata = useCallback((field, value) => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  // PRESERVED: AI Prompt form functions\n  const updateAIPromptFormData = useCallback((field, value) => {\n    setAIPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const clearAIPromptFormData = useCallback(() => {\n    setAIPromptFormData({\n      assignmentType: '',\n      programType: 'diploma',\n      programLevel: '',\n      subjectArea: '',\n      assignmentDescription: '',\n      totalPoints: '100',\n      weightPercentage: '',\n      numCriteria: '4',\n      criteriaType: 'ai-suggested',\n      userCriteria: '',\n      learningObjectives: '',\n      studentPopulation: '',\n      specialConsiderations: '',\n      institutionType: 'college'\n    });\n  }, []);\n\n  // PRESERVED: Assignment Prompt form functions\n  const updateAssignmentPromptFormData = useCallback((field, value) => {\n    setAssignmentPromptFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n  const initializeAssignmentPromptFormData = useCallback(data => {\n    setAssignmentPromptFormData(data);\n  }, []);\n  const clearAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData({\n      assignmentType: '',\n      topic: '',\n      difficultyLevel: '',\n      learningObjectives: '',\n      deliverables: '',\n      constraints: '',\n      additionalRequirements: ''\n    });\n  }, []);\n\n  // MODIFIED: Grade management - session-only, no localStorage persistence\n  const saveDraft = useCallback((studentId, gradeData) => {\n    if (!sessionActive) {\n      console.warn('Cannot save draft - session inactive');\n      return;\n    }\n    const draftData = {\n      ...gradeData,\n      savedAt: new Date().toISOString(),\n      type: 'draft'\n    };\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: draftData\n    }));\n    console.log('‚úÖ Draft saved for student:', studentId, '(session only)');\n  }, [sessionActive]);\n  const loadDraft = useCallback(studentId => {\n    return drafts[studentId] || null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, gradeData) => {\n    if (!sessionActive) {\n      console.warn('Cannot save final grade - session inactive');\n      return;\n    }\n    const finalData = {\n      ...gradeData,\n      finalizedAt: new Date().toISOString(),\n      type: 'final'\n    };\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: finalData\n    }));\n\n    // Remove from drafts when finalized\n    setDrafts(prev => {\n      const newDrafts = {\n        ...prev\n      };\n      delete newDrafts[studentId];\n      return newDrafts;\n    });\n    console.log('‚úÖ Final grade saved for student:', studentId, '(session only)');\n  }, [sessionActive]);\n  const loadFinalGrade = useCallback(studentId => {\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'none';\n  }, [drafts, finalGrades]);\n  const hasDraft = useCallback(studentId => {\n    return getGradeStatus(studentId) === 'draft';\n  }, [getGradeStatus]);\n  const finalizeGrade = useCallback(studentId => {\n    const draft = loadDraft(studentId);\n    if (draft) {\n      saveFinalGrade(studentId, draft);\n      return true;\n    }\n    return false;\n  }, [loadDraft, saveFinalGrade]);\n  const unlockGrade = useCallback(studentId => {\n    const finalGrade = loadFinalGrade(studentId);\n    if (finalGrade) {\n      saveDraft(studentId, {\n        ...finalGrade,\n        type: 'draft'\n      });\n      setFinalGrades(prev => {\n        const newFinals = {\n          ...prev\n        };\n        delete newFinals[studentId];\n        return newFinals;\n      });\n      console.log('‚úÖ Grade unlocked for student:', studentId);\n      return true;\n    }\n    return false;\n  }, [loadFinalGrade, saveDraft]);\n\n  // PRESERVED: Grading session management\n  const initializeGradingSession = useCallback((classListData, rubricData) => {\n    if (!classListData || !classListData.students || classListData.students.length === 0) {\n      console.warn('Cannot initialize grading session: No students found');\n      return false;\n    }\n    const firstStudent = classListData.students[0];\n    setGradingSession({\n      active: true,\n      classListData: classListData,\n      currentStudentIndex: 0,\n      currentStudent: firstStudent,\n      startedAt: new Date().toISOString()\n    });\n    setCurrentStudent(firstStudent);\n\n    // Auto-populate course information from class list\n    if (classListData.courseMetadata) {\n      updateCourseInfo('code', classListData.courseMetadata.courseCode || '');\n      updateCourseInfo('name', classListData.courseMetadata.courseName || '');\n      updateCourseInfo('instructor', classListData.courseMetadata.instructor || classListData.courseMetadata.professors || '');\n    }\n\n    // Auto-populate assignment information from rubric\n    if (rubricData && rubricData.assignmentInfo) {\n      updateAssignmentInfo('title', rubricData.assignmentInfo.title || '');\n      updateAssignmentInfo('description', rubricData.assignmentInfo.description || '');\n      updateAssignmentInfo('totalPoints', rubricData.assignmentInfo.totalPoints || 100);\n      updateAssignmentInfo('maxPoints', rubricData.assignmentInfo.totalPoints || 100);\n    }\n\n    // Auto-populate student information for first student\n    updateStudentInfo('name', firstStudent.name || '');\n    updateStudentInfo('id', firstStudent.id || '');\n    updateStudentInfo('email', firstStudent.email || '');\n    console.log('‚úÖ Grading session initialized:', {\n      totalStudents: classListData.students.length,\n      firstStudent: firstStudent.name,\n      courseInfo: classListData.courseMetadata\n    });\n    return true;\n  }, [updateCourseInfo, updateAssignmentInfo, updateStudentInfo]);\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const nextStudentInSession = useCallback((saveType = null) => {\n    if (!gradingSession.active || !gradingSession.classListData) {\n      console.warn('No active grading session');\n      return false;\n    }\n    const nextIndex = gradingSession.currentStudentIndex + 1;\n    if (nextIndex >= gradingSession.classListData.students.length) {\n      console.log('Reached end of student list');\n      return false;\n    }\n    const nextStudent = gradingSession.classListData.students[nextIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: nextIndex,\n      currentStudent: nextStudent\n    }));\n    setCurrentStudent(nextStudent);\n\n    // Auto-populate student information for next student\n    updateStudentInfo('name', nextStudent.name || '');\n    updateStudentInfo('id', nextStudent.id || '');\n    updateStudentInfo('email', nextStudent.email || '');\n    console.log('‚úÖ Moved to next student:', nextStudent.name);\n    return true;\n  }, [gradingSession, updateStudentInfo]);\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !gradingSession.classListData) {\n      console.warn('No active grading session');\n      return false;\n    }\n    const prevIndex = gradingSession.currentStudentIndex - 1;\n    if (prevIndex < 0) {\n      console.log('Already at first student');\n      return false;\n    }\n    const prevStudent = gradingSession.classListData.students[prevIndex];\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: prevIndex,\n      currentStudent: prevStudent\n    }));\n    setCurrentStudent(prevStudent);\n\n    // Auto-populate student information for previous student\n    updateStudentInfo('name', prevStudent.name || '');\n    updateStudentInfo('id', prevStudent.id || '');\n    updateStudentInfo('email', prevStudent.email || '');\n    console.log('‚úÖ Moved to previous student:', prevStudent.name);\n    return true;\n  }, [gradingSession, updateStudentInfo]);\n\n  // PRESERVED: Late policy management functions\n  const loadLatePoliciesFromStorage = useCallback(() => {\n    // No longer loads from localStorage for privacy - keeps default policies only\n    console.log('Late policies loaded from defaults only (privacy mode)');\n  }, []);\n  const saveCustomLatePolicy = useCallback(policyData => {\n    const newPolicy = {\n      ...policyData,\n      id: `custom-${Date.now()}`,\n      createdAt: new Date().toISOString()\n    };\n    setCustomLatePolicies(prev => [...prev, newPolicy]);\n    console.log('Custom late policy saved (session only)');\n    return newPolicy;\n  }, []);\n  const updateCustomLatePolicy = useCallback((policyId, policyData) => {\n    setCustomLatePolicies(prev => prev.map(policy => policy.id === policyId ? {\n      ...policy,\n      ...policyData,\n      updatedAt: new Date().toISOString()\n    } : policy));\n  }, []);\n  const deleteCustomLatePolicy = useCallback(policyId => {\n    setCustomLatePolicies(prev => prev.filter(policy => policy.id !== policyId));\n  }, []);\n  const applyLatePolicy = useCallback((score, policyLevel) => {\n    const activeLevels = (currentLatePolicy === null || currentLatePolicy === void 0 ? void 0 : currentLatePolicy.levels) || DEFAULT_LATE_POLICY.levels;\n    const policyData = activeLevels[policyLevel] || activeLevels.none;\n    return score * policyData.multiplier;\n  }, [currentLatePolicy]);\n  const calculateScoreWithLatePolicy = useCallback((rawScore, policyLevel) => {\n    return applyLatePolicy(rawScore, policyLevel);\n  }, [applyLatePolicy]);\n\n  // PRESERVED: Utility functions\n  const transferRubricToGrading = useCallback(rubricData => {\n    if (!rubricData) return;\n    setSharedRubric(rubricData);\n    setGradingFormData(prevData => ({\n      ...prevData,\n      course: rubricData.courseInfo || prevData.course,\n      assignment: rubricData.assignmentInfo || prevData.assignment,\n      rubricGrading: {}\n    }));\n  }, []);\n  const transferRubricToGradingWithDetails = useCallback((rubricData, courseDetails) => {\n    if (!rubricData) return;\n    setSharedRubric(rubricData);\n    if (courseDetails) setSharedCourseDetails(courseDetails);\n    setGradingFormData(prevData => ({\n      ...prevData,\n      course: rubricData.courseInfo || prevData.course,\n      assignment: rubricData.assignmentInfo || prevData.assignment,\n      rubricGrading: {}\n    }));\n  }, []);\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        semester: '',\n        year: ''\n      },\n      assignment: {\n        title: '',\n        description: '',\n        dueDate: '',\n        totalPoints: 100,\n        passingThreshold: 70\n      },\n      criteria: []\n    });\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        semester: '',\n        year: ''\n      },\n      assignment: {\n        title: '',\n        description: '',\n        dueDate: '',\n        totalPoints: 100,\n        maxPoints: 100\n      },\n      rubricGrading: {},\n      feedback: {\n        strengths: '',\n        improvements: '',\n        general: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        version: '1.0',\n        notes: ''\n      },\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false,\n        policyId: null,\n        originalScore: null,\n        adjustedScore: null,\n        multiplier: 1.0\n      }\n    });\n  }, []);\n\n  // MODIFIED: Session management functions - privacy enhanced\n  const extendSession = useCallback(() => {\n    if (sessionManager.extendSession()) {\n      setShowSessionWarning(false);\n      alert('Session extended for another hour.');\n    } else {\n      alert('Unable to extend session. Please save your work and restart.');\n    }\n  }, [sessionManager]);\n  const getSessionTimeRemaining = useCallback(() => {\n    return sessionManager.getTimeRemaining();\n  }, [sessionManager]);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    setSharedCourseDetails(null);\n    clearGradingFormData();\n    clearRubricFormData();\n    clearAIPromptFormData();\n    clearAssignmentPromptFormData();\n    setDrafts({});\n    setFinalGrades({});\n    setCustomLatePolicies([]);\n    setCurrentLatePolicy(DEFAULT_LATE_POLICY);\n    setClassList(null);\n    setCurrentStudent(null);\n    setGradingSession({\n      active: false,\n      classListData: null,\n      currentStudentIndex: 0,\n      currentStudent: null,\n      startedAt: null\n    });\n    setGradeBook(null);\n    console.log('‚úÖ All application data cleared for privacy');\n  }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\n  const exportSession = useCallback(() => {\n    const sessionData = {\n      rubric: sharedRubric,\n      courseDetails: sharedCourseDetails,\n      gradingData: gradingFormData,\n      classList: classList,\n      currentStudent: currentStudent,\n      drafts: drafts,\n      finalGrades: finalGrades,\n      customLatePolicies: customLatePolicies,\n      currentLatePolicy: currentLatePolicy,\n      gradeBook: gradeBook,\n      exportedAt: new Date().toISOString(),\n      version: '2.0',\n      sessionExport: true\n    };\n    const blob = new Blob([JSON.stringify(sessionData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `grading-session-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }, [sharedRubric, sharedCourseDetails, gradingFormData, classList, currentStudent, drafts, finalGrades, customLatePolicies, currentLatePolicy, gradeBook]);\n  const importSession = useCallback(sessionData => {\n    try {\n      const data = typeof sessionData === 'string' ? JSON.parse(sessionData) : sessionData;\n      if (data.rubric) setSharedRubric(data.rubric);\n      if (data.courseDetails) setSharedCourseDetails(data.courseDetails);\n      if (data.gradingData) setGradingFormData(data.gradingData);\n      if (data.classList) setClassList(data.classList);\n      if (data.currentStudent) setCurrentStudent(data.currentStudent);\n      if (data.drafts) setDrafts(data.drafts);\n      if (data.finalGrades) setFinalGrades(data.finalGrades);\n      if (data.customLatePolicies) setCustomLatePolicies(data.customLatePolicies);\n      if (data.currentLatePolicy) setCurrentLatePolicy(data.currentLatePolicy);\n      if (data.gradeBook) setGradeBook(data.gradeBook);\n      console.log('‚úÖ Session imported successfully');\n    } catch (error) {\n      console.error(\"Failed to import session:\", error);\n      alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\n    }\n  }, []);\n\n  // Context value with ALL functions preserved\n  const value = {\n    // Session management - PRIVACY FEATURES\n    sessionActive,\n    showSessionWarning,\n    extendSession,\n    getSessionTimeRemaining,\n    clearAllData,\n    // Shared state\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    // Navigation\n    activeTab,\n    setActiveTab,\n    // AI Prompt Generator\n    aiPromptFormData,\n    updateAIPromptFormData,\n    initializeAIPromptFormData,\n    clearAIPromptFormData,\n    // Assignment Prompt Generator\n    assignmentPromptFormData,\n    updateAssignmentPromptFormData,\n    initializeAssignmentPromptFormData,\n    clearAssignmentPromptFormData,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    clearGradingFormData,\n    persistentFormData: gradingFormData,\n    updatePersistentFormData: setGradingFormData,\n    // Form update functions\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicyInfo,\n    updateRubricGrading,\n    updateMetadata,\n    // Draft and Final Grade Management\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Class management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Grading session\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    // Late Policy Management\n    currentLatePolicy,\n    setCurrentLatePolicy,\n    customLatePolicies,\n    setCustomLatePolicies,\n    loadLatePoliciesFromStorage,\n    saveCustomLatePolicy,\n    updateCustomLatePolicy,\n    deleteCustomLatePolicy,\n    applyLatePolicy,\n    calculateScoreWithLatePolicy,\n    // Utility functions\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    clearRubricFormData,\n    // Session management\n    exportSession,\n    importSession,\n    // Grade book\n    gradeBook,\n    setGradeBook\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: [children, showSessionWarning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 max-w-md mx-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-orange-600 mb-2\",\n          children: \"\\u26A0\\uFE0F Session Expiring Soon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-700 mb-4\",\n          children: \"Your session will expire in 5 minutes. All data will be cleared for privacy.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: extendSession,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n            children: \"Extend Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 923,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowSessionWarning(false),\n            className: \"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\",\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 910,\n    columnNumber: 9\n  }, this);\n};\n_s(AssessmentProvider, \"vN7PtRDLWnkC6VosM9nqsoA8xKg=\");\n_c = AssessmentProvider;\nexport const useAssessment = () => {\n  _s2();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within an AssessmentProvider');\n  }\n  return context;\n};\n_s2(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AssessmentContext","SESSION_TIMEOUT_MS","SESSION_WARNING_MS","SESSION_KEY","DEFAULT_LATE_POLICY","id","name","type","penaltyRate","gracePeriod","maxPenalty","levels","none","label","multiplier","description","light","moderate","heavy","severe","SessionManager","constructor","sessionTimer","warningTimer","onSessionExpired","onSessionWarning","startSession","sessionStart","Date","now","sessionData","startTime","expiryTime","isActive","sessionStorage","setItem","JSON","stringify","console","log","error","setTimers","clearTimers","setTimeout","triggerWarning","expireSession","warn","clearAllSessionData","clearTimeout","isSessionValid","getItem","session","parse","clear","localStorage","removeItem","extendSession","getTimeRemaining","remaining","Math","max","AssessmentProvider","children","_s","sessionManager","sessionActive","setSessionActive","showSessionWarning","setShowSessionWarning","activeTab","setActiveTab","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","classList","setClassList","currentStudent","setCurrentStudent","gradingSession","setGradingSession","active","classListData","currentStudentIndex","startedAt","gradingFormData","setGradingFormData","student","email","course","code","instructor","semester","year","assignment","title","dueDate","totalPoints","maxPoints","rubricGrading","feedback","strengths","improvements","general","attachments","videoLinks","metadata","gradedBy","gradedDate","version","notes","latePolicy","level","penaltyApplied","policyId","originalScore","adjustedScore","rubricFormData","setRubricFormData","passingThreshold","criteria","aiPromptFormData","setAIPromptFormData","assignmentType","programType","programLevel","subjectArea","assignmentDescription","weightPercentage","numCriteria","criteriaType","userCriteria","learningObjectives","studentPopulation","specialConsiderations","institutionType","assignmentPromptFormData","setAssignmentPromptFormData","topic","difficultyLevel","deliverables","constraints","additionalRequirements","drafts","setDrafts","finalGrades","setFinalGrades","currentLatePolicy","setCurrentLatePolicy","customLatePolicies","setCustomLatePolicies","gradeBook","setGradeBook","clearAllData","alert","initializeAIPromptFormData","updateStudentInfo","field","value","prev","updateCourseInfo","updateAssignmentInfo","updateFeedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicyInfo","updateRubricGrading","criterionId","data","updateMetadata","updateAIPromptFormData","clearAIPromptFormData","updateAssignmentPromptFormData","initializeAssignmentPromptFormData","clearAssignmentPromptFormData","saveDraft","studentId","gradeData","draftData","savedAt","toISOString","loadDraft","saveFinalGrade","finalData","finalizedAt","newDrafts","loadFinalGrade","getGradeStatus","hasDraft","finalizeGrade","draft","unlockGrade","finalGrade","newFinals","initializeGradingSession","rubricData","students","length","firstStudent","courseMetadata","courseCode","courseName","professors","assignmentInfo","totalStudents","courseInfo","updateGradingSession","updates","nextStudentInSession","saveType","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","loadLatePoliciesFromStorage","saveCustomLatePolicy","policyData","newPolicy","createdAt","updateCustomLatePolicy","map","policy","updatedAt","deleteCustomLatePolicy","filter","applyLatePolicy","score","policyLevel","activeLevels","calculateScoreWithLatePolicy","rawScore","transferRubricToGrading","prevData","transferRubricToGradingWithDetails","courseDetails","clearSharedRubric","clearRubricFormData","clearGradingFormData","getSessionTimeRemaining","exportSession","rubric","gradingData","exportedAt","sessionExport","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","importSession","setGradingData","persistentFormData","updatePersistentFormData","Provider","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","useAssessment","_s2","context","Error","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// SharedContext.js - Enhanced Privacy-Focused Session Management\r\n// Preserves ALL existing functionality while implementing 1-hour session timeout\r\n\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\n// Session configuration constants\r\nconst SESSION_TIMEOUT_MS = 60 * 60 * 1000; // 1 hour in milliseconds\r\nconst SESSION_WARNING_MS = 55 * 60 * 1000; // 55 minutes - warning time\r\nconst SESSION_KEY = 'gradingSession';\r\n\r\n// Default late policy\r\nexport const DEFAULT_LATE_POLICY = {\r\n    id: 'default',\r\n    name: 'Standard Late Policy',\r\n    type: 'percentage',\r\n    penaltyRate: 10,\r\n    gracePeriod: 0,\r\n    maxPenalty: 100,\r\n    levels: {\r\n        none: { label: 'On Time', multiplier: 1.0, description: 'No penalty applied' },\r\n        light: { label: 'Lightly Late', multiplier: 0.95, description: '5% penalty' },\r\n        moderate: { label: 'Moderately Late', multiplier: 0.85, description: '15% penalty' },\r\n        heavy: { label: 'Heavily Late', multiplier: 0.70, description: '30% penalty' },\r\n        severe: { label: 'Severely Late', multiplier: 0.50, description: '50% penalty' }\r\n    }\r\n};\r\n\r\n// Privacy-compliant session manager\r\nclass SessionManager {\r\n    constructor() {\r\n        this.sessionTimer = null;\r\n        this.warningTimer = null;\r\n        this.onSessionExpired = null;\r\n        this.onSessionWarning = null;\r\n    }\r\n\r\n    startSession() {\r\n        const sessionStart = Date.now();\r\n        const sessionData = {\r\n            startTime: sessionStart,\r\n            expiryTime: sessionStart + SESSION_TIMEOUT_MS,\r\n            isActive: true\r\n        };\r\n\r\n        // Store session metadata only (no user data)\r\n        try {\r\n            sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionData));\r\n            console.log('‚úÖ New session started, expires in 1 hour');\r\n        } catch (error) {\r\n            console.error('Failed to start session:', error);\r\n        }\r\n\r\n        this.setTimers();\r\n        return sessionData;\r\n    }\r\n\r\n    setTimers() {\r\n        // Clear existing timers\r\n        this.clearTimers();\r\n\r\n        // Set warning timer (55 minutes)\r\n        this.warningTimer = setTimeout(() => {\r\n            this.triggerWarning();\r\n        }, SESSION_WARNING_MS);\r\n\r\n        // Set expiry timer (60 minutes)\r\n        this.sessionTimer = setTimeout(() => {\r\n            this.expireSession();\r\n        }, SESSION_TIMEOUT_MS);\r\n    }\r\n\r\n    triggerWarning() {\r\n        console.warn('‚ö†Ô∏è Session expires in 5 minutes');\r\n        if (this.onSessionWarning) {\r\n            this.onSessionWarning();\r\n        }\r\n    }\r\n\r\n    expireSession() {\r\n        console.log('üïê Session expired - clearing all data');\r\n        this.clearAllSessionData();\r\n        if (this.onSessionExpired) {\r\n            this.onSessionExpired();\r\n        }\r\n    }\r\n\r\n    clearTimers() {\r\n        if (this.warningTimer) {\r\n            clearTimeout(this.warningTimer);\r\n            this.warningTimer = null;\r\n        }\r\n        if (this.sessionTimer) {\r\n            clearTimeout(this.sessionTimer);\r\n            this.sessionTimer = null;\r\n        }\r\n    }\r\n\r\n    isSessionValid() {\r\n        try {\r\n            const sessionData = sessionStorage.getItem(SESSION_KEY);\r\n            if (!sessionData) return false;\r\n\r\n            const session = JSON.parse(sessionData);\r\n            const now = Date.now();\r\n\r\n            return session.isActive && now < session.expiryTime;\r\n        } catch (error) {\r\n            console.error('Session validation error:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clearAllSessionData() {\r\n        // Clear session storage\r\n        try {\r\n            sessionStorage.clear();\r\n        } catch (error) {\r\n            console.error('Failed to clear session storage:', error);\r\n        }\r\n\r\n        // Clear localStorage (legacy data) - PRIVACY REQUIREMENT\r\n        try {\r\n            localStorage.removeItem('gradingDrafts');\r\n            localStorage.removeItem('finalGrades');\r\n            localStorage.removeItem('customLatePolicies');\r\n            localStorage.removeItem('currentLatePolicy');\r\n            localStorage.removeItem('activeGradeBook');\r\n            localStorage.removeItem('activeClassList');\r\n            console.log('‚úÖ All persistent data cleared for privacy');\r\n        } catch (error) {\r\n            console.error('Failed to clear localStorage:', error);\r\n        }\r\n\r\n        this.clearTimers();\r\n    }\r\n\r\n    extendSession() {\r\n        if (this.isSessionValid()) {\r\n            this.startSession(); // Restart session with new timer\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getTimeRemaining() {\r\n        try {\r\n            const sessionData = sessionStorage.getItem(SESSION_KEY);\r\n            if (!sessionData) return 0;\r\n\r\n            const session = JSON.parse(sessionData);\r\n            const now = Date.now();\r\n            const remaining = session.expiryTime - now;\r\n\r\n            return Math.max(0, remaining);\r\n        } catch (error) {\r\n            console.error('Error getting time remaining:', error);\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Session management\r\n    const [sessionManager] = useState(() => new SessionManager());\r\n    const [sessionActive, setSessionActive] = useState(false);\r\n    const [showSessionWarning, setShowSessionWarning] = useState(false);\r\n\r\n    // PRESERVED: Navigation state\r\n    const [activeTab, setActiveTab] = useState('class-manager');\r\n\r\n    // PRESERVED: Shared state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n\r\n    // PRESERVED: Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // PRESERVED: Grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        classListData: null,\r\n        currentStudentIndex: 0,\r\n        currentStudent: null,\r\n        startedAt: null\r\n    });\r\n\r\n    // PRESERVED: Form data states - session-only now\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n        assignment: { title: '', description: '', dueDate: '', totalPoints: 100, maxPoints: 100 },\r\n        rubricGrading: {},\r\n        feedback: { strengths: '', improvements: '', general: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        metadata: { gradedBy: '', gradedDate: '', version: '1.0', notes: '' },\r\n        latePolicy: {\r\n            level: 'none',\r\n            penaltyApplied: false,\r\n            policyId: null,\r\n            originalScore: null,\r\n            adjustedScore: null,\r\n            multiplier: 1.0\r\n        }\r\n    });\r\n\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n        assignment: { title: '', description: '', dueDate: '', totalPoints: 100, passingThreshold: 70 },\r\n        criteria: []\r\n    });\r\n\r\n    // PRESERVED: AI form states\r\n    const [aiPromptFormData, setAIPromptFormData] = useState({\r\n        assignmentType: '',\r\n        programType: 'diploma',\r\n        programLevel: '',\r\n        subjectArea: '',\r\n        assignmentDescription: '',\r\n        totalPoints: '100',\r\n        weightPercentage: '',\r\n        numCriteria: '4',\r\n        criteriaType: 'ai-suggested',\r\n        userCriteria: '',\r\n        learningObjectives: '',\r\n        studentPopulation: '',\r\n        specialConsiderations: '',\r\n        institutionType: 'college'\r\n    });\r\n\r\n    const [assignmentPromptFormData, setAssignmentPromptFormData] = useState({\r\n        assignmentType: '',\r\n        topic: '',\r\n        difficultyLevel: '',\r\n        learningObjectives: '',\r\n        deliverables: '',\r\n        constraints: '',\r\n        additionalRequirements: ''\r\n    });\r\n\r\n    // PRESERVED: Grade management - session-only, no persistence\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // PRESERVED: Late policy management\r\n    const [currentLatePolicy, setCurrentLatePolicy] = useState(DEFAULT_LATE_POLICY);\r\n    const [customLatePolicies, setCustomLatePolicies] = useState([]);\r\n\r\n    // PRESERVED: Grade book state - requires manual import\r\n    const [gradeBook, setGradeBook] = useState(null);\r\n\r\n    // Initialize session on mount - PRIVACY FEATURE\r\n    useEffect(() => {\r\n        // Clear all data on startup - privacy requirement\r\n        sessionManager.clearAllSessionData();\r\n\r\n        // Start new session\r\n        sessionManager.startSession();\r\n        setSessionActive(true);\r\n\r\n        // Set up session event handlers\r\n        sessionManager.onSessionWarning = () => {\r\n            setShowSessionWarning(true);\r\n        };\r\n\r\n        sessionManager.onSessionExpired = () => {\r\n            // Clear all application state\r\n            clearAllData();\r\n            setSessionActive(false);\r\n            setShowSessionWarning(false);\r\n            alert('Session expired after 1 hour. All data has been cleared for privacy.');\r\n        };\r\n\r\n        // Check for existing session validity\r\n        if (!sessionManager.isSessionValid()) {\r\n            sessionManager.startSession();\r\n        }\r\n\r\n        return () => {\r\n            sessionManager.clearTimers();\r\n        };\r\n    }, []);\r\n\r\n    // PRESERVED: AI Prompt form management\r\n    const initializeAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData({\r\n            assignmentType: '',\r\n            programType: 'diploma',\r\n            programLevel: '',\r\n            subjectArea: '',\r\n            assignmentDescription: '',\r\n            totalPoints: '100',\r\n            weightPercentage: '',\r\n            numCriteria: '4',\r\n            criteriaType: 'ai-suggested',\r\n            userCriteria: '',\r\n            learningObjectives: '',\r\n            studentPopulation: '',\r\n            specialConsiderations: '',\r\n            institutionType: 'college'\r\n        });\r\n    }, []);\r\n\r\n    // PRESERVED: Form update functions\r\n    const updateStudentInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: { ...prev.feedback, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicyInfo = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy: { ...prev.latePolicy, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((criterionId, data) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading: { ...prev.rubricGrading, [criterionId]: data }\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((field, value) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: { ...prev.metadata, [field]: value }\r\n        }));\r\n    }, []);\r\n\r\n    // PRESERVED: AI Prompt form functions\r\n    const updateAIPromptFormData = useCallback((field, value) => {\r\n        setAIPromptFormData(prev => ({ ...prev, [field]: value }));\r\n    }, []);\r\n\r\n    const clearAIPromptFormData = useCallback(() => {\r\n        setAIPromptFormData({\r\n            assignmentType: '',\r\n            programType: 'diploma',\r\n            programLevel: '',\r\n            subjectArea: '',\r\n            assignmentDescription: '',\r\n            totalPoints: '100',\r\n            weightPercentage: '',\r\n            numCriteria: '4',\r\n            criteriaType: 'ai-suggested',\r\n            userCriteria: '',\r\n            learningObjectives: '',\r\n            studentPopulation: '',\r\n            specialConsiderations: '',\r\n            institutionType: 'college'\r\n        });\r\n    }, []);\r\n\r\n    // PRESERVED: Assignment Prompt form functions\r\n    const updateAssignmentPromptFormData = useCallback((field, value) => {\r\n        setAssignmentPromptFormData(prev => ({ ...prev, [field]: value }));\r\n    }, []);\r\n\r\n    const initializeAssignmentPromptFormData = useCallback((data) => {\r\n        setAssignmentPromptFormData(data);\r\n    }, []);\r\n\r\n    const clearAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData({\r\n            assignmentType: '',\r\n            topic: '',\r\n            difficultyLevel: '',\r\n            learningObjectives: '',\r\n            deliverables: '',\r\n            constraints: '',\r\n            additionalRequirements: ''\r\n        });\r\n    }, []);\r\n\r\n    // MODIFIED: Grade management - session-only, no localStorage persistence\r\n    const saveDraft = useCallback((studentId, gradeData) => {\r\n        if (!sessionActive) {\r\n            console.warn('Cannot save draft - session inactive');\r\n            return;\r\n        }\r\n\r\n        const draftData = {\r\n            ...gradeData,\r\n            savedAt: new Date().toISOString(),\r\n            type: 'draft'\r\n        };\r\n        setDrafts(prev => ({ ...prev, [studentId]: draftData }));\r\n        console.log('‚úÖ Draft saved for student:', studentId, '(session only)');\r\n    }, [sessionActive]);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        return drafts[studentId] || null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, gradeData) => {\r\n        if (!sessionActive) {\r\n            console.warn('Cannot save final grade - session inactive');\r\n            return;\r\n        }\r\n\r\n        const finalData = {\r\n            ...gradeData,\r\n            finalizedAt: new Date().toISOString(),\r\n            type: 'final'\r\n        };\r\n        setFinalGrades(prev => ({ ...prev, [studentId]: finalData }));\r\n\r\n        // Remove from drafts when finalized\r\n        setDrafts(prev => {\r\n            const newDrafts = { ...prev };\r\n            delete newDrafts[studentId];\r\n            return newDrafts;\r\n        });\r\n\r\n        console.log('‚úÖ Final grade saved for student:', studentId, '(session only)');\r\n    }, [sessionActive]);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'none';\r\n    }, [drafts, finalGrades]);\r\n\r\n    const hasDraft = useCallback((studentId) => {\r\n        return getGradeStatus(studentId) === 'draft';\r\n    }, [getGradeStatus]);\r\n\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draft = loadDraft(studentId);\r\n        if (draft) {\r\n            saveFinalGrade(studentId, draft);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [loadDraft, saveFinalGrade]);\r\n\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalGrade = loadFinalGrade(studentId);\r\n        if (finalGrade) {\r\n            saveDraft(studentId, { ...finalGrade, type: 'draft' });\r\n            setFinalGrades(prev => {\r\n                const newFinals = { ...prev };\r\n                delete newFinals[studentId];\r\n                return newFinals;\r\n            });\r\n            console.log('‚úÖ Grade unlocked for student:', studentId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [loadFinalGrade, saveDraft]);\r\n\r\n    // PRESERVED: Grading session management\r\n    const initializeGradingSession = useCallback((classListData, rubricData) => {\r\n        if (!classListData || !classListData.students || classListData.students.length === 0) {\r\n            console.warn('Cannot initialize grading session: No students found');\r\n            return false;\r\n        }\r\n\r\n        const firstStudent = classListData.students[0];\r\n\r\n        setGradingSession({\r\n            active: true,\r\n            classListData: classListData,\r\n            currentStudentIndex: 0,\r\n            currentStudent: firstStudent,\r\n            startedAt: new Date().toISOString()\r\n        });\r\n\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // Auto-populate course information from class list\r\n        if (classListData.courseMetadata) {\r\n            updateCourseInfo('code', classListData.courseMetadata.courseCode || '');\r\n            updateCourseInfo('name', classListData.courseMetadata.courseName || '');\r\n            updateCourseInfo('instructor', classListData.courseMetadata.instructor ||\r\n                classListData.courseMetadata.professors || '');\r\n        }\r\n\r\n        // Auto-populate assignment information from rubric\r\n        if (rubricData && rubricData.assignmentInfo) {\r\n            updateAssignmentInfo('title', rubricData.assignmentInfo.title || '');\r\n            updateAssignmentInfo('description', rubricData.assignmentInfo.description || '');\r\n            updateAssignmentInfo('totalPoints', rubricData.assignmentInfo.totalPoints || 100);\r\n            updateAssignmentInfo('maxPoints', rubricData.assignmentInfo.totalPoints || 100);\r\n        }\r\n\r\n        // Auto-populate student information for first student\r\n        updateStudentInfo('name', firstStudent.name || '');\r\n        updateStudentInfo('id', firstStudent.id || '');\r\n        updateStudentInfo('email', firstStudent.email || '');\r\n\r\n        console.log('‚úÖ Grading session initialized:', {\r\n            totalStudents: classListData.students.length,\r\n            firstStudent: firstStudent.name,\r\n            courseInfo: classListData.courseMetadata\r\n        });\r\n\r\n        return true;\r\n    }, [updateCourseInfo, updateAssignmentInfo, updateStudentInfo]);\r\n\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({ ...prev, ...updates }));\r\n    }, []);\r\n\r\n    const nextStudentInSession = useCallback((saveType = null) => {\r\n        if (!gradingSession.active || !gradingSession.classListData) {\r\n            console.warn('No active grading session');\r\n            return false;\r\n        }\r\n\r\n        const nextIndex = gradingSession.currentStudentIndex + 1;\r\n        if (nextIndex >= gradingSession.classListData.students.length) {\r\n            console.log('Reached end of student list');\r\n            return false;\r\n        }\r\n\r\n        const nextStudent = gradingSession.classListData.students[nextIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: nextIndex,\r\n            currentStudent: nextStudent\r\n        }));\r\n\r\n        setCurrentStudent(nextStudent);\r\n\r\n        // Auto-populate student information for next student\r\n        updateStudentInfo('name', nextStudent.name || '');\r\n        updateStudentInfo('id', nextStudent.id || '');\r\n        updateStudentInfo('email', nextStudent.email || '');\r\n\r\n        console.log('‚úÖ Moved to next student:', nextStudent.name);\r\n        return true;\r\n    }, [gradingSession, updateStudentInfo]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !gradingSession.classListData) {\r\n            console.warn('No active grading session');\r\n            return false;\r\n        }\r\n\r\n        const prevIndex = gradingSession.currentStudentIndex - 1;\r\n        if (prevIndex < 0) {\r\n            console.log('Already at first student');\r\n            return false;\r\n        }\r\n\r\n        const prevStudent = gradingSession.classListData.students[prevIndex];\r\n\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: prevIndex,\r\n            currentStudent: prevStudent\r\n        }));\r\n\r\n        setCurrentStudent(prevStudent);\r\n\r\n        // Auto-populate student information for previous student\r\n        updateStudentInfo('name', prevStudent.name || '');\r\n        updateStudentInfo('id', prevStudent.id || '');\r\n        updateStudentInfo('email', prevStudent.email || '');\r\n\r\n        console.log('‚úÖ Moved to previous student:', prevStudent.name);\r\n        return true;\r\n    }, [gradingSession, updateStudentInfo]);\r\n\r\n    // PRESERVED: Late policy management functions\r\n    const loadLatePoliciesFromStorage = useCallback(() => {\r\n        // No longer loads from localStorage for privacy - keeps default policies only\r\n        console.log('Late policies loaded from defaults only (privacy mode)');\r\n    }, []);\r\n\r\n    const saveCustomLatePolicy = useCallback((policyData) => {\r\n        const newPolicy = {\r\n            ...policyData,\r\n            id: `custom-${Date.now()}`,\r\n            createdAt: new Date().toISOString()\r\n        };\r\n\r\n        setCustomLatePolicies(prev => [...prev, newPolicy]);\r\n        console.log('Custom late policy saved (session only)');\r\n        return newPolicy;\r\n    }, []);\r\n\r\n    const updateCustomLatePolicy = useCallback((policyId, policyData) => {\r\n        setCustomLatePolicies(prev =>\r\n            prev.map(policy =>\r\n                policy.id === policyId\r\n                    ? { ...policy, ...policyData, updatedAt: new Date().toISOString() }\r\n                    : policy\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    const deleteCustomLatePolicy = useCallback((policyId) => {\r\n        setCustomLatePolicies(prev => prev.filter(policy => policy.id !== policyId));\r\n    }, []);\r\n\r\n    const applyLatePolicy = useCallback((score, policyLevel) => {\r\n        const activeLevels = currentLatePolicy?.levels || DEFAULT_LATE_POLICY.levels;\r\n        const policyData = activeLevels[policyLevel] || activeLevels.none;\r\n        return score * policyData.multiplier;\r\n    }, [currentLatePolicy]);\r\n\r\n    const calculateScoreWithLatePolicy = useCallback((rawScore, policyLevel) => {\r\n        return applyLatePolicy(rawScore, policyLevel);\r\n    }, [applyLatePolicy]);\r\n\r\n    // PRESERVED: Utility functions\r\n    const transferRubricToGrading = useCallback((rubricData) => {\r\n        if (!rubricData) return;\r\n\r\n        setSharedRubric(rubricData);\r\n\r\n        setGradingFormData(prevData => ({\r\n            ...prevData,\r\n            course: rubricData.courseInfo || prevData.course,\r\n            assignment: rubricData.assignmentInfo || prevData.assignment,\r\n            rubricGrading: {}\r\n        }));\r\n    }, []);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((rubricData, courseDetails) => {\r\n        if (!rubricData) return;\r\n\r\n        setSharedRubric(rubricData);\r\n        if (courseDetails) setSharedCourseDetails(courseDetails);\r\n\r\n        setGradingFormData(prevData => ({\r\n            ...prevData,\r\n            course: rubricData.courseInfo || prevData.course,\r\n            assignment: rubricData.assignmentInfo || prevData.assignment,\r\n            rubricGrading: {}\r\n        }));\r\n    }, []);\r\n\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n            assignment: { title: '', description: '', dueDate: '', totalPoints: 100, passingThreshold: 70 },\r\n            criteria: []\r\n        });\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', semester: '', year: '' },\r\n            assignment: { title: '', description: '', dueDate: '', totalPoints: 100, maxPoints: 100 },\r\n            rubricGrading: {},\r\n            feedback: { strengths: '', improvements: '', general: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            metadata: { gradedBy: '', gradedDate: '', version: '1.0', notes: '' },\r\n            latePolicy: {\r\n                level: 'none',\r\n                penaltyApplied: false,\r\n                policyId: null,\r\n                originalScore: null,\r\n                adjustedScore: null,\r\n                multiplier: 1.0\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    // MODIFIED: Session management functions - privacy enhanced\r\n    const extendSession = useCallback(() => {\r\n        if (sessionManager.extendSession()) {\r\n            setShowSessionWarning(false);\r\n            alert('Session extended for another hour.');\r\n        } else {\r\n            alert('Unable to extend session. Please save your work and restart.');\r\n        }\r\n    }, [sessionManager]);\r\n\r\n    const getSessionTimeRemaining = useCallback(() => {\r\n        return sessionManager.getTimeRemaining();\r\n    }, [sessionManager]);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        setSharedCourseDetails(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n        clearAIPromptFormData();\r\n        clearAssignmentPromptFormData();\r\n        setDrafts({});\r\n        setFinalGrades({});\r\n        setCustomLatePolicies([]);\r\n        setCurrentLatePolicy(DEFAULT_LATE_POLICY);\r\n        setClassList(null);\r\n        setCurrentStudent(null);\r\n        setGradingSession({\r\n            active: false,\r\n            classListData: null,\r\n            currentStudentIndex: 0,\r\n            currentStudent: null,\r\n            startedAt: null\r\n        });\r\n        setGradeBook(null);\r\n        console.log('‚úÖ All application data cleared for privacy');\r\n    }, [clearGradingFormData, clearRubricFormData, clearAIPromptFormData, clearAssignmentPromptFormData]);\r\n\r\n    const exportSession = useCallback(() => {\r\n        const sessionData = {\r\n            rubric: sharedRubric,\r\n            courseDetails: sharedCourseDetails,\r\n            gradingData: gradingFormData,\r\n            classList: classList,\r\n            currentStudent: currentStudent,\r\n            drafts: drafts,\r\n            finalGrades: finalGrades,\r\n            customLatePolicies: customLatePolicies,\r\n            currentLatePolicy: currentLatePolicy,\r\n            gradeBook: gradeBook,\r\n            exportedAt: new Date().toISOString(),\r\n            version: '2.0',\r\n            sessionExport: true\r\n        };\r\n\r\n        const blob = new Blob([JSON.stringify(sessionData, null, 2)], { type: 'application/json' });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = `grading-session-${new Date().toISOString().split('T')[0]}.json`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n    }, [sharedRubric, sharedCourseDetails, gradingFormData, classList, currentStudent, drafts, finalGrades, customLatePolicies, currentLatePolicy, gradeBook]);\r\n\r\n    const importSession = useCallback((sessionData) => {\r\n        try {\r\n            const data = typeof sessionData === 'string' ? JSON.parse(sessionData) : sessionData;\r\n\r\n            if (data.rubric) setSharedRubric(data.rubric);\r\n            if (data.courseDetails) setSharedCourseDetails(data.courseDetails);\r\n            if (data.gradingData) setGradingFormData(data.gradingData);\r\n            if (data.classList) setClassList(data.classList);\r\n            if (data.currentStudent) setCurrentStudent(data.currentStudent);\r\n            if (data.drafts) setDrafts(data.drafts);\r\n            if (data.finalGrades) setFinalGrades(data.finalGrades);\r\n            if (data.customLatePolicies) setCustomLatePolicies(data.customLatePolicies);\r\n            if (data.currentLatePolicy) setCurrentLatePolicy(data.currentLatePolicy);\r\n            if (data.gradeBook) setGradeBook(data.gradeBook);\r\n\r\n            console.log('‚úÖ Session imported successfully');\r\n        } catch (error) {\r\n            console.error(\"Failed to import session:\", error);\r\n            alert(\"Error: Could not load the session file. Please ensure it's a valid session file.\");\r\n        }\r\n    }, []);\r\n\r\n    // Context value with ALL functions preserved\r\n    const value = {\r\n        // Session management - PRIVACY FEATURES\r\n        sessionActive,\r\n        showSessionWarning,\r\n        extendSession,\r\n        getSessionTimeRemaining,\r\n        clearAllData,\r\n\r\n        // Shared state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n\r\n        // Navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // AI Prompt Generator\r\n        aiPromptFormData,\r\n        updateAIPromptFormData,\r\n        initializeAIPromptFormData,\r\n        clearAIPromptFormData,\r\n\r\n        // Assignment Prompt Generator\r\n        assignmentPromptFormData,\r\n        updateAssignmentPromptFormData,\r\n        initializeAssignmentPromptFormData,\r\n        clearAssignmentPromptFormData,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        clearGradingFormData,\r\n        persistentFormData: gradingFormData,\r\n        updatePersistentFormData: setGradingFormData,\r\n\r\n        // Form update functions\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicyInfo,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Draft and Final Grade Management\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Class management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Late Policy Management\r\n        currentLatePolicy,\r\n        setCurrentLatePolicy,\r\n        customLatePolicies,\r\n        setCustomLatePolicies,\r\n        loadLatePoliciesFromStorage,\r\n        saveCustomLatePolicy,\r\n        updateCustomLatePolicy,\r\n        deleteCustomLatePolicy,\r\n        applyLatePolicy,\r\n        calculateScoreWithLatePolicy,\r\n\r\n        // Utility functions\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n        clearRubricFormData,\r\n\r\n        // Session management\r\n        exportSession,\r\n        importSession,\r\n\r\n        // Grade book\r\n        gradeBook,\r\n        setGradeBook\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n            {/* Session warning modal */}\r\n            {showSessionWarning && (\r\n                <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n                    <div className=\"bg-white rounded-lg p-6 max-w-md mx-4\">\r\n                        <h3 className=\"text-lg font-semibold text-orange-600 mb-2\">\r\n                            ‚ö†Ô∏è Session Expiring Soon\r\n                        </h3>\r\n                        <p className=\"text-gray-700 mb-4\">\r\n                            Your session will expire in 5 minutes. All data will be cleared for privacy.\r\n                        </p>\r\n                        <div className=\"flex gap-3\">\r\n                            <button\r\n                                onClick={extendSession}\r\n                                className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n                            >\r\n                                Extend Session\r\n                            </button>\r\n                            <button\r\n                                onClick={() => setShowSessionWarning(false)}\r\n                                className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\"\r\n                            >\r\n                                Continue\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within an AssessmentProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}