{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/SharedContext.js\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within an AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Core state\n  const [activeTab, setActiveTab] = useState('ai-prompt-generator');\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [gradingData, setGradingData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // Draft and Final Grade Management - ENHANCED\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // Class management state\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // Grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Rubric form data state\n  const [rubricFormData, setRubricFormData] = useState({\n    assignmentInfo: {\n      title: '',\n      description: '',\n      weight: 25,\n      passingThreshold: 60,\n      totalPoints: 100\n    },\n    rubricLevels: [{\n      level: 'incomplete',\n      name: 'Incomplete',\n      description: 'No submission or unusable',\n      color: '#95a5a6',\n      multiplier: 0\n    }, {\n      level: 'unacceptable',\n      name: 'Unacceptable',\n      description: 'Below minimum standards',\n      color: '#e74c3c',\n      multiplier: 0.3\n    }, {\n      level: 'developing',\n      name: 'Developing',\n      description: 'Approaching standards',\n      color: '#f39c12',\n      multiplier: 0.55\n    }, {\n      level: 'acceptable',\n      name: 'Acceptable (PASS)',\n      description: 'Meets minimum standards',\n      color: '#27ae60',\n      multiplier: 0.7\n    }, {\n      level: 'emerging',\n      name: 'Emerging',\n      description: 'Above standard expectations',\n      color: '#2980b9',\n      multiplier: 0.82\n    }, {\n      level: 'accomplished',\n      name: 'Accomplished',\n      description: 'Strong professional quality',\n      color: '#16a085',\n      multiplier: 0.92\n    }, {\n      level: 'exceptional',\n      name: 'Exceptional',\n      description: 'Outstanding professional quality',\n      color: '#8e44ad',\n      multiplier: 1.0\n    }],\n    criteria: []\n  });\n\n  // Legacy compatibility state\n  const [persistentFormData, setPersistentFormData] = useState({});\n\n  // Draft and Final Grade Management Functions\n  const saveDraft = useCallback((studentId, data) => {\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: {\n        ...data,\n        savedAt: new Date().toISOString(),\n        type: 'draft'\n      }\n    }));\n    console.log(`üíæ Draft saved for student ${studentId}`);\n  }, []);\n  const loadDraft = useCallback(studentId => {\n    return drafts[studentId] || null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, data) => {\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: {\n        ...data,\n        savedAt: new Date().toISOString(),\n        finalizedAt: new Date().toISOString(),\n        type: 'final'\n      }\n    }));\n\n    // Remove from drafts when finalized\n    setDrafts(prev => {\n      const newDrafts = {\n        ...prev\n      };\n      delete newDrafts[studentId];\n      return newDrafts;\n    });\n    console.log(`‚úÖ Final grade saved for student ${studentId}`);\n  }, []);\n  const loadFinalGrade = useCallback(studentId => {\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n  const hasDraft = useCallback(studentId => {\n    return !!drafts[studentId];\n  }, [drafts]);\n  const finalizeGrade = useCallback(studentId => {\n    const draft = drafts[studentId];\n    if (draft) {\n      saveFinalGrade(studentId, draft);\n      return true;\n    }\n    return false;\n  }, [drafts, saveFinalGrade]);\n  const unlockGrade = useCallback(studentId => {\n    const finalGrade = finalGrades[studentId];\n    if (finalGrade) {\n      // Move final grade back to draft\n      setDrafts(prev => ({\n        ...prev,\n        [studentId]: {\n          ...finalGrade,\n          savedAt: new Date().toISOString(),\n          type: 'draft'\n        }\n      }));\n\n      // Remove from final grades\n      setFinalGrades(prev => {\n        const newFinalGrades = {\n          ...prev\n        };\n        delete newFinalGrades[studentId];\n        return newFinalGrades;\n      });\n      console.log(`üîì Grade unlocked for student ${studentId}`);\n      return true;\n    }\n    return false;\n  }, [finalGrades]);\n\n  // Grading data update functions\n  const updateStudentInfo = useCallback(studentInfo => {\n    setGradingData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...studentInfo\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(courseInfo => {\n    setGradingData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...courseInfo\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignmentInfo => {\n    setGradingData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback(feedbackInfo => {\n    setGradingData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        ...feedbackInfo\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicyInfo = useCallback(latePolicyInfo => {\n    setGradingData(prev => ({\n      ...prev,\n      latePolicy: {\n        ...prev.latePolicy,\n        ...latePolicyInfo\n      }\n    }));\n  }, []);\n  const updateRubricGrading = useCallback(rubricGrading => {\n    setGradingData(prev => ({\n      ...prev,\n      rubricGrading: {\n        ...prev.rubricGrading,\n        ...rubricGrading\n      }\n    }));\n  }, []);\n  const updateMetadata = useCallback(metadata => {\n    setGradingData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        ...metadata\n      }\n    }));\n  }, []);\n\n  // Navigation helpers for grading sessions\n  const nextStudentInSession = useCallback((saveType = 'draft') => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    const students = classList.students;\n    if (currentIndex < students.length - 1) {\n      const nextIndex = currentIndex + 1;\n      const nextStudent = students[nextIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: nextIndex,\n        currentStudent: nextStudent,\n        gradedStudents: [...prev.gradedStudents, currentStudent.id]\n      }));\n      setCurrentStudent(nextStudent);\n      return true;\n    }\n\n    // End of session\n    setGradingSession(prev => ({\n      ...prev,\n      active: false,\n      gradedStudents: [...prev.gradedStudents, currentStudent.id]\n    }));\n    return false;\n  }, [gradingSession, classList, currentStudent]);\n  const previousStudentInSession = useCallback(() => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    if (currentIndex > 0) {\n      const prevIndex = currentIndex - 1;\n      const prevStudent = classList.students[prevIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: prevIndex,\n        currentStudent: prevStudent\n      }));\n      setCurrentStudent(prevStudent);\n      return true;\n    }\n    return false;\n  }, [gradingSession, classList]);\n\n  // **FIXED: Enhanced initializeGradingSession function**\n  const initializeGradingSession = useCallback(classListData => {\n    var _classListData$studen;\n    // 1. Guard against missing or empty class list\n    if (!classListData || !((_classListData$studen = classListData.students) !== null && _classListData$studen !== void 0 && _classListData$studen.length)) {\n      console.warn('‚ö†Ô∏è Cannot initialize grading session: No students found');\n      return false;\n    }\n\n    // 2. Extract the students array and the imported course metadata\n    const {\n      students,\n      courseMetadata\n    } = classListData;\n\n    // 3. Pick the first student to start the session\n    const firstStudent = students[0];\n\n    // 4. Build and set the grading session state\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // 5. Prefill the grading form: student + course details\n    setGradingData(prev => {\n      var _courseMetadata$cours, _courseMetadata$cours2, _courseMetadata$instr, _courseMetadata$term, _sharedCourseDetails$;\n      return {\n        ...prev,\n        student: {\n          name: firstStudent.name,\n          id: firstStudent.id,\n          email: firstStudent.email\n        },\n        course: {\n          code: (_courseMetadata$cours = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseCode) !== null && _courseMetadata$cours !== void 0 ? _courseMetadata$cours : prev.course.code,\n          name: (_courseMetadata$cours2 = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseName) !== null && _courseMetadata$cours2 !== void 0 ? _courseMetadata$cours2 : prev.course.name,\n          instructor: (_courseMetadata$instr = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.instructor) !== null && _courseMetadata$instr !== void 0 ? _courseMetadata$instr : prev.course.instructor,\n          term: (_courseMetadata$term = courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.term) !== null && _courseMetadata$term !== void 0 ? _courseMetadata$term : prev.course.term\n        },\n        assignment: (_sharedCourseDetails$ = sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.assignment) !== null && _sharedCourseDetails$ !== void 0 ? _sharedCourseDetails$ : prev.assignment\n      };\n    });\n    console.log(`üöÄ Grading session started for ${students.length} students`);\n    return true;\n  }, [sharedCourseDetails]);\n\n  // Update grading session\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n\n  // Rubric management functions\n  const transferRubricToGrading = useCallback(() => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n  const transferRubricToGradingWithDetails = useCallback(details => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setSharedCourseDetails(details);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n\n  // Clear functions\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      assignmentInfo: {\n        title: '',\n        description: '',\n        weight: 25,\n        passingThreshold: 60,\n        totalPoints: 100\n      },\n      rubricLevels: [{\n        level: 'incomplete',\n        name: 'Incomplete',\n        description: 'No submission or unusable',\n        color: '#95a5a6',\n        multiplier: 0\n      }, {\n        level: 'unacceptable',\n        name: 'Unacceptable',\n        description: 'Below minimum standards',\n        color: '#e74c3c',\n        multiplier: 0.3\n      }, {\n        level: 'developing',\n        name: 'Developing',\n        description: 'Approaching standards',\n        color: '#f39c12',\n        multiplier: 0.55\n      }, {\n        level: 'acceptable',\n        name: 'Acceptable (PASS)',\n        description: 'Meets minimum standards',\n        color: '#27ae60',\n        multiplier: 0.7\n      }, {\n        level: 'emerging',\n        name: 'Emerging',\n        description: 'Above standard expectations',\n        color: '#2980b9',\n        multiplier: 0.82\n      }, {\n        level: 'accomplished',\n        name: 'Accomplished',\n        description: 'Strong professional quality',\n        color: '#16a085',\n        multiplier: 0.92\n      }, {\n        level: 'exceptional',\n        name: 'Exceptional',\n        description: 'Outstanding professional quality',\n        color: '#8e44ad',\n        multiplier: 1.0\n      }],\n      criteria: []\n    });\n  }, []);\n  const clearAllData = useCallback(() => {\n    clearGradingFormData();\n    clearRubricFormData();\n    clearSharedRubric();\n    setSharedCourseDetails(null);\n    setCurrentStudent(null);\n    setGradingSession({\n      active: false,\n      startTime: null,\n      gradedStudents: [],\n      totalStudents: 0,\n      currentStudent: null,\n      currentStudentIndex: 0\n    });\n  }, [clearGradingFormData, clearRubricFormData, clearSharedRubric]);\n\n  // Session management\n  const exportSession = useCallback(() => {\n    const sessionData = {\n      activeTab,\n      sharedRubric,\n      sharedCourseDetails,\n      gradingData,\n      classList,\n      currentStudent,\n      gradingSession,\n      rubricFormData,\n      drafts,\n      finalGrades,\n      exportedAt: new Date().toISOString()\n    };\n    return sessionData;\n  }, [activeTab, sharedRubric, sharedCourseDetails, gradingData, classList, currentStudent, gradingSession, rubricFormData, drafts, finalGrades]);\n  const importSession = useCallback(sessionData => {\n    try {\n      if (sessionData.activeTab) setActiveTab(sessionData.activeTab);\n      if (sessionData.sharedRubric) setSharedRubric(sessionData.sharedRubric);\n      if (sessionData.sharedCourseDetails) setSharedCourseDetails(sessionData.sharedCourseDetails);\n      if (sessionData.gradingData) setGradingData(sessionData.gradingData);\n      if (sessionData.classList) setClassList(sessionData.classList);\n      if (sessionData.currentStudent) setCurrentStudent(sessionData.currentStudent);\n      if (sessionData.gradingSession) setGradingSession(sessionData.gradingSession);\n      if (sessionData.rubricFormData) setRubricFormData(sessionData.rubricFormData);\n      if (sessionData.drafts) setDrafts(sessionData.drafts);\n      if (sessionData.finalGrades) setFinalGrades(sessionData.finalGrades);\n      return true;\n    } catch (error) {\n      console.error('Failed to import session:', error);\n      return false;\n    }\n  }, []);\n\n  // Legacy compatibility\n  const updatePersistentFormData = useCallback(data => {\n    setPersistentFormData(prev => ({\n      ...prev,\n      ...data\n    }));\n  }, []);\n\n  // **FIXED: Complete value object with all functions**\n  const value = {\n    // Core state\n    activeTab,\n    setActiveTab,\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    gradingData,\n    setGradingData,\n    // Grading data update functions\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicyInfo,\n    updateRubricGrading,\n    updateMetadata,\n    // Draft and Final Grade Management - ENHANCED\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Class management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Grading session\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    // Utility functions\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    clearGradingFormData,\n    clearRubricFormData,\n    clearAllData,\n    // Session management\n    exportSession,\n    importSession,\n    // Legacy compatibility\n    persistentFormData,\n    updatePersistentFormData\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 526,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"A+r/5xFVA8nsuKlqYNjpnVAJtzk=\");\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","activeTab","setActiveTab","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","gradingData","setGradingData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","drafts","setDrafts","finalGrades","setFinalGrades","classList","setClassList","currentStudent","setCurrentStudent","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","rubricFormData","setRubricFormData","assignmentInfo","title","description","weight","passingThreshold","totalPoints","rubricLevels","color","multiplier","criteria","persistentFormData","setPersistentFormData","saveDraft","studentId","data","prev","savedAt","Date","toISOString","type","console","log","loadDraft","saveFinalGrade","finalizedAt","newDrafts","loadFinalGrade","getGradeStatus","hasDraft","finalizeGrade","draft","unlockGrade","finalGrade","newFinalGrades","updateStudentInfo","studentInfo","updateCourseInfo","courseInfo","updateAssignmentInfo","updateFeedbackInfo","feedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicyInfo","latePolicyInfo","updateRubricGrading","updateMetadata","nextStudentInSession","saveType","currentIndex","students","length","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","initializeGradingSession","classListData","_classListData$studen","warn","courseMetadata","firstStudent","session","_courseMetadata$cours","_courseMetadata$cours2","_courseMetadata$instr","_courseMetadata$term","_sharedCourseDetails$","courseCode","courseName","updateGradingSession","updates","transferRubricToGrading","transferRubricToGradingWithDetails","details","clearSharedRubric","clearGradingFormData","clearRubricFormData","clearAllData","exportSession","sessionData","exportedAt","importSession","error","updatePersistentFormData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// src/components/SharedContext.js\r\nimport React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within an AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Core state\r\n    const [activeTab, setActiveTab] = useState('ai-prompt-generator');\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [gradingData, setGradingData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // Draft and Final Grade Management - ENHANCED\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // Class management state\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // Grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Rubric form data state\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        assignmentInfo: {\r\n            title: '',\r\n            description: '',\r\n            weight: 25,\r\n            passingThreshold: 60,\r\n            totalPoints: 100\r\n        },\r\n        rubricLevels: [\r\n            { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n            { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n            { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n            { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n            { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n            { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n            { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n        ],\r\n        criteria: []\r\n    });\r\n\r\n    // Legacy compatibility state\r\n    const [persistentFormData, setPersistentFormData] = useState({});\r\n\r\n    // Draft and Final Grade Management Functions\r\n    const saveDraft = useCallback((studentId, data) => {\r\n        setDrafts(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...data,\r\n                savedAt: new Date().toISOString(),\r\n                type: 'draft'\r\n            }\r\n        }));\r\n        console.log(`üíæ Draft saved for student ${studentId}`);\r\n    }, []);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        return drafts[studentId] || null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, data) => {\r\n        setFinalGrades(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...data,\r\n                savedAt: new Date().toISOString(),\r\n                finalizedAt: new Date().toISOString(),\r\n                type: 'final'\r\n            }\r\n        }));\r\n\r\n        // Remove from drafts when finalized\r\n        setDrafts(prev => {\r\n            const newDrafts = { ...prev };\r\n            delete newDrafts[studentId];\r\n            return newDrafts;\r\n        });\r\n\r\n        console.log(`‚úÖ Final grade saved for student ${studentId}`);\r\n    }, []);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    const hasDraft = useCallback((studentId) => {\r\n        return !!drafts[studentId];\r\n    }, [drafts]);\r\n\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draft = drafts[studentId];\r\n        if (draft) {\r\n            saveFinalGrade(studentId, draft);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [drafts, saveFinalGrade]);\r\n\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalGrade = finalGrades[studentId];\r\n        if (finalGrade) {\r\n            // Move final grade back to draft\r\n            setDrafts(prev => ({\r\n                ...prev,\r\n                [studentId]: {\r\n                    ...finalGrade,\r\n                    savedAt: new Date().toISOString(),\r\n                    type: 'draft'\r\n                }\r\n            }));\r\n\r\n            // Remove from final grades\r\n            setFinalGrades(prev => {\r\n                const newFinalGrades = { ...prev };\r\n                delete newFinalGrades[studentId];\r\n                return newFinalGrades;\r\n            });\r\n\r\n            console.log(`üîì Grade unlocked for student ${studentId}`);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [finalGrades]);\r\n\r\n    // Grading data update functions\r\n    const updateStudentInfo = useCallback((studentInfo) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, ...studentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((courseInfo) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, ...courseInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, ...assignmentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((feedbackInfo) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            feedback: { ...prev.feedback, ...feedbackInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicyInfo = useCallback((latePolicyInfo) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            latePolicy: { ...prev.latePolicy, ...latePolicyInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((rubricGrading) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            rubricGrading: { ...prev.rubricGrading, ...rubricGrading }\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((metadata) => {\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            metadata: { ...prev.metadata, ...metadata }\r\n        }));\r\n    }, []);\r\n\r\n    // Navigation helpers for grading sessions\r\n    const nextStudentInSession = useCallback((saveType = 'draft') => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        const students = classList.students;\r\n\r\n        if (currentIndex < students.length - 1) {\r\n            const nextIndex = currentIndex + 1;\r\n            const nextStudent = students[nextIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: nextIndex,\r\n                currentStudent: nextStudent,\r\n                gradedStudents: [...prev.gradedStudents, currentStudent.id]\r\n            }));\r\n\r\n            setCurrentStudent(nextStudent);\r\n            return true;\r\n        }\r\n\r\n        // End of session\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            active: false,\r\n            gradedStudents: [...prev.gradedStudents, currentStudent.id]\r\n        }));\r\n        return false;\r\n    }, [gradingSession, classList, currentStudent]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        if (currentIndex > 0) {\r\n            const prevIndex = currentIndex - 1;\r\n            const prevStudent = classList.students[prevIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: prevIndex,\r\n                currentStudent: prevStudent\r\n            }));\r\n\r\n            setCurrentStudent(prevStudent);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [gradingSession, classList]);\r\n\r\n    // **FIXED: Enhanced initializeGradingSession function**\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        // 1. Guard against missing or empty class list\r\n        if (!classListData || !classListData.students?.length) {\r\n            console.warn('‚ö†Ô∏è Cannot initialize grading session: No students found');\r\n            return false;\r\n        }\r\n\r\n        // 2. Extract the students array and the imported course metadata\r\n        const { students, courseMetadata } = classListData;\r\n\r\n        // 3. Pick the first student to start the session\r\n        const firstStudent = students[0];\r\n\r\n        // 4. Build and set the grading session state\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // 5. Prefill the grading form: student + course details\r\n        setGradingData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            },\r\n            course: {\r\n                code: courseMetadata?.courseCode ?? prev.course.code,\r\n                name: courseMetadata?.courseName ?? prev.course.name,\r\n                instructor: courseMetadata?.instructor ?? prev.course.instructor,\r\n                term: courseMetadata?.term ?? prev.course.term,\r\n            },\r\n            assignment: sharedCourseDetails?.assignment ?? prev.assignment\r\n        }));\r\n\r\n        console.log(`üöÄ Grading session started for ${students.length} students`);\r\n        return true;\r\n    }, [sharedCourseDetails]);\r\n\r\n    // Update grading session\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    // Rubric management functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((details) => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setSharedCourseDetails(details);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    // Clear functions\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            assignmentInfo: {\r\n                title: '',\r\n                description: '',\r\n                weight: 25,\r\n                passingThreshold: 60,\r\n                totalPoints: 100\r\n            },\r\n            rubricLevels: [\r\n                { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n                { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n                { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n                { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n                { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n                { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n                { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n            ],\r\n            criteria: []\r\n        });\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n        clearSharedRubric();\r\n        setSharedCourseDetails(null);\r\n        setCurrentStudent(null);\r\n        setGradingSession({\r\n            active: false,\r\n            startTime: null,\r\n            gradedStudents: [],\r\n            totalStudents: 0,\r\n            currentStudent: null,\r\n            currentStudentIndex: 0\r\n        });\r\n    }, [clearGradingFormData, clearRubricFormData, clearSharedRubric]);\r\n\r\n    // Session management\r\n    const exportSession = useCallback(() => {\r\n        const sessionData = {\r\n            activeTab,\r\n            sharedRubric,\r\n            sharedCourseDetails,\r\n            gradingData,\r\n            classList,\r\n            currentStudent,\r\n            gradingSession,\r\n            rubricFormData,\r\n            drafts,\r\n            finalGrades,\r\n            exportedAt: new Date().toISOString()\r\n        };\r\n        return sessionData;\r\n    }, [activeTab, sharedRubric, sharedCourseDetails, gradingData, classList, currentStudent, gradingSession, rubricFormData, drafts, finalGrades]);\r\n\r\n    const importSession = useCallback((sessionData) => {\r\n        try {\r\n            if (sessionData.activeTab) setActiveTab(sessionData.activeTab);\r\n            if (sessionData.sharedRubric) setSharedRubric(sessionData.sharedRubric);\r\n            if (sessionData.sharedCourseDetails) setSharedCourseDetails(sessionData.sharedCourseDetails);\r\n            if (sessionData.gradingData) setGradingData(sessionData.gradingData);\r\n            if (sessionData.classList) setClassList(sessionData.classList);\r\n            if (sessionData.currentStudent) setCurrentStudent(sessionData.currentStudent);\r\n            if (sessionData.gradingSession) setGradingSession(sessionData.gradingSession);\r\n            if (sessionData.rubricFormData) setRubricFormData(sessionData.rubricFormData);\r\n            if (sessionData.drafts) setDrafts(sessionData.drafts);\r\n            if (sessionData.finalGrades) setFinalGrades(sessionData.finalGrades);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Failed to import session:', error);\r\n            return false;\r\n        }\r\n    }, []);\r\n\r\n    // Legacy compatibility\r\n    const updatePersistentFormData = useCallback((data) => {\r\n        setPersistentFormData(prev => ({ ...prev, ...data }));\r\n    }, []);\r\n\r\n    // **FIXED: Complete value object with all functions**\r\n    const value = {\r\n        // Core state\r\n        activeTab,\r\n        setActiveTab,\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n        gradingData,\r\n        setGradingData,\r\n\r\n        // Grading data update functions\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicyInfo,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Draft and Final Grade Management - ENHANCED\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Class management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Utility functions\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n        clearGradingFormData,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Session management\r\n        exportSession,\r\n        importSession,\r\n\r\n        // Legacy compatibility\r\n        persistentFormData,\r\n        updatePersistentFormData\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,iBAAiB,gBAAGN,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMO,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGR,UAAU,CAACK,iBAAiB,CAAC;EAC7C,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC9E;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,aAAa;AAQ1B,OAAO,MAAMI,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,qBAAqB,CAAC;EACjE,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC;IAC3CoB,OAAO,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,EAAE,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAG,CAAC;IACxCC,MAAM,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEJ,IAAI,EAAE,EAAE;MAAEK,UAAU,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IACxDC,UAAU,EAAE;MAAEP,IAAI,EAAE,EAAE;MAAEQ,OAAO,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAI,CAAC;IACrDC,QAAQ,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,SAAS,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAG,CAAC;IAC1DC,WAAW,EAAE,EAAE;IACfC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,cAAc,EAAE;IAAM,CAAC;IACpDC,aAAa,EAAE,CAAC,CAAC;IACjBC,QAAQ,EAAE;MACNC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE,KAAK;MACjBC,gBAAgB,EAAE;IACtB;EACJ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACgD,WAAW,EAAEC,cAAc,CAAC,GAAGjD,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAElD;EACA,MAAM,CAACkD,SAAS,EAAEC,YAAY,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACoD,cAAc,EAAEC,iBAAiB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAM,CAACsD,cAAc,EAAEC,iBAAiB,CAAC,GAAGvD,QAAQ,CAAC;IACjDwD,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,IAAI;IACfC,cAAc,EAAE,EAAE;IAClBC,aAAa,EAAE,CAAC;IAChBP,cAAc,EAAE,IAAI;IACpBQ,mBAAmB,EAAE;EACzB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG9D,QAAQ,CAAC;IACjD+D,cAAc,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,EAAE;MACVC,gBAAgB,EAAE,EAAE;MACpBC,WAAW,EAAE;IACjB,CAAC;IACDC,YAAY,EAAE,CACV;MAAE/B,KAAK,EAAE,YAAY;MAAEjB,IAAI,EAAE,YAAY;MAAE4C,WAAW,EAAE,2BAA2B;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAE,CAAC,EACtH;MAAEjC,KAAK,EAAE,cAAc;MAAEjB,IAAI,EAAE,cAAc;MAAE4C,WAAW,EAAE,yBAAyB;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAI,CAAC,EAC1H;MAAEjC,KAAK,EAAE,YAAY;MAAEjB,IAAI,EAAE,YAAY;MAAE4C,WAAW,EAAE,uBAAuB;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAK,CAAC,EACrH;MAAEjC,KAAK,EAAE,YAAY;MAAEjB,IAAI,EAAE,mBAAmB;MAAE4C,WAAW,EAAE,yBAAyB;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAI,CAAC,EAC7H;MAAEjC,KAAK,EAAE,UAAU;MAAEjB,IAAI,EAAE,UAAU;MAAE4C,WAAW,EAAE,6BAA6B;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAK,CAAC,EACvH;MAAEjC,KAAK,EAAE,cAAc;MAAEjB,IAAI,EAAE,cAAc;MAAE4C,WAAW,EAAE,6BAA6B;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAK,CAAC,EAC/H;MAAEjC,KAAK,EAAE,aAAa;MAAEjB,IAAI,EAAE,aAAa;MAAE4C,WAAW,EAAE,kCAAkC;MAAEK,KAAK,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAI,CAAC,CACpI;IACDC,QAAQ,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1E,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAM2E,SAAS,GAAG1E,WAAW,CAAC,CAAC2E,SAAS,EAAEC,IAAI,KAAK;IAC/C9B,SAAS,CAAC+B,IAAI,KAAK;MACf,GAAGA,IAAI;MACP,CAACF,SAAS,GAAG;QACT,GAAGC,IAAI;QACPE,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACjCC,IAAI,EAAE;MACV;IACJ,CAAC,CAAC,CAAC;IACHC,OAAO,CAACC,GAAG,CAAC,8BAA8BR,SAAS,EAAE,CAAC;EAC1D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,SAAS,GAAGpF,WAAW,CAAE2E,SAAS,IAAK;IACzC,OAAO9B,MAAM,CAAC8B,SAAS,CAAC,IAAI,IAAI;EACpC,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;EAEZ,MAAMwC,cAAc,GAAGrF,WAAW,CAAC,CAAC2E,SAAS,EAAEC,IAAI,KAAK;IACpD5B,cAAc,CAAC6B,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP,CAACF,SAAS,GAAG;QACT,GAAGC,IAAI;QACPE,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACjCM,WAAW,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACrCC,IAAI,EAAE;MACV;IACJ,CAAC,CAAC,CAAC;;IAEH;IACAnC,SAAS,CAAC+B,IAAI,IAAI;MACd,MAAMU,SAAS,GAAG;QAAE,GAAGV;MAAK,CAAC;MAC7B,OAAOU,SAAS,CAACZ,SAAS,CAAC;MAC3B,OAAOY,SAAS;IACpB,CAAC,CAAC;IAEFL,OAAO,CAACC,GAAG,CAAC,mCAAmCR,SAAS,EAAE,CAAC;EAC/D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,cAAc,GAAGxF,WAAW,CAAE2E,SAAS,IAAK;IAC9C,OAAO5B,WAAW,CAAC4B,SAAS,CAAC,IAAI,IAAI;EACzC,CAAC,EAAE,CAAC5B,WAAW,CAAC,CAAC;EAEjB,MAAM0C,cAAc,GAAGzF,WAAW,CAAE2E,SAAS,IAAK;IAC9C,IAAI5B,WAAW,CAAC4B,SAAS,CAAC,EAAE,OAAO,OAAO;IAC1C,IAAI9B,MAAM,CAAC8B,SAAS,CAAC,EAAE,OAAO,OAAO;IACrC,OAAO,aAAa;EACxB,CAAC,EAAE,CAAC5B,WAAW,EAAEF,MAAM,CAAC,CAAC;EAEzB,MAAM6C,QAAQ,GAAG1F,WAAW,CAAE2E,SAAS,IAAK;IACxC,OAAO,CAAC,CAAC9B,MAAM,CAAC8B,SAAS,CAAC;EAC9B,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;EAEZ,MAAM8C,aAAa,GAAG3F,WAAW,CAAE2E,SAAS,IAAK;IAC7C,MAAMiB,KAAK,GAAG/C,MAAM,CAAC8B,SAAS,CAAC;IAC/B,IAAIiB,KAAK,EAAE;MACPP,cAAc,CAACV,SAAS,EAAEiB,KAAK,CAAC;MAChC,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC,EAAE,CAAC/C,MAAM,EAAEwC,cAAc,CAAC,CAAC;EAE5B,MAAMQ,WAAW,GAAG7F,WAAW,CAAE2E,SAAS,IAAK;IAC3C,MAAMmB,UAAU,GAAG/C,WAAW,CAAC4B,SAAS,CAAC;IACzC,IAAImB,UAAU,EAAE;MACZ;MACAhD,SAAS,CAAC+B,IAAI,KAAK;QACf,GAAGA,IAAI;QACP,CAACF,SAAS,GAAG;UACT,GAAGmB,UAAU;UACbhB,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UACjCC,IAAI,EAAE;QACV;MACJ,CAAC,CAAC,CAAC;;MAEH;MACAjC,cAAc,CAAC6B,IAAI,IAAI;QACnB,MAAMkB,cAAc,GAAG;UAAE,GAAGlB;QAAK,CAAC;QAClC,OAAOkB,cAAc,CAACpB,SAAS,CAAC;QAChC,OAAOoB,cAAc;MACzB,CAAC,CAAC;MAEFb,OAAO,CAACC,GAAG,CAAC,iCAAiCR,SAAS,EAAE,CAAC;MACzD,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC,EAAE,CAAC5B,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMiD,iBAAiB,GAAGhG,WAAW,CAAEiG,WAAW,IAAK;IACnD/E,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP1D,OAAO,EAAE;QAAE,GAAG0D,IAAI,CAAC1D,OAAO;QAAE,GAAG8E;MAAY;IAC/C,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,gBAAgB,GAAGlG,WAAW,CAAEmG,UAAU,IAAK;IACjDjF,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPtD,MAAM,EAAE;QAAE,GAAGsD,IAAI,CAACtD,MAAM;QAAE,GAAG4E;MAAW;IAC5C,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,oBAAoB,GAAGpG,WAAW,CAAE8D,cAAc,IAAK;IACzD5C,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPlD,UAAU,EAAE;QAAE,GAAGkD,IAAI,CAAClD,UAAU;QAAE,GAAGmC;MAAe;IACxD,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuC,kBAAkB,GAAGrG,WAAW,CAAEsG,YAAY,IAAK;IACrDpF,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP/C,QAAQ,EAAE;QAAE,GAAG+C,IAAI,CAAC/C,QAAQ;QAAE,GAAGwE;MAAa;IAClD,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAGvG,WAAW,CAAEkC,WAAW,IAAK;IACnDhB,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP3C;IACJ,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsE,gBAAgB,GAAGxG,WAAW,CAAEmC,UAAU,IAAK;IACjDjB,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP1C;IACJ,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsE,oBAAoB,GAAGzG,WAAW,CAAE0G,cAAc,IAAK;IACzDxF,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPzC,UAAU,EAAE;QAAE,GAAGyC,IAAI,CAACzC,UAAU;QAAE,GAAGsE;MAAe;IACxD,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,mBAAmB,GAAG3G,WAAW,CAAEuC,aAAa,IAAK;IACvDrB,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPtC,aAAa,EAAE;QAAE,GAAGsC,IAAI,CAACtC,aAAa;QAAE,GAAGA;MAAc;IAC7D,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMqE,cAAc,GAAG5G,WAAW,CAAEwC,QAAQ,IAAK;IAC7CtB,cAAc,CAAC2D,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPrC,QAAQ,EAAE;QAAE,GAAGqC,IAAI,CAACrC,QAAQ;QAAE,GAAGA;MAAS;IAC9C,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMqE,oBAAoB,GAAG7G,WAAW,CAAC,CAAC8G,QAAQ,GAAG,OAAO,KAAK;IAC7D,IAAI,EAACzD,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,MAAM,KAAI,CAACN,SAAS,EAAE,OAAO,KAAK;IAEvD,MAAM8D,YAAY,GAAG1D,cAAc,CAACM,mBAAmB;IACvD,MAAMqD,QAAQ,GAAG/D,SAAS,CAAC+D,QAAQ;IAEnC,IAAID,YAAY,GAAGC,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,SAAS,GAAGH,YAAY,GAAG,CAAC;MAClC,MAAMI,WAAW,GAAGH,QAAQ,CAACE,SAAS,CAAC;MAEvC5D,iBAAiB,CAACuB,IAAI,KAAK;QACvB,GAAGA,IAAI;QACPlB,mBAAmB,EAAEuD,SAAS;QAC9B/D,cAAc,EAAEgE,WAAW;QAC3B1D,cAAc,EAAE,CAAC,GAAGoB,IAAI,CAACpB,cAAc,EAAEN,cAAc,CAAC9B,EAAE;MAC9D,CAAC,CAAC,CAAC;MAEH+B,iBAAiB,CAAC+D,WAAW,CAAC;MAC9B,OAAO,IAAI;IACf;;IAEA;IACA7D,iBAAiB,CAACuB,IAAI,KAAK;MACvB,GAAGA,IAAI;MACPtB,MAAM,EAAE,KAAK;MACbE,cAAc,EAAE,CAAC,GAAGoB,IAAI,CAACpB,cAAc,EAAEN,cAAc,CAAC9B,EAAE;IAC9D,CAAC,CAAC,CAAC;IACH,OAAO,KAAK;EAChB,CAAC,EAAE,CAACgC,cAAc,EAAEJ,SAAS,EAAEE,cAAc,CAAC,CAAC;EAE/C,MAAMiE,wBAAwB,GAAGpH,WAAW,CAAC,MAAM;IAC/C,IAAI,EAACqD,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEE,MAAM,KAAI,CAACN,SAAS,EAAE,OAAO,KAAK;IAEvD,MAAM8D,YAAY,GAAG1D,cAAc,CAACM,mBAAmB;IACvD,IAAIoD,YAAY,GAAG,CAAC,EAAE;MAClB,MAAMM,SAAS,GAAGN,YAAY,GAAG,CAAC;MAClC,MAAMO,WAAW,GAAGrE,SAAS,CAAC+D,QAAQ,CAACK,SAAS,CAAC;MAEjD/D,iBAAiB,CAACuB,IAAI,KAAK;QACvB,GAAGA,IAAI;QACPlB,mBAAmB,EAAE0D,SAAS;QAC9BlE,cAAc,EAAEmE;MACpB,CAAC,CAAC,CAAC;MAEHlE,iBAAiB,CAACkE,WAAW,CAAC;MAC9B,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC,EAAE,CAACjE,cAAc,EAAEJ,SAAS,CAAC,CAAC;;EAE/B;EACA,MAAMsE,wBAAwB,GAAGvH,WAAW,CAAEwH,aAAa,IAAK;IAAA,IAAAC,qBAAA;IAC5D;IACA,IAAI,CAACD,aAAa,IAAI,GAAAC,qBAAA,GAACD,aAAa,CAACR,QAAQ,cAAAS,qBAAA,eAAtBA,qBAAA,CAAwBR,MAAM,GAAE;MACnD/B,OAAO,CAACwC,IAAI,CAAC,yDAAyD,CAAC;MACvE,OAAO,KAAK;IAChB;;IAEA;IACA,MAAM;MAAEV,QAAQ;MAAEW;IAAe,CAAC,GAAGH,aAAa;;IAElD;IACA,MAAMI,YAAY,GAAGZ,QAAQ,CAAC,CAAC,CAAC;;IAEhC;IACA,MAAMa,OAAO,GAAG;MACZtE,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAIuB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCvB,cAAc,EAAE,EAAE;MAClBC,aAAa,EAAEsD,QAAQ,CAACC,MAAM;MAC9B9D,cAAc,EAAEyE,YAAY;MAC5BjE,mBAAmB,EAAE;IACzB,CAAC;IACDL,iBAAiB,CAACuE,OAAO,CAAC;IAC1BzE,iBAAiB,CAACwE,YAAY,CAAC;;IAE/B;IACA1G,cAAc,CAAC2D,IAAI;MAAA,IAAAiD,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA;MAAA,OAAK;QACpB,GAAGrD,IAAI;QACP1D,OAAO,EAAE;UACLC,IAAI,EAAEwG,YAAY,CAACxG,IAAI;UACvBC,EAAE,EAAEuG,YAAY,CAACvG,EAAE;UACnBC,KAAK,EAAEsG,YAAY,CAACtG;QACxB,CAAC;QACDC,MAAM,EAAE;UACJC,IAAI,GAAAsG,qBAAA,GAAEH,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEQ,UAAU,cAAAL,qBAAA,cAAAA,qBAAA,GAAIjD,IAAI,CAACtD,MAAM,CAACC,IAAI;UACpDJ,IAAI,GAAA2G,sBAAA,GAAEJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAES,UAAU,cAAAL,sBAAA,cAAAA,sBAAA,GAAIlD,IAAI,CAACtD,MAAM,CAACH,IAAI;UACpDK,UAAU,GAAAuG,qBAAA,GAAEL,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAElG,UAAU,cAAAuG,qBAAA,cAAAA,qBAAA,GAAInD,IAAI,CAACtD,MAAM,CAACE,UAAU;UAChEC,IAAI,GAAAuG,oBAAA,GAAEN,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEjG,IAAI,cAAAuG,oBAAA,cAAAA,oBAAA,GAAIpD,IAAI,CAACtD,MAAM,CAACG;QAC9C,CAAC;QACDC,UAAU,GAAAuG,qBAAA,GAAEnH,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEY,UAAU,cAAAuG,qBAAA,cAAAA,qBAAA,GAAIrD,IAAI,CAAClD;MACxD,CAAC;IAAA,CAAC,CAAC;IAEHuD,OAAO,CAACC,GAAG,CAAC,kCAAkC6B,QAAQ,CAACC,MAAM,WAAW,CAAC;IACzE,OAAO,IAAI;EACf,CAAC,EAAE,CAAClG,mBAAmB,CAAC,CAAC;;EAEzB;EACA,MAAMsH,oBAAoB,GAAGrI,WAAW,CAAEsI,OAAO,IAAK;IAClDhF,iBAAiB,CAACuB,IAAI,KAAK;MACvB,GAAGA,IAAI;MACP,GAAGyD;IACP,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,uBAAuB,GAAGvI,WAAW,CAAC,MAAM;IAC9C,IAAI4D,cAAc,EAAE;MAChB9C,eAAe,CAAC8C,cAAc,CAAC;MAC/BhD,YAAY,CAAC,cAAc,CAAC;IAChC;EACJ,CAAC,EAAE,CAACgD,cAAc,CAAC,CAAC;EAEpB,MAAM4E,kCAAkC,GAAGxI,WAAW,CAAEyI,OAAO,IAAK;IAChE,IAAI7E,cAAc,EAAE;MAChB9C,eAAe,CAAC8C,cAAc,CAAC;MAC/B5C,sBAAsB,CAACyH,OAAO,CAAC;MAC/B7H,YAAY,CAAC,cAAc,CAAC;IAChC;EACJ,CAAC,EAAE,CAACgD,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAM8E,iBAAiB,GAAG1I,WAAW,CAAC,MAAM;IACxCc,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6H,oBAAoB,GAAG3I,WAAW,CAAC,MAAM;IAC3CkB,cAAc,CAAC;MACXC,OAAO,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,EAAE,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC;MACxCC,MAAM,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEJ,IAAI,EAAE,EAAE;QAAEK,UAAU,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAC;MACxDC,UAAU,EAAE;QAAEP,IAAI,EAAE,EAAE;QAAEQ,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAI,CAAC;MACrDC,QAAQ,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE,EAAE;QAAEC,YAAY,EAAE;MAAG,CAAC;MAC1DC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,UAAU,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAM,CAAC;MACpDC,aAAa,EAAE,CAAC,CAAC;MACjBC,QAAQ,EAAE;QACNC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,UAAU,EAAE,KAAK;QACjBC,gBAAgB,EAAE;MACtB;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgG,mBAAmB,GAAG5I,WAAW,CAAC,MAAM;IAC1C6D,iBAAiB,CAAC;MACdC,cAAc,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE,EAAE;QACVC,gBAAgB,EAAE,EAAE;QACpBC,WAAW,EAAE;MACjB,CAAC;MACDC,YAAY,EAAE,CACV;QAAE/B,KAAK,EAAE,YAAY;QAAEjB,IAAI,EAAE,YAAY;QAAE4C,WAAW,EAAE,2BAA2B;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAE,CAAC,EACtH;QAAEjC,KAAK,EAAE,cAAc;QAAEjB,IAAI,EAAE,cAAc;QAAE4C,WAAW,EAAE,yBAAyB;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAI,CAAC,EAC1H;QAAEjC,KAAK,EAAE,YAAY;QAAEjB,IAAI,EAAE,YAAY;QAAE4C,WAAW,EAAE,uBAAuB;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAK,CAAC,EACrH;QAAEjC,KAAK,EAAE,YAAY;QAAEjB,IAAI,EAAE,mBAAmB;QAAE4C,WAAW,EAAE,yBAAyB;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAI,CAAC,EAC7H;QAAEjC,KAAK,EAAE,UAAU;QAAEjB,IAAI,EAAE,UAAU;QAAE4C,WAAW,EAAE,6BAA6B;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAK,CAAC,EACvH;QAAEjC,KAAK,EAAE,cAAc;QAAEjB,IAAI,EAAE,cAAc;QAAE4C,WAAW,EAAE,6BAA6B;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAK,CAAC,EAC/H;QAAEjC,KAAK,EAAE,aAAa;QAAEjB,IAAI,EAAE,aAAa;QAAE4C,WAAW,EAAE,kCAAkC;QAAEK,KAAK,EAAE,SAAS;QAAEC,UAAU,EAAE;MAAI,CAAC,CACpI;MACDC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsE,YAAY,GAAG7I,WAAW,CAAC,MAAM;IACnC2I,oBAAoB,CAAC,CAAC;IACtBC,mBAAmB,CAAC,CAAC;IACrBF,iBAAiB,CAAC,CAAC;IACnB1H,sBAAsB,CAAC,IAAI,CAAC;IAC5BoC,iBAAiB,CAAC,IAAI,CAAC;IACvBE,iBAAiB,CAAC;MACdC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE,EAAE;MAClBC,aAAa,EAAE,CAAC;MAChBP,cAAc,EAAE,IAAI;MACpBQ,mBAAmB,EAAE;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,CAACgF,oBAAoB,EAAEC,mBAAmB,EAAEF,iBAAiB,CAAC,CAAC;;EAElE;EACA,MAAMI,aAAa,GAAG9I,WAAW,CAAC,MAAM;IACpC,MAAM+I,WAAW,GAAG;MAChBpI,SAAS;MACTE,YAAY;MACZE,mBAAmB;MACnBE,WAAW;MACXgC,SAAS;MACTE,cAAc;MACdE,cAAc;MACdO,cAAc;MACdf,MAAM;MACNE,WAAW;MACXiG,UAAU,EAAE,IAAIjE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACvC,CAAC;IACD,OAAO+D,WAAW;EACtB,CAAC,EAAE,CAACpI,SAAS,EAAEE,YAAY,EAAEE,mBAAmB,EAAEE,WAAW,EAAEgC,SAAS,EAAEE,cAAc,EAAEE,cAAc,EAAEO,cAAc,EAAEf,MAAM,EAAEE,WAAW,CAAC,CAAC;EAE/I,MAAMkG,aAAa,GAAGjJ,WAAW,CAAE+I,WAAW,IAAK;IAC/C,IAAI;MACA,IAAIA,WAAW,CAACpI,SAAS,EAAEC,YAAY,CAACmI,WAAW,CAACpI,SAAS,CAAC;MAC9D,IAAIoI,WAAW,CAAClI,YAAY,EAAEC,eAAe,CAACiI,WAAW,CAAClI,YAAY,CAAC;MACvE,IAAIkI,WAAW,CAAChI,mBAAmB,EAAEC,sBAAsB,CAAC+H,WAAW,CAAChI,mBAAmB,CAAC;MAC5F,IAAIgI,WAAW,CAAC9H,WAAW,EAAEC,cAAc,CAAC6H,WAAW,CAAC9H,WAAW,CAAC;MACpE,IAAI8H,WAAW,CAAC9F,SAAS,EAAEC,YAAY,CAAC6F,WAAW,CAAC9F,SAAS,CAAC;MAC9D,IAAI8F,WAAW,CAAC5F,cAAc,EAAEC,iBAAiB,CAAC2F,WAAW,CAAC5F,cAAc,CAAC;MAC7E,IAAI4F,WAAW,CAAC1F,cAAc,EAAEC,iBAAiB,CAACyF,WAAW,CAAC1F,cAAc,CAAC;MAC7E,IAAI0F,WAAW,CAACnF,cAAc,EAAEC,iBAAiB,CAACkF,WAAW,CAACnF,cAAc,CAAC;MAC7E,IAAImF,WAAW,CAAClG,MAAM,EAAEC,SAAS,CAACiG,WAAW,CAAClG,MAAM,CAAC;MACrD,IAAIkG,WAAW,CAAChG,WAAW,EAAEC,cAAc,CAAC+F,WAAW,CAAChG,WAAW,CAAC;MACpE,OAAO,IAAI;IACf,CAAC,CAAC,OAAOmG,KAAK,EAAE;MACZhE,OAAO,CAACgE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,KAAK;IAChB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,wBAAwB,GAAGnJ,WAAW,CAAE4E,IAAI,IAAK;IACnDH,qBAAqB,CAACI,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,GAAGD;IAAK,CAAC,CAAC,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMwE,KAAK,GAAG;IACV;IACAzI,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC,eAAe;IACfC,mBAAmB;IACnBC,sBAAsB;IACtBC,WAAW;IACXC,cAAc;IAEd;IACA8E,iBAAiB;IACjBE,gBAAgB;IAChBE,oBAAoB;IACpBC,kBAAkB;IAClBE,iBAAiB;IACjBC,gBAAgB;IAChBC,oBAAoB;IACpBE,mBAAmB;IACnBC,cAAc;IAEd;IACA/D,MAAM;IACNE,WAAW;IACX2B,SAAS;IACTU,SAAS;IACTC,cAAc;IACdG,cAAc;IACdC,cAAc;IACdC,QAAQ;IACRC,aAAa;IACbE,WAAW;IAEX;IACA5C,SAAS;IACTC,YAAY;IACZC,cAAc;IACdC,iBAAiB;IAEjB;IACAC,cAAc;IACdC,iBAAiB;IACjBuD,oBAAoB;IACpBO,wBAAwB;IACxBiB,oBAAoB;IACpBd,wBAAwB;IAExB;IACA3D,cAAc;IACdC,iBAAiB;IAEjB;IACA0E,uBAAuB;IACvBC,kCAAkC;IAClCE,iBAAiB;IACjBC,oBAAoB;IACpBC,mBAAmB;IACnBC,YAAY;IAEZ;IACAC,aAAa;IACbG,aAAa;IAEb;IACAzE,kBAAkB;IAClB2E;EACJ,CAAC;EAED,oBACIjJ,OAAA,CAACC,iBAAiB,CAACkJ,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3I,QAAA,EACpCA;EAAQ;IAAA6I,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAErC,CAAC;AAAC/I,GAAA,CApgBWF,kBAAkB;AAAAkJ,EAAA,GAAlBlJ,kBAAkB;AAAA,IAAAkJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}