{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Updated SharedContext.js with Enhanced initializeGradingSession function\n// This ensures proper course information transfer and rubric integration\n\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [activeTab, setActiveTab] = useState('assignment-prompt-generator');\n\n  // AI Prompt Generator state (for rubrics)\n  const [aiPromptFormData, setAIPromptFormData] = useState(null);\n\n  // Assignment Prompt Generator state\n  const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\n\n  // Function to initialize assignment prompt form data\n  const initializeAssignmentPromptFormData = useCallback(() => {\n    setAssignmentPromptFormData({\n      title: '',\n      learningObjectives: '',\n      taskDescription: '',\n      constraints: ''\n    });\n  }, []);\n\n  // Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ENHANCED: Separate storage for draft and final grades\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // Batch grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Form data states\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // Rubric form data state (for RubricCreator)\n  const [rubricFormData, setRubricFormData] = useState(null);\n\n  // ENHANCED: Initialize Grading Session with proper course info transfer\n  const initializeGradingSession = useCallback(classListData => {\n    var _classListData$studen;\n    console.log('🚀 initializeGradingSession called with:', classListData);\n\n    // 1. Guard against missing or empty class list\n    if (!classListData || !((_classListData$studen = classListData.students) !== null && _classListData$studen !== void 0 && _classListData$studen.length)) {\n      console.error('❌ Cannot initialize grading session: No class list or empty student list');\n      return false;\n    }\n\n    // 2. Extract the students array and the imported course metadata\n    const {\n      students,\n      courseMetadata\n    } = classListData;\n    const firstStudent = students[0];\n    console.log('📋 Course metadata:', courseMetadata);\n    console.log('👤 First student:', firstStudent);\n\n    // 3. Build and set the grading session state\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // 4. ENHANCED: Prefill the grading form with student + course details from class list\n    const courseInfo = {\n      code: (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseCode) || (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseName) || '',\n      name: (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.courseName) || '',\n      instructor: (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.instructor) || (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.professors) || '',\n      term: (courseMetadata === null || courseMetadata === void 0 ? void 0 : courseMetadata.term) || ''\n    };\n\n    // 5. ENHANCED: Use assignment info from rubric if available\n    const assignmentInfo = sharedRubric !== null && sharedRubric !== void 0 && sharedRubric.assignmentInfo ? {\n      name: sharedRubric.assignmentInfo.title || '',\n      dueDate: sharedRubric.assignmentInfo.dueDate || '',\n      maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\n    } : {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    };\n\n    // 6. Update the grading form data\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: firstStudent.name || '',\n        id: firstStudent.id || '',\n        email: firstStudent.email || ''\n      },\n      course: courseInfo,\n      assignment: assignmentInfo,\n      // Reset other fields for new grading session\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: !!sharedRubric\n      }\n    }));\n    console.log('✅ Grading session initialized:', {\n      sessionActive: true,\n      totalStudents: students.length,\n      firstStudent: firstStudent.name,\n      courseInfo: courseInfo,\n      assignmentInfo: assignmentInfo,\n      rubricLoaded: !!sharedRubric\n    });\n    return true;\n  }, [sharedRubric]);\n\n  // Navigation helpers for grading sessions\n  const nextStudentInSession = useCallback((saveType = 'draft') => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    const students = classList.students;\n    if (currentIndex < students.length - 1) {\n      const nextIndex = currentIndex + 1;\n      const nextStudent = students[nextIndex];\n\n      // Update session state\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: nextIndex,\n        currentStudent: nextStudent,\n        gradedStudents: [...prev.gradedStudents, currentStudent === null || currentStudent === void 0 ? void 0 : currentStudent.id]\n      }));\n      setCurrentStudent(nextStudent);\n\n      // ENHANCED: Update grading form with next student info and preserve course/assignment data\n      setGradingFormData(prev => ({\n        ...prev,\n        student: {\n          name: nextStudent.name || '',\n          id: nextStudent.id || '',\n          email: nextStudent.email || ''\n        },\n        // Keep course and assignment info, reset grading-specific data\n        feedback: {\n          general: '',\n          strengths: '',\n          improvements: ''\n        },\n        attachments: [],\n        videoLinks: [],\n        latePolicy: {\n          level: 'none',\n          penaltyApplied: false\n        },\n        rubricGrading: {},\n        metadata: {\n          ...prev.metadata,\n          gradedBy: '',\n          gradedDate: ''\n        }\n      }));\n      console.log(`➡️ Moved to next student: ${nextStudent.name} (${nextIndex + 1}/${students.length})`);\n      return true;\n    }\n\n    // End of session\n    setGradingSession(prev => ({\n      ...prev,\n      active: false,\n      gradedStudents: [...prev.gradedStudents, currentStudent === null || currentStudent === void 0 ? void 0 : currentStudent.id]\n    }));\n    console.log('🏁 Grading session completed');\n    return false;\n  }, [gradingSession, classList, currentStudent]);\n  const previousStudentInSession = useCallback(() => {\n    if (!(gradingSession !== null && gradingSession !== void 0 && gradingSession.active) || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    if (currentIndex > 0) {\n      const prevIndex = currentIndex - 1;\n      const prevStudent = classList.students[prevIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: prevIndex,\n        currentStudent: prevStudent\n      }));\n      setCurrentStudent(prevStudent);\n\n      // ENHANCED: Update grading form with previous student info\n      setGradingFormData(prev => ({\n        ...prev,\n        student: {\n          name: prevStudent.name || '',\n          id: prevStudent.id || '',\n          email: prevStudent.email || ''\n        },\n        // Keep course and assignment info, reset grading-specific data\n        feedback: {\n          general: '',\n          strengths: '',\n          improvements: ''\n        },\n        attachments: [],\n        videoLinks: [],\n        latePolicy: {\n          level: 'none',\n          penaltyApplied: false\n        },\n        rubricGrading: {},\n        metadata: {\n          ...prev.metadata,\n          gradedBy: '',\n          gradedDate: ''\n        }\n      }));\n      console.log(`⬅️ Moved to previous student: ${prevStudent.name} (${prevIndex + 1}/${classList.students.length})`);\n      return true;\n    }\n    return false;\n  }, [gradingSession, classList]);\n\n  // Update grading session\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n\n  // Draft and Final Grade Management\n  const saveDraft = useCallback((studentId, gradeData) => {\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: {\n        ...gradeData,\n        savedAt: new Date().toISOString(),\n        type: 'draft'\n      }\n    }));\n    console.log(`💾 Draft saved for student: ${studentId}`);\n  }, []);\n  const loadDraft = useCallback(studentId => {\n    return drafts[studentId] || null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, gradeData) => {\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: {\n        ...gradeData,\n        finalizedAt: new Date().toISOString(),\n        type: 'final'\n      }\n    }));\n    // Remove from drafts when finalized\n    setDrafts(prev => {\n      const newDrafts = {\n        ...prev\n      };\n      delete newDrafts[studentId];\n      return newDrafts;\n    });\n    console.log(`✅ Final grade saved for student: ${studentId}`);\n  }, []);\n  const loadFinalGrade = useCallback(studentId => {\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n  const hasDraft = useCallback(studentId => {\n    return !!drafts[studentId];\n  }, [drafts]);\n  const finalizeGrade = useCallback(studentId => {\n    const draft = drafts[studentId];\n    if (draft) {\n      saveFinalGrade(studentId, draft);\n      return true;\n    }\n    return false;\n  }, [drafts, saveFinalGrade]);\n  const unlockGrade = useCallback(studentId => {\n    const finalGrade = finalGrades[studentId];\n    if (finalGrade) {\n      // Move final grade back to draft\n      setDrafts(prev => ({\n        ...prev,\n        [studentId]: {\n          ...finalGrade,\n          savedAt: new Date().toISOString(),\n          type: 'draft'\n        }\n      }));\n      // Remove from final grades\n      setFinalGrades(prev => {\n        const newFinals = {\n          ...prev\n        };\n        delete newFinals[studentId];\n        return newFinals;\n      });\n      console.log(`🔓 Grade unlocked for student: ${studentId}`);\n      return true;\n    }\n    return false;\n  }, [finalGrades]);\n\n  // Form update functions\n  const updateStudentInfo = useCallback(studentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...studentInfo\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(courseInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...courseInfo\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignmentInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignmentInfo\n      }\n    }));\n  }, []);\n  const updateFeedbackInfo = useCallback(feedbackInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      feedback: {\n        ...prev.feedback,\n        ...feedbackInfo\n      }\n    }));\n  }, []);\n  const updateAttachments = useCallback(attachments => {\n    setGradingFormData(prev => ({\n      ...prev,\n      attachments\n    }));\n  }, []);\n  const updateVideoLinks = useCallback(videoLinks => {\n    setGradingFormData(prev => ({\n      ...prev,\n      videoLinks\n    }));\n  }, []);\n  const updateLatePolicyInfo = useCallback(latePolicyInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      latePolicy: {\n        ...prev.latePolicy,\n        ...latePolicyInfo\n      }\n    }));\n  }, []);\n  const updateRubricGrading = useCallback(rubricGradingInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      rubricGrading: {\n        ...prev.rubricGrading,\n        ...rubricGradingInfo\n      }\n    }));\n  }, []);\n  const updateMetadata = useCallback(metadataInfo => {\n    setGradingFormData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        ...metadataInfo\n      }\n    }));\n  }, []);\n\n  // Rubric management functions\n  const transferRubricToGrading = useCallback(() => {\n    if (sharedRubric) {\n      setActiveTab('grading-tool');\n    }\n  }, [sharedRubric]);\n  const transferRubricToGradingWithDetails = useCallback(rubricData => {\n    if (rubricData) {\n      setSharedRubric(rubricData);\n      setActiveTab('grading-tool');\n    }\n  }, []);\n\n  // Clear functions\n  const clearSharedRubric = useCallback(() => {\n    setSharedRubric(null);\n  }, []);\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData(null);\n  }, []);\n  const clearAllData = useCallback(() => {\n    clearSharedRubric();\n    clearGradingFormData();\n    clearRubricFormData();\n    setClassList(null);\n    setCurrentStudent(null);\n    setGradingSession({\n      active: false,\n      startTime: null,\n      gradedStudents: [],\n      totalStudents: 0,\n      currentStudent: null,\n      currentStudentIndex: 0\n    });\n    setDrafts({});\n    setFinalGrades({});\n    setAIPromptFormData(null);\n    setAssignmentPromptFormData(null);\n  }, [clearSharedRubric, clearGradingFormData, clearRubricFormData]);\n\n  // Session management\n  const exportSession = useCallback(() => {\n    const sessionData = {\n      sharedRubric,\n      classList,\n      drafts,\n      finalGrades,\n      activeTab,\n      currentStudent,\n      gradingSession,\n      sharedCourseDetails,\n      aiPromptFormData,\n      assignmentPromptFormData\n    };\n    const dataStr = JSON.stringify(sessionData, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    const timestamp = new Date().toISOString().split('T')[0];\n    link.download = `assessment_session_${timestamp}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  }, [sharedRubric, classList, drafts, finalGrades, activeTab, currentStudent, gradingSession, sharedCourseDetails, aiPromptFormData, assignmentPromptFormData]);\n  const importSession = useCallback(sessionData => {\n    try {\n      if (sessionData && typeof sessionData === 'object') {\n        setSharedRubric(sessionData.sharedRubric || null);\n        setClassList(sessionData.classList || null);\n        setDrafts(sessionData.drafts || {});\n        setFinalGrades(sessionData.finalGrades || {});\n        setActiveTab(sessionData.activeTab || 'assignment-prompt-generator');\n        setCurrentStudent(sessionData.currentStudent || null);\n        setGradingSession(sessionData.gradingSession || {\n          active: false,\n          startTime: null,\n          gradedStudents: [],\n          totalStudents: 0,\n          currentStudent: null,\n          currentStudentIndex: 0\n        });\n        setSharedCourseDetails(sessionData.sharedCourseDetails || null);\n        setAIPromptFormData(sessionData.aiPromptFormData || null);\n        setAssignmentPromptFormData(sessionData.assignmentPromptFormData || null);\n        return true;\n      } else {\n        throw new Error('Invalid session data format');\n      }\n    } catch (error) {\n      console.error('Failed to import session:', error);\n      return false;\n    }\n  }, []);\n\n  // Context value\n  const value = {\n    // Core state\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    activeTab,\n    setActiveTab,\n    // AI and Assignment Prompt Generators\n    aiPromptFormData,\n    setAIPromptFormData,\n    assignmentPromptFormData,\n    setAssignmentPromptFormData,\n    initializeAssignmentPromptFormData,\n    // Grading form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    updateFeedbackInfo,\n    updateAttachments,\n    updateVideoLinks,\n    updateLatePolicyInfo,\n    updateRubricGrading,\n    updateMetadata,\n    // Draft and Final Grade Management\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Class management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Grading session\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric form data\n    rubricFormData,\n    setRubricFormData,\n    // Utility functions\n    transferRubricToGrading,\n    transferRubricToGradingWithDetails,\n    clearSharedRubric,\n    clearGradingFormData,\n    clearRubricFormData,\n    clearAllData,\n    // Session management\n    exportSession,\n    importSession,\n    // Legacy compatibility\n    persistentFormData: gradingFormData,\n    updatePersistentFormData: setGradingFormData\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 611,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"V0Rl4AjGvcpDxPg8aYw4YAwX1yI=\");\n_c = AssessmentProvider;\nexport default AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","aiPromptFormData","setAIPromptFormData","assignmentPromptFormData","setAssignmentPromptFormData","initializeAssignmentPromptFormData","title","learningObjectives","taskDescription","constraints","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","rubricFormData","setRubricFormData","initializeGradingSession","classListData","_classListData$studen","console","log","students","length","error","courseMetadata","firstStudent","session","Date","toISOString","courseInfo","courseCode","courseName","professors","assignmentInfo","totalPoints","prev","sessionActive","rubricLoaded","nextStudentInSession","saveType","currentIndex","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","updateGradingSession","updates","saveDraft","studentId","gradeData","savedAt","type","loadDraft","saveFinalGrade","finalizedAt","newDrafts","loadFinalGrade","getGradeStatus","hasDraft","finalizeGrade","draft","unlockGrade","finalGrade","newFinals","updateStudentInfo","studentInfo","updateCourseInfo","updateAssignmentInfo","updateFeedbackInfo","feedbackInfo","updateAttachments","updateVideoLinks","updateLatePolicyInfo","latePolicyInfo","updateRubricGrading","rubricGradingInfo","updateMetadata","metadataInfo","transferRubricToGrading","transferRubricToGradingWithDetails","rubricData","clearSharedRubric","clearGradingFormData","clearRubricFormData","clearAllData","exportSession","sessionData","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","timestamp","split","download","click","revokeObjectURL","importSession","value","gradingData","setGradingData","persistentFormData","updatePersistentFormData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// Updated SharedContext.js with Enhanced initializeGradingSession function\r\n// This ensures proper course information transfer and rubric integration\r\n\r\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('assignment-prompt-generator');\r\n\r\n    // AI Prompt Generator state (for rubrics)\r\n    const [aiPromptFormData, setAIPromptFormData] = useState(null);\r\n\r\n    // Assignment Prompt Generator state\r\n    const [assignmentPromptFormData, setAssignmentPromptFormData] = useState(null);\r\n\r\n    // Function to initialize assignment prompt form data\r\n    const initializeAssignmentPromptFormData = useCallback(() => {\r\n        setAssignmentPromptFormData({\r\n            title: '',\r\n            learningObjectives: '',\r\n            taskDescription: '',\r\n            constraints: '',\r\n        });\r\n    }, []);\r\n\r\n    // Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ENHANCED: Separate storage for draft and final grades\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // Batch grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Form data states\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // Rubric form data state (for RubricCreator)\r\n    const [rubricFormData, setRubricFormData] = useState(null);\r\n\r\n    // ENHANCED: Initialize Grading Session with proper course info transfer\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        console.log('🚀 initializeGradingSession called with:', classListData);\r\n\r\n        // 1. Guard against missing or empty class list\r\n        if (!classListData || !classListData.students?.length) {\r\n            console.error('❌ Cannot initialize grading session: No class list or empty student list');\r\n            return false;\r\n        }\r\n\r\n        // 2. Extract the students array and the imported course metadata\r\n        const { students, courseMetadata } = classListData;\r\n        const firstStudent = students[0];\r\n\r\n        console.log('📋 Course metadata:', courseMetadata);\r\n        console.log('👤 First student:', firstStudent);\r\n\r\n        // 3. Build and set the grading session state\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // 4. ENHANCED: Prefill the grading form with student + course details from class list\r\n        const courseInfo = {\r\n            code: courseMetadata?.courseCode || courseMetadata?.courseName || '',\r\n            name: courseMetadata?.courseName || '',\r\n            instructor: courseMetadata?.instructor || courseMetadata?.professors || '',\r\n            term: courseMetadata?.term || ''\r\n        };\r\n\r\n        // 5. ENHANCED: Use assignment info from rubric if available\r\n        const assignmentInfo = sharedRubric?.assignmentInfo ? {\r\n            name: sharedRubric.assignmentInfo.title || '',\r\n            dueDate: sharedRubric.assignmentInfo.dueDate || '',\r\n            maxPoints: sharedRubric.assignmentInfo.totalPoints || 100\r\n        } : {\r\n            name: '',\r\n            dueDate: '',\r\n            maxPoints: 100\r\n        };\r\n\r\n        // 6. Update the grading form data\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name || '',\r\n                id: firstStudent.id || '',\r\n                email: firstStudent.email || ''\r\n            },\r\n            course: courseInfo,\r\n            assignment: assignmentInfo,\r\n            // Reset other fields for new grading session\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: !!sharedRubric\r\n            }\r\n        }));\r\n\r\n        console.log('✅ Grading session initialized:', {\r\n            sessionActive: true,\r\n            totalStudents: students.length,\r\n            firstStudent: firstStudent.name,\r\n            courseInfo: courseInfo,\r\n            assignmentInfo: assignmentInfo,\r\n            rubricLoaded: !!sharedRubric\r\n        });\r\n\r\n        return true;\r\n    }, [sharedRubric]);\r\n\r\n    // Navigation helpers for grading sessions\r\n    const nextStudentInSession = useCallback((saveType = 'draft') => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        const students = classList.students;\r\n\r\n        if (currentIndex < students.length - 1) {\r\n            const nextIndex = currentIndex + 1;\r\n            const nextStudent = students[nextIndex];\r\n\r\n            // Update session state\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: nextIndex,\r\n                currentStudent: nextStudent,\r\n                gradedStudents: [...prev.gradedStudents, currentStudent?.id]\r\n            }));\r\n\r\n            setCurrentStudent(nextStudent);\r\n\r\n            // ENHANCED: Update grading form with next student info and preserve course/assignment data\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                student: {\r\n                    name: nextStudent.name || '',\r\n                    id: nextStudent.id || '',\r\n                    email: nextStudent.email || ''\r\n                },\r\n                // Keep course and assignment info, reset grading-specific data\r\n                feedback: { general: '', strengths: '', improvements: '' },\r\n                attachments: [],\r\n                videoLinks: [],\r\n                latePolicy: { level: 'none', penaltyApplied: false },\r\n                rubricGrading: {},\r\n                metadata: {\r\n                    ...prev.metadata,\r\n                    gradedBy: '',\r\n                    gradedDate: ''\r\n                }\r\n            }));\r\n\r\n            console.log(`➡️ Moved to next student: ${nextStudent.name} (${nextIndex + 1}/${students.length})`);\r\n            return true;\r\n        }\r\n\r\n        // End of session\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            active: false,\r\n            gradedStudents: [...prev.gradedStudents, currentStudent?.id]\r\n        }));\r\n\r\n        console.log('🏁 Grading session completed');\r\n        return false;\r\n    }, [gradingSession, classList, currentStudent]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession?.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        if (currentIndex > 0) {\r\n            const prevIndex = currentIndex - 1;\r\n            const prevStudent = classList.students[prevIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: prevIndex,\r\n                currentStudent: prevStudent\r\n            }));\r\n\r\n            setCurrentStudent(prevStudent);\r\n\r\n            // ENHANCED: Update grading form with previous student info\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                student: {\r\n                    name: prevStudent.name || '',\r\n                    id: prevStudent.id || '',\r\n                    email: prevStudent.email || ''\r\n                },\r\n                // Keep course and assignment info, reset grading-specific data\r\n                feedback: { general: '', strengths: '', improvements: '' },\r\n                attachments: [],\r\n                videoLinks: [],\r\n                latePolicy: { level: 'none', penaltyApplied: false },\r\n                rubricGrading: {},\r\n                metadata: {\r\n                    ...prev.metadata,\r\n                    gradedBy: '',\r\n                    gradedDate: ''\r\n                }\r\n            }));\r\n\r\n            console.log(`⬅️ Moved to previous student: ${prevStudent.name} (${prevIndex + 1}/${classList.students.length})`);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [gradingSession, classList]);\r\n\r\n    // Update grading session\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    // Draft and Final Grade Management\r\n    const saveDraft = useCallback((studentId, gradeData) => {\r\n        setDrafts(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...gradeData,\r\n                savedAt: new Date().toISOString(),\r\n                type: 'draft'\r\n            }\r\n        }));\r\n        console.log(`💾 Draft saved for student: ${studentId}`);\r\n    }, []);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        return drafts[studentId] || null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, gradeData) => {\r\n        setFinalGrades(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...gradeData,\r\n                finalizedAt: new Date().toISOString(),\r\n                type: 'final'\r\n            }\r\n        }));\r\n        // Remove from drafts when finalized\r\n        setDrafts(prev => {\r\n            const newDrafts = { ...prev };\r\n            delete newDrafts[studentId];\r\n            return newDrafts;\r\n        });\r\n        console.log(`✅ Final grade saved for student: ${studentId}`);\r\n    }, []);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    const hasDraft = useCallback((studentId) => {\r\n        return !!drafts[studentId];\r\n    }, [drafts]);\r\n\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draft = drafts[studentId];\r\n        if (draft) {\r\n            saveFinalGrade(studentId, draft);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [drafts, saveFinalGrade]);\r\n\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalGrade = finalGrades[studentId];\r\n        if (finalGrade) {\r\n            // Move final grade back to draft\r\n            setDrafts(prev => ({\r\n                ...prev,\r\n                [studentId]: {\r\n                    ...finalGrade,\r\n                    savedAt: new Date().toISOString(),\r\n                    type: 'draft'\r\n                }\r\n            }));\r\n            // Remove from final grades\r\n            setFinalGrades(prev => {\r\n                const newFinals = { ...prev };\r\n                delete newFinals[studentId];\r\n                return newFinals;\r\n            });\r\n            console.log(`🔓 Grade unlocked for student: ${studentId}`);\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [finalGrades]);\r\n\r\n    // Form update functions\r\n    const updateStudentInfo = useCallback((studentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, ...studentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((courseInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, ...courseInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignmentInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, ...assignmentInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateFeedbackInfo = useCallback((feedbackInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            feedback: { ...prev.feedback, ...feedbackInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAttachments = useCallback((attachments) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            attachments\r\n        }));\r\n    }, []);\r\n\r\n    const updateVideoLinks = useCallback((videoLinks) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            videoLinks\r\n        }));\r\n    }, []);\r\n\r\n    const updateLatePolicyInfo = useCallback((latePolicyInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            latePolicy: { ...prev.latePolicy, ...latePolicyInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateRubricGrading = useCallback((rubricGradingInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            rubricGrading: { ...prev.rubricGrading, ...rubricGradingInfo }\r\n        }));\r\n    }, []);\r\n\r\n    const updateMetadata = useCallback((metadataInfo) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            metadata: { ...prev.metadata, ...metadataInfo }\r\n        }));\r\n    }, []);\r\n\r\n    // Rubric management functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (sharedRubric) {\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [sharedRubric]);\r\n\r\n    const transferRubricToGradingWithDetails = useCallback((rubricData) => {\r\n        if (rubricData) {\r\n            setSharedRubric(rubricData);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, []);\r\n\r\n    // Clear functions\r\n    const clearSharedRubric = useCallback(() => {\r\n        setSharedRubric(null);\r\n    }, []);\r\n\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData(null);\r\n    }, []);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        clearSharedRubric();\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n        setClassList(null);\r\n        setCurrentStudent(null);\r\n        setGradingSession({\r\n            active: false,\r\n            startTime: null,\r\n            gradedStudents: [],\r\n            totalStudents: 0,\r\n            currentStudent: null,\r\n            currentStudentIndex: 0\r\n        });\r\n        setDrafts({});\r\n        setFinalGrades({});\r\n        setAIPromptFormData(null);\r\n        setAssignmentPromptFormData(null);\r\n    }, [clearSharedRubric, clearGradingFormData, clearRubricFormData]);\r\n\r\n    // Session management\r\n    const exportSession = useCallback(() => {\r\n        const sessionData = {\r\n            sharedRubric,\r\n            classList,\r\n            drafts,\r\n            finalGrades,\r\n            activeTab,\r\n            currentStudent,\r\n            gradingSession,\r\n            sharedCourseDetails,\r\n            aiPromptFormData,\r\n            assignmentPromptFormData,\r\n        };\r\n        const dataStr = JSON.stringify(sessionData, null, 2);\r\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n        const url = URL.createObjectURL(dataBlob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        const timestamp = new Date().toISOString().split('T')[0];\r\n        link.download = `assessment_session_${timestamp}.json`;\r\n        link.click();\r\n        URL.revokeObjectURL(url);\r\n    }, [sharedRubric, classList, drafts, finalGrades, activeTab, currentStudent, gradingSession, sharedCourseDetails, aiPromptFormData, assignmentPromptFormData]);\r\n\r\n    const importSession = useCallback((sessionData) => {\r\n        try {\r\n            if (sessionData && typeof sessionData === 'object') {\r\n                setSharedRubric(sessionData.sharedRubric || null);\r\n                setClassList(sessionData.classList || null);\r\n                setDrafts(sessionData.drafts || {});\r\n                setFinalGrades(sessionData.finalGrades || {});\r\n                setActiveTab(sessionData.activeTab || 'assignment-prompt-generator');\r\n                setCurrentStudent(sessionData.currentStudent || null);\r\n                setGradingSession(sessionData.gradingSession || {\r\n                    active: false,\r\n                    startTime: null,\r\n                    gradedStudents: [],\r\n                    totalStudents: 0,\r\n                    currentStudent: null,\r\n                    currentStudentIndex: 0\r\n                });\r\n                setSharedCourseDetails(sessionData.sharedCourseDetails || null);\r\n                setAIPromptFormData(sessionData.aiPromptFormData || null);\r\n                setAssignmentPromptFormData(sessionData.assignmentPromptFormData || null);\r\n                return true;\r\n            } else {\r\n                throw new Error('Invalid session data format');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to import session:', error);\r\n            return false;\r\n        }\r\n    }, []);\r\n\r\n    // Context value\r\n    const value = {\r\n        // Core state\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // AI and Assignment Prompt Generators\r\n        aiPromptFormData,\r\n        setAIPromptFormData,\r\n        assignmentPromptFormData,\r\n        setAssignmentPromptFormData,\r\n        initializeAssignmentPromptFormData,\r\n\r\n        // Grading form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        updateFeedbackInfo,\r\n        updateAttachments,\r\n        updateVideoLinks,\r\n        updateLatePolicyInfo,\r\n        updateRubricGrading,\r\n        updateMetadata,\r\n\r\n        // Draft and Final Grade Management\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Class management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Grading session\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric form data\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Utility functions\r\n        transferRubricToGrading,\r\n        transferRubricToGradingWithDetails,\r\n        clearSharedRubric,\r\n        clearGradingFormData,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Session management\r\n        exportSession,\r\n        importSession,\r\n\r\n        // Legacy compatibility\r\n        persistentFormData: gradingFormData,\r\n        updatePersistentFormData: setGradingFormData\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AssessmentProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}