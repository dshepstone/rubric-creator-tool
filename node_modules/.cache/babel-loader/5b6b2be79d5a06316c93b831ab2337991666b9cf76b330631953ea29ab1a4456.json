{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [activeTab, setActiveTab] = useState('rubric-creator');\n\n  // Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ENHANCED: Separate storage for draft and final grades\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // Batch grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Comprehensive persistent form data for grading tool\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // UPDATE HELPERS\n  // ==============\n  const updateStudentInfo = useCallback(studentData => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...studentData\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(courseData => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...courseData\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(assignmentData => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...assignmentData\n      }\n    }));\n  }, []);\n\n  // Clear grading form data\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n\n  // ENHANCED DRAFT AND FINAL GRADE MANAGEMENT\n  // =========================================\n\n  // Save as draft (existing functionality enhanced)\n  const saveDraft = useCallback((studentId, data) => {\n    console.log('ðŸ’¾ Saving draft for student ID:', studentId);\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: {\n        ...data,\n        savedAt: new Date().toISOString()\n      }\n    }));\n\n    // Update class list progress\n    if (classList) {\n      const studentIndex = classList.students.findIndex(s => s.id === studentId);\n      if (studentIndex >= 0) {\n        const updatedProgress = [...classList.gradingProgress];\n        updatedProgress[studentIndex] = {\n          ...updatedProgress[studentIndex],\n          status: 'completed_draft',\n          lastModified: new Date().toISOString(),\n          gradeType: 'draft'\n        };\n        setClassList(prev => ({\n          ...prev,\n          gradingProgress: updatedProgress\n        }));\n      }\n    }\n  }, [classList]);\n\n  // Load draft data\n  const loadDraft = useCallback(studentId => {\n    console.log('ðŸ“‚ Loading draft for student ID:', studentId);\n    return drafts[studentId] || null;\n  }, [drafts]);\n\n  // Save as final grade (new functionality)\n  const saveFinalGrade = useCallback((studentId, data) => {\n    console.log('âœ… Saving final grade for student ID:', studentId);\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: {\n        ...data,\n        finalizedAt: new Date().toISOString()\n      }\n    }));\n\n    // Remove from drafts once finalized\n    setDrafts(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[studentId];\n      return updated;\n    });\n\n    // Update class list progress\n    if (classList) {\n      const studentIndex = classList.students.findIndex(s => s.id === studentId);\n      if (studentIndex >= 0) {\n        const updatedProgress = [...classList.gradingProgress];\n        updatedProgress[studentIndex] = {\n          ...updatedProgress[studentIndex],\n          status: 'completed_final',\n          lastModified: new Date().toISOString(),\n          gradeType: 'final'\n        };\n        setClassList(prev => ({\n          ...prev,\n          gradingProgress: updatedProgress\n        }));\n      }\n    }\n  }, [drafts, classList]);\n\n  // Load final grade data\n  const loadFinalGrade = useCallback(studentId => {\n    console.log('ðŸ“‹ Loading final grade for student ID:', studentId);\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n\n  // Check grade status\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'not_started';\n  }, [finalGrades, drafts]);\n\n  // Check if student has draft\n  const hasDraft = useCallback(studentId => {\n    return !drafts[studentId];\n  }, [drafts]);\n\n  // Finalize a draft grade\n  const finalizeGrade = useCallback(studentId => {\n    const draftData = drafts[studentId];\n    if (draftData) {\n      saveFinalGrade(studentId, draftData);\n    }\n  }, [drafts, saveFinalGrade]);\n\n  // Unlock a final grade (convert back to draft)\n  const unlockGrade = useCallback(studentId => {\n    const finalData = finalGrades[studentId];\n    if (finalData) {\n      // Move from final back to draft\n      setDrafts(prev => ({\n        ...prev,\n        [studentId]: finalData\n      }));\n      setFinalGrades(prev => {\n        const updated = {\n          ...prev\n        };\n        delete updated[studentId];\n        return updated;\n      });\n\n      // Update class list progress\n      if (classList) {\n        const studentIndex = classList.students.findIndex(s => s.id === studentId);\n        if (studentIndex >= 0) {\n          const updatedProgress = [...classList.gradingProgress];\n          updatedProgress[studentIndex] = {\n            ...updatedProgress[studentIndex],\n            status: 'completed_draft',\n            lastModified: new Date().toISOString(),\n            gradeType: 'draft'\n          };\n          setClassList(prev => ({\n            ...prev,\n            gradingProgress: updatedProgress\n          }));\n        }\n      }\n    }\n  }, [finalGrades, classList]);\n\n  // ENHANCED NAVIGATION FUNCTIONS\n  // ==============================\n\n  // Enhanced next student function with completion type\n  const nextStudentInSession = useCallback((completionType = 'draft') => {\n    if (!gradingSession.active || !classList || gradingSession.currentStudentIndex >= classList.students.length - 1) {\n      return false;\n    }\n    const nextIndex = gradingSession.currentStudentIndex + 1;\n    const nextStudent = classList.students[nextIndex];\n    const currentStudentId = classList.students[gradingSession.currentStudentIndex].id;\n\n    // Update session state\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: nextIndex,\n      currentStudent: nextStudent,\n      gradedStudents: [...prev.gradedStudents, currentStudentId]\n    }));\n\n    // Update current student\n    setCurrentStudent(nextStudent);\n\n    // Update grading form data with new student info\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: nextStudent.name,\n        id: nextStudent.id,\n        email: nextStudent.email\n      }\n    }));\n\n    // Update class list progress with appropriate status\n    const updatedProgress = [...classList.gradingProgress];\n    updatedProgress[gradingSession.currentStudentIndex] = {\n      ...updatedProgress[gradingSession.currentStudentIndex],\n      status: completionType === 'final' ? 'completed_final' : 'completed_draft',\n      lastModified: new Date().toISOString(),\n      gradeType: completionType\n    };\n    setClassList(prev => ({\n      ...prev,\n      gradingProgress: updatedProgress\n    }));\n    return true;\n  }, [gradingSession, classList, setGradingSession, setCurrentStudent, setClassList, setGradingFormData]);\n\n  // Previous student function\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !classList || gradingSession.currentStudentIndex <= 0) {\n      return false;\n    }\n    const prevIndex = gradingSession.currentStudentIndex - 1;\n    const prevStudent = classList.students[prevIndex];\n\n    // Update session state\n    setGradingSession(prev => ({\n      ...prev,\n      currentStudentIndex: prevIndex,\n      currentStudent: prevStudent,\n      gradedStudents: prev.gradedStudents.filter(id => id !== prevStudent.id)\n    }));\n\n    // Update current student\n    setCurrentStudent(prevStudent);\n\n    // Update grading form data with new student info\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: prevStudent.name,\n        id: prevStudent.id,\n        email: prevStudent.email\n      }\n    }));\n    return true;\n  }, [gradingSession, classList]);\n\n  // Initialize grading session\n  const initializeGradingSession = useCallback((startIndex = 0) => {\n    if (!classList || !classList.students) return false;\n    const startStudent = classList.students[startIndex];\n    setGradingSession({\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: classList.students.length,\n      currentStudent: startStudent,\n      currentStudentIndex: startIndex\n    });\n    setCurrentStudent(startStudent);\n\n    // Update grading form data\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: startStudent.name,\n        id: startStudent.id,\n        email: startStudent.email\n      }\n    }));\n    return true;\n  }, [classList]);\n\n  // Transfer rubric to grading\n  const transferRubricToGrading = useCallback(rubric => {\n    setSharedRubric(rubric);\n    setActiveTab('grading-template');\n  }, []);\n\n  // CONTEXT VALUE\n  // =============\n  const value = {\n    // Tab navigation\n    activeTab,\n    setActiveTab,\n    // Rubric management\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    // Form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    // Update helpers\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    clearGradingFormData,\n    // Class list management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // ENHANCED: Draft and final grade management\n    drafts,\n    finalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    hasDraft,\n    finalizeGrade,\n    unlockGrade,\n    // Session navigation\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    initializeGradingSession,\n    // Legacy/compatibility\n    transferRubricToGrading\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"xQG98zFFYqGlIpos/L9SKGX4xaU=\");\n_c = AssessmentProvider;\nexport default AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","updateStudentInfo","studentData","prev","updateCourseInfo","courseData","updateAssignmentInfo","assignmentData","clearGradingFormData","saveDraft","studentId","data","console","log","savedAt","Date","toISOString","studentIndex","students","findIndex","s","updatedProgress","gradingProgress","status","lastModified","gradeType","loadDraft","saveFinalGrade","finalizedAt","updated","loadFinalGrade","getGradeStatus","hasDraft","finalizeGrade","draftData","unlockGrade","finalData","nextStudentInSession","completionType","length","nextIndex","nextStudent","currentStudentId","previousStudentInSession","prevIndex","prevStudent","filter","initializeGradingSession","startIndex","startStudent","transferRubricToGrading","rubric","value","gradingData","setGradingData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('rubric-creator');\r\n\r\n    // Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ENHANCED: Separate storage for draft and final grades\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // Batch grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Comprehensive persistent form data for grading tool\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // UPDATE HELPERS\r\n    // ==============\r\n    const updateStudentInfo = useCallback((studentData) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, ...studentData }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((courseData) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, ...courseData }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((assignmentData) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, ...assignmentData }\r\n        }));\r\n    }, []);\r\n\r\n    // Clear grading form data\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    // ENHANCED DRAFT AND FINAL GRADE MANAGEMENT\r\n    // =========================================\r\n\r\n    // Save as draft (existing functionality enhanced)\r\n    const saveDraft = useCallback((studentId, data) => {\r\n        console.log('ðŸ’¾ Saving draft for student ID:', studentId);\r\n        setDrafts(prev => ({ ...prev, [studentId]: { ...data, savedAt: new Date().toISOString() } }));\r\n\r\n        // Update class list progress\r\n        if (classList) {\r\n            const studentIndex = classList.students.findIndex(s => s.id === studentId);\r\n            if (studentIndex >= 0) {\r\n                const updatedProgress = [...classList.gradingProgress];\r\n                updatedProgress[studentIndex] = {\r\n                    ...updatedProgress[studentIndex],\r\n                    status: 'completed_draft',\r\n                    lastModified: new Date().toISOString(),\r\n                    gradeType: 'draft'\r\n                };\r\n                setClassList(prev => ({\r\n                    ...prev,\r\n                    gradingProgress: updatedProgress\r\n                }));\r\n            }\r\n        }\r\n    }, [classList]);\r\n\r\n    // Load draft data\r\n    const loadDraft = useCallback((studentId) => {\r\n        console.log('ðŸ“‚ Loading draft for student ID:', studentId);\r\n        return drafts[studentId] || null;\r\n    }, [drafts]);\r\n\r\n    // Save as final grade (new functionality)\r\n    const saveFinalGrade = useCallback((studentId, data) => {\r\n        console.log('âœ… Saving final grade for student ID:', studentId);\r\n        setFinalGrades(prev => ({\r\n            ...prev,\r\n            [studentId]: { ...data, finalizedAt: new Date().toISOString() }\r\n        }));\r\n\r\n        // Remove from drafts once finalized\r\n        setDrafts(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[studentId];\r\n            return updated;\r\n        });\r\n\r\n        // Update class list progress\r\n        if (classList) {\r\n            const studentIndex = classList.students.findIndex(s => s.id === studentId);\r\n            if (studentIndex >= 0) {\r\n                const updatedProgress = [...classList.gradingProgress];\r\n                updatedProgress[studentIndex] = {\r\n                    ...updatedProgress[studentIndex],\r\n                    status: 'completed_final',\r\n                    lastModified: new Date().toISOString(),\r\n                    gradeType: 'final'\r\n                };\r\n                setClassList(prev => ({\r\n                    ...prev,\r\n                    gradingProgress: updatedProgress\r\n                }));\r\n            }\r\n        }\r\n    }, [drafts, classList]);\r\n\r\n    // Load final grade data\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        console.log('ðŸ“‹ Loading final grade for student ID:', studentId);\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    // Check grade status\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'not_started';\r\n    }, [finalGrades, drafts]);\r\n\r\n    // Check if student has draft\r\n    const hasDraft = useCallback((studentId) => {\r\n        return !drafts[studentId];\r\n    }, [drafts]);\r\n\r\n    // Finalize a draft grade\r\n    const finalizeGrade = useCallback((studentId) => {\r\n        const draftData = drafts[studentId];\r\n        if (draftData) {\r\n            saveFinalGrade(studentId, draftData);\r\n        }\r\n    }, [drafts, saveFinalGrade]);\r\n\r\n    // Unlock a final grade (convert back to draft)\r\n    const unlockGrade = useCallback((studentId) => {\r\n        const finalData = finalGrades[studentId];\r\n        if (finalData) {\r\n            // Move from final back to draft\r\n            setDrafts(prev => ({ ...prev, [studentId]: finalData }));\r\n            setFinalGrades(prev => {\r\n                const updated = { ...prev };\r\n                delete updated[studentId];\r\n                return updated;\r\n            });\r\n\r\n            // Update class list progress\r\n            if (classList) {\r\n                const studentIndex = classList.students.findIndex(s => s.id === studentId);\r\n                if (studentIndex >= 0) {\r\n                    const updatedProgress = [...classList.gradingProgress];\r\n                    updatedProgress[studentIndex] = {\r\n                        ...updatedProgress[studentIndex],\r\n                        status: 'completed_draft',\r\n                        lastModified: new Date().toISOString(),\r\n                        gradeType: 'draft'\r\n                    };\r\n                    setClassList(prev => ({\r\n                        ...prev,\r\n                        gradingProgress: updatedProgress\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }, [finalGrades, classList]);\r\n\r\n    // ENHANCED NAVIGATION FUNCTIONS\r\n    // ==============================\r\n\r\n    // Enhanced next student function with completion type\r\n    const nextStudentInSession = useCallback((completionType = 'draft') => {\r\n        if (!gradingSession.active || !classList || gradingSession.currentStudentIndex >= classList.students.length - 1) {\r\n            return false;\r\n        }\r\n\r\n        const nextIndex = gradingSession.currentStudentIndex + 1;\r\n        const nextStudent = classList.students[nextIndex];\r\n        const currentStudentId = classList.students[gradingSession.currentStudentIndex].id;\r\n\r\n        // Update session state\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: nextIndex,\r\n            currentStudent: nextStudent,\r\n            gradedStudents: [...prev.gradedStudents, currentStudentId]\r\n        }));\r\n\r\n        // Update current student\r\n        setCurrentStudent(nextStudent);\r\n\r\n        // Update grading form data with new student info\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: nextStudent.name,\r\n                id: nextStudent.id,\r\n                email: nextStudent.email\r\n            }\r\n        }));\r\n\r\n        // Update class list progress with appropriate status\r\n        const updatedProgress = [...classList.gradingProgress];\r\n        updatedProgress[gradingSession.currentStudentIndex] = {\r\n            ...updatedProgress[gradingSession.currentStudentIndex],\r\n            status: completionType === 'final' ? 'completed_final' : 'completed_draft',\r\n            lastModified: new Date().toISOString(),\r\n            gradeType: completionType\r\n        };\r\n\r\n        setClassList(prev => ({\r\n            ...prev,\r\n            gradingProgress: updatedProgress\r\n        }));\r\n\r\n        return true;\r\n    }, [gradingSession, classList, setGradingSession, setCurrentStudent, setClassList, setGradingFormData]);\r\n\r\n    // Previous student function\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !classList || gradingSession.currentStudentIndex <= 0) {\r\n            return false;\r\n        }\r\n\r\n        const prevIndex = gradingSession.currentStudentIndex - 1;\r\n        const prevStudent = classList.students[prevIndex];\r\n\r\n        // Update session state\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            currentStudentIndex: prevIndex,\r\n            currentStudent: prevStudent,\r\n            gradedStudents: prev.gradedStudents.filter(id => id !== prevStudent.id)\r\n        }));\r\n\r\n        // Update current student\r\n        setCurrentStudent(prevStudent);\r\n\r\n        // Update grading form data with new student info\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: prevStudent.name,\r\n                id: prevStudent.id,\r\n                email: prevStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [gradingSession, classList]);\r\n\r\n    // Initialize grading session\r\n    const initializeGradingSession = useCallback((startIndex = 0) => {\r\n        if (!classList || !classList.students) return false;\r\n\r\n        const startStudent = classList.students[startIndex];\r\n\r\n        setGradingSession({\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: classList.students.length,\r\n            currentStudent: startStudent,\r\n            currentStudentIndex: startIndex\r\n        });\r\n\r\n        setCurrentStudent(startStudent);\r\n\r\n        // Update grading form data\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: startStudent.name,\r\n                id: startStudent.id,\r\n                email: startStudent.email\r\n            }\r\n        }));\r\n\r\n        return true;\r\n    }, [classList]);\r\n\r\n    // Transfer rubric to grading\r\n    const transferRubricToGrading = useCallback((rubric) => {\r\n        setSharedRubric(rubric);\r\n        setActiveTab('grading-template');\r\n    }, []);\r\n\r\n    // CONTEXT VALUE\r\n    // =============\r\n    const value = {\r\n        // Tab navigation\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // Rubric management\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n\r\n        // Form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n\r\n        // Update helpers\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        clearGradingFormData,\r\n\r\n        // Class list management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // ENHANCED: Draft and final grade management\r\n        drafts,\r\n        finalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n        hasDraft,\r\n        finalizeGrade,\r\n        unlockGrade,\r\n\r\n        // Session navigation\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        initializeGradingSession,\r\n\r\n        // Legacy/compatibility\r\n        transferRubricToGrading\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AssessmentProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}