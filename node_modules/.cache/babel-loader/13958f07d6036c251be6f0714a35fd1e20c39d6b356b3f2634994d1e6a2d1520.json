{"ast":null,"code":"var _jsxFileName = \"C:\\\\local clones\\\\rubric-creation-app\\\\src\\\\components\\\\SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Updated SharedContext.js with Course Information Fix\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssessmentContext = /*#__PURE__*/createContext();\nexport const useAssessment = () => {\n  _s();\n  const context = useContext(AssessmentContext);\n  if (!context) {\n    throw new Error('useAssessment must be used within AssessmentProvider');\n  }\n  return context;\n};\n_s(useAssessment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AssessmentProvider = ({\n  children\n}) => {\n  _s2();\n  // Shared rubric state\n  const [sharedRubric, setSharedRubric] = useState(null);\n  const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\n  const [activeTab, setActiveTab] = useState('rubric-creator');\n\n  // Class list and student management\n  const [classList, setClassList] = useState(null);\n  const [currentStudent, setCurrentStudent] = useState(null);\n\n  // ENHANCED: Separate storage for draft and final grades\n  const [drafts, setDrafts] = useState({});\n  const [finalGrades, setFinalGrades] = useState({});\n\n  // Batch grading session state\n  const [gradingSession, setGradingSession] = useState({\n    active: false,\n    startTime: null,\n    gradedStudents: [],\n    totalStudents: 0,\n    currentStudent: null,\n    currentStudentIndex: 0\n  });\n\n  // Form data states\n  const [gradingFormData, setGradingFormData] = useState({\n    student: {\n      name: '',\n      id: '',\n      email: ''\n    },\n    course: {\n      code: '',\n      name: '',\n      instructor: '',\n      term: ''\n    },\n    assignment: {\n      name: '',\n      dueDate: '',\n      maxPoints: 100\n    },\n    feedback: {\n      general: '',\n      strengths: '',\n      improvements: ''\n    },\n    attachments: [],\n    videoLinks: [],\n    latePolicy: {\n      level: 'none',\n      penaltyApplied: false\n    },\n    rubricGrading: {},\n    metadata: {\n      gradedBy: '',\n      gradedDate: '',\n      aiAssisted: false,\n      rubricIntegrated: false\n    }\n  });\n\n  // Rubric form data state\n  const [rubricFormData, setRubricFormData] = useState({\n    assignmentInfo: {\n      title: '',\n      description: '',\n      weight: 25,\n      passingThreshold: 60,\n      totalPoints: 100\n    },\n    rubricLevels: [{\n      level: 'incomplete',\n      name: 'Incomplete',\n      description: 'No submission or unusable',\n      color: '#95a5a6',\n      multiplier: 0\n    }, {\n      level: 'unacceptable',\n      name: 'Unacceptable',\n      description: 'Below minimum standards',\n      color: '#e74c3c',\n      multiplier: 0.3\n    }, {\n      level: 'developing',\n      name: 'Developing',\n      description: 'Approaching standards',\n      color: '#f39c12',\n      multiplier: 0.55\n    }, {\n      level: 'acceptable',\n      name: 'Acceptable (PASS)',\n      description: 'Meets minimum standards',\n      color: '#27ae60',\n      multiplier: 0.7\n    }, {\n      level: 'emerging',\n      name: 'Emerging',\n      description: 'Above standard expectations',\n      color: '#2980b9',\n      multiplier: 0.82\n    }, {\n      level: 'accomplished',\n      name: 'Accomplished',\n      description: 'Strong professional quality',\n      color: '#16a085',\n      multiplier: 0.92\n    }, {\n      level: 'exceptional',\n      name: 'Exceptional',\n      description: 'Outstanding professional quality',\n      color: '#8e44ad',\n      multiplier: 1.0\n    }],\n    criteria: [{\n      id: 'criterion-1',\n      name: '',\n      description: '',\n      maxPoints: 20,\n      weight: 20,\n      levels: {},\n      feedbackLibrary: {\n        strengths: [],\n        improvements: [],\n        general: []\n      }\n    }],\n    pointingSystem: 'multiplier',\n    reversedOrder: false,\n    expandedFeedback: {},\n    modalEdit: {\n      show: false,\n      content: '',\n      field: null,\n      onSave: null\n    }\n  });\n\n  // ---- ALIAS for backward-compatibility ----\n  const gradingData = gradingFormData;\n  const setGradingData = setGradingFormData;\n\n  // Update functions for form data\n  const updateStudentInfo = useCallback(updates => {\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        ...prev.student,\n        ...updates\n      }\n    }));\n  }, []);\n  const updateCourseInfo = useCallback(updates => {\n    setGradingFormData(prev => ({\n      ...prev,\n      course: {\n        ...prev.course,\n        ...updates\n      }\n    }));\n\n    // **FIX:** Also update the shared course details immediately\n    setSharedCourseDetails(prev => ({\n      ...prev,\n      course: {\n        ...((prev === null || prev === void 0 ? void 0 : prev.course) || {}),\n        ...updates\n      }\n    }));\n  }, []);\n  const updateAssignmentInfo = useCallback(updates => {\n    setGradingFormData(prev => ({\n      ...prev,\n      assignment: {\n        ...prev.assignment,\n        ...updates\n      }\n    }));\n\n    // **FIX:** Also update the shared assignment details immediately\n    setSharedCourseDetails(prev => ({\n      ...prev,\n      assignment: {\n        ...((prev === null || prev === void 0 ? void 0 : prev.assignment) || {}),\n        ...updates\n      }\n    }));\n  }, []);\n\n  // Clear functions\n  const clearGradingFormData = useCallback(() => {\n    setGradingFormData({\n      student: {\n        name: '',\n        id: '',\n        email: ''\n      },\n      course: {\n        code: '',\n        name: '',\n        instructor: '',\n        term: ''\n      },\n      assignment: {\n        name: '',\n        dueDate: '',\n        maxPoints: 100\n      },\n      feedback: {\n        general: '',\n        strengths: '',\n        improvements: ''\n      },\n      attachments: [],\n      videoLinks: [],\n      latePolicy: {\n        level: 'none',\n        penaltyApplied: false\n      },\n      rubricGrading: {},\n      metadata: {\n        gradedBy: '',\n        gradedDate: '',\n        aiAssisted: false,\n        rubricIntegrated: false\n      }\n    });\n  }, []);\n  const clearRubricFormData = useCallback(() => {\n    setRubricFormData({\n      assignmentInfo: {\n        title: '',\n        description: '',\n        weight: 25,\n        passingThreshold: 60,\n        totalPoints: 100\n      },\n      rubricLevels: [{\n        level: 'incomplete',\n        name: 'Incomplete',\n        description: 'No submission or unusable',\n        color: '#95a5a6',\n        multiplier: 0\n      }, {\n        level: 'unacceptable',\n        name: 'Unacceptable',\n        description: 'Below minimum standards',\n        color: '#e74c3c',\n        multiplier: 0.3\n      }, {\n        level: 'developing',\n        name: 'Developing',\n        description: 'Approaching standards',\n        color: '#f39c12',\n        multiplier: 0.55\n      }, {\n        level: 'acceptable',\n        name: 'Acceptable (PASS)',\n        description: 'Meets minimum standards',\n        color: '#27ae60',\n        multiplier: 0.7\n      }, {\n        level: 'emerging',\n        name: 'Emerging',\n        description: 'Above standard expectations',\n        color: '#2980b9',\n        multiplier: 0.82\n      }, {\n        level: 'accomplished',\n        name: 'Accomplished',\n        description: 'Strong professional quality',\n        color: '#16a085',\n        multiplier: 0.92\n      }, {\n        level: 'exceptional',\n        name: 'Exceptional',\n        description: 'Outstanding professional quality',\n        color: '#8e44ad',\n        multiplier: 1.0\n      }],\n      criteria: [{\n        id: 'criterion-1',\n        name: '',\n        description: '',\n        maxPoints: 20,\n        weight: 20,\n        levels: {},\n        feedbackLibrary: {\n          strengths: [],\n          improvements: [],\n          general: []\n        }\n      }],\n      pointingSystem: 'multiplier',\n      reversedOrder: false,\n      expandedFeedback: {},\n      modalEdit: {\n        show: false,\n        content: '',\n        field: null,\n        onSave: null\n      }\n    });\n  }, []);\n\n  // Draft and final grade management\n  const saveDraft = useCallback((studentId, gradeData) => {\n    setDrafts(prev => ({\n      ...prev,\n      [studentId]: {\n        ...gradeData,\n        savedAt: new Date().toISOString(),\n        type: 'draft'\n      }\n    }));\n    console.log('💾 Draft saved for student:', studentId);\n  }, []);\n  const loadDraft = useCallback(studentId => {\n    return drafts[studentId] || null;\n  }, [drafts]);\n  const saveFinalGrade = useCallback((studentId, gradeData) => {\n    setFinalGrades(prev => ({\n      ...prev,\n      [studentId]: {\n        ...gradeData,\n        savedAt: new Date().toISOString(),\n        type: 'final'\n      }\n    }));\n    console.log('✅ Final grade saved for student:', studentId);\n  }, []);\n  const loadFinalGrade = useCallback(studentId => {\n    return finalGrades[studentId] || null;\n  }, [finalGrades]);\n  const getGradeStatus = useCallback(studentId => {\n    if (finalGrades[studentId]) return 'final';\n    if (drafts[studentId]) return 'draft';\n    return 'pending';\n  }, [finalGrades, drafts]);\n\n  // Session navigation\n  const nextStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    if (currentIndex < classList.students.length - 1) {\n      const nextIndex = currentIndex + 1;\n      const nextStudent = classList.students[nextIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: nextIndex,\n        currentStudent: nextStudent\n      }));\n      setCurrentStudent(nextStudent);\n\n      // **FIX:** Load course info for the next student too\n      setGradingFormData(prev => ({\n        ...prev,\n        student: {\n          name: nextStudent.name,\n          id: nextStudent.id,\n          email: nextStudent.email\n        },\n        // Keep the existing course and assignment info\n        course: (sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.course) || prev.course,\n        assignment: (sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.assignment) || prev.assignment\n      }));\n      return true;\n    }\n    return false;\n  }, [gradingSession, classList, sharedCourseDetails]);\n  const previousStudentInSession = useCallback(() => {\n    if (!gradingSession.active || !classList) return false;\n    const currentIndex = gradingSession.currentStudentIndex;\n    if (currentIndex > 0) {\n      const prevIndex = currentIndex - 1;\n      const prevStudent = classList.students[prevIndex];\n      setGradingSession(prev => ({\n        ...prev,\n        currentStudentIndex: prevIndex,\n        currentStudent: prevStudent\n      }));\n      setCurrentStudent(prevStudent);\n\n      // **FIX:** Load course info for the previous student too\n      setGradingFormData(prev => ({\n        ...prev,\n        student: {\n          name: prevStudent.name,\n          id: prevStudent.id,\n          email: prevStudent.email\n        },\n        // Keep the existing course and assignment info\n        course: (sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.course) || prev.course,\n        assignment: (sharedCourseDetails === null || sharedCourseDetails === void 0 ? void 0 : sharedCourseDetails.assignment) || prev.assignment\n      }));\n      return true;\n    }\n    return false;\n  }, [gradingSession, classList, sharedCourseDetails]);\n\n  // **MAIN FIX:** Initialize grading session with first student AND course info\n  const initializeGradingSession = useCallback(classListData => {\n    if (!classListData || !classListData.students.length) {\n      return false;\n    }\n    const firstStudent = classListData.students[0];\n    const session = {\n      active: true,\n      startTime: new Date().toISOString(),\n      gradedStudents: [],\n      totalStudents: classListData.students.length,\n      currentStudent: firstStudent,\n      currentStudentIndex: 0\n    };\n    setGradingSession(session);\n    setCurrentStudent(firstStudent);\n\n    // **FIX:** Preserve the current course and assignment info when starting session\n    const currentCourse = gradingFormData.course;\n    const currentAssignment = gradingFormData.assignment;\n    setGradingFormData(prev => ({\n      ...prev,\n      student: {\n        name: firstStudent.name,\n        id: firstStudent.id,\n        email: firstStudent.email\n      },\n      // **CRITICAL:** Keep the current course and assignment info\n      course: currentCourse,\n      assignment: currentAssignment\n    }));\n\n    // **FIX:** Also update shared course details for navigation\n    setSharedCourseDetails({\n      course: currentCourse,\n      assignment: currentAssignment,\n      student: {\n        name: firstStudent.name,\n        id: firstStudent.id,\n        email: firstStudent.email\n      }\n    });\n    console.log('🚀 Grading session started with course info:', currentCourse);\n    console.log('📚 Assignment info:', currentAssignment);\n    console.log('👨‍🎓 First student:', firstStudent.name);\n    return true;\n  }, [gradingFormData]);\n\n  // Update grading session\n  const updateGradingSession = useCallback(updates => {\n    setGradingSession(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n\n  // Rubric management functions\n  const transferRubricToGrading = useCallback(() => {\n    if (rubricFormData) {\n      setSharedRubric(rubricFormData);\n      setActiveTab('grading-tool');\n    }\n  }, [rubricFormData]);\n  const clearAllData = useCallback(() => {\n    setSharedRubric(null);\n    clearGradingFormData();\n    clearRubricFormData();\n  }, [clearGradingFormData, clearRubricFormData]);\n\n  // **FIX:** Export all necessary functions in the value object\n  const value = {\n    // Shared states\n    sharedRubric,\n    setSharedRubric,\n    sharedCourseDetails,\n    setSharedCourseDetails,\n    activeTab,\n    setActiveTab,\n    // Form data\n    gradingData: gradingFormData,\n    setGradingData: setGradingFormData,\n    gradingFormData,\n    setGradingFormData,\n    rubricFormData,\n    setRubricFormData,\n    // Update functions\n    updateStudentInfo,\n    updateCourseInfo,\n    updateAssignmentInfo,\n    clearGradingFormData,\n    clearRubricFormData,\n    clearAllData,\n    // Class and student management\n    classList,\n    setClassList,\n    currentStudent,\n    setCurrentStudent,\n    // Draft and final grade management\n    drafts,\n    setDrafts,\n    finalGrades,\n    setFinalGrades,\n    saveDraft,\n    loadDraft,\n    saveFinalGrade,\n    loadFinalGrade,\n    getGradeStatus,\n    // Session management\n    gradingSession,\n    setGradingSession,\n    nextStudentInSession,\n    previousStudentInSession,\n    updateGradingSession,\n    initializeGradingSession,\n    // Rubric management\n    transferRubricToGrading\n  };\n  return /*#__PURE__*/_jsxDEV(AssessmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 9\n  }, this);\n};\n_s2(AssessmentProvider, \"+D9necL3Af1WjuFv713y4uAfEhI=\");\n_c = AssessmentProvider;\nvar _c;\n$RefreshReg$(_c, \"AssessmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","AssessmentContext","useAssessment","_s","context","Error","AssessmentProvider","children","_s2","sharedRubric","setSharedRubric","sharedCourseDetails","setSharedCourseDetails","activeTab","setActiveTab","classList","setClassList","currentStudent","setCurrentStudent","drafts","setDrafts","finalGrades","setFinalGrades","gradingSession","setGradingSession","active","startTime","gradedStudents","totalStudents","currentStudentIndex","gradingFormData","setGradingFormData","student","name","id","email","course","code","instructor","term","assignment","dueDate","maxPoints","feedback","general","strengths","improvements","attachments","videoLinks","latePolicy","level","penaltyApplied","rubricGrading","metadata","gradedBy","gradedDate","aiAssisted","rubricIntegrated","rubricFormData","setRubricFormData","assignmentInfo","title","description","weight","passingThreshold","totalPoints","rubricLevels","color","multiplier","criteria","levels","feedbackLibrary","pointingSystem","reversedOrder","expandedFeedback","modalEdit","show","content","field","onSave","gradingData","setGradingData","updateStudentInfo","updates","prev","updateCourseInfo","updateAssignmentInfo","clearGradingFormData","clearRubricFormData","saveDraft","studentId","gradeData","savedAt","Date","toISOString","type","console","log","loadDraft","saveFinalGrade","loadFinalGrade","getGradeStatus","nextStudentInSession","currentIndex","students","length","nextIndex","nextStudent","previousStudentInSession","prevIndex","prevStudent","initializeGradingSession","classListData","firstStudent","session","currentCourse","currentAssignment","updateGradingSession","transferRubricToGrading","clearAllData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/local clones/rubric-creation-app/src/components/SharedContext.js"],"sourcesContent":["// Updated SharedContext.js with Course Information Fix\r\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\n\r\nconst AssessmentContext = createContext();\r\n\r\nexport const useAssessment = () => {\r\n    const context = useContext(AssessmentContext);\r\n    if (!context) {\r\n        throw new Error('useAssessment must be used within AssessmentProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AssessmentProvider = ({ children }) => {\r\n    // Shared rubric state\r\n    const [sharedRubric, setSharedRubric] = useState(null);\r\n    const [sharedCourseDetails, setSharedCourseDetails] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('rubric-creator');\r\n\r\n    // Class list and student management\r\n    const [classList, setClassList] = useState(null);\r\n    const [currentStudent, setCurrentStudent] = useState(null);\r\n\r\n    // ENHANCED: Separate storage for draft and final grades\r\n    const [drafts, setDrafts] = useState({});\r\n    const [finalGrades, setFinalGrades] = useState({});\r\n\r\n    // Batch grading session state\r\n    const [gradingSession, setGradingSession] = useState({\r\n        active: false,\r\n        startTime: null,\r\n        gradedStudents: [],\r\n        totalStudents: 0,\r\n        currentStudent: null,\r\n        currentStudentIndex: 0\r\n    });\r\n\r\n    // Form data states\r\n    const [gradingFormData, setGradingFormData] = useState({\r\n        student: { name: '', id: '', email: '' },\r\n        course: { code: '', name: '', instructor: '', term: '' },\r\n        assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n        feedback: { general: '', strengths: '', improvements: '' },\r\n        attachments: [],\r\n        videoLinks: [],\r\n        latePolicy: { level: 'none', penaltyApplied: false },\r\n        rubricGrading: {},\r\n        metadata: {\r\n            gradedBy: '',\r\n            gradedDate: '',\r\n            aiAssisted: false,\r\n            rubricIntegrated: false\r\n        }\r\n    });\r\n\r\n    // Rubric form data state\r\n    const [rubricFormData, setRubricFormData] = useState({\r\n        assignmentInfo: {\r\n            title: '',\r\n            description: '',\r\n            weight: 25,\r\n            passingThreshold: 60,\r\n            totalPoints: 100\r\n        },\r\n        rubricLevels: [\r\n            { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n            { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n            { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n            { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n            { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n            { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n            { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n        ],\r\n        criteria: [\r\n            {\r\n                id: 'criterion-1',\r\n                name: '',\r\n                description: '',\r\n                maxPoints: 20,\r\n                weight: 20,\r\n                levels: {},\r\n                feedbackLibrary: {\r\n                    strengths: [],\r\n                    improvements: [],\r\n                    general: []\r\n                }\r\n            }\r\n        ],\r\n        pointingSystem: 'multiplier',\r\n        reversedOrder: false,\r\n        expandedFeedback: {},\r\n        modalEdit: { show: false, content: '', field: null, onSave: null }\r\n    });\r\n\r\n    // ---- ALIAS for backward-compatibility ----\r\n    const gradingData = gradingFormData;\r\n    const setGradingData = setGradingFormData;\r\n\r\n    // Update functions for form data\r\n    const updateStudentInfo = useCallback((updates) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: { ...prev.student, ...updates }\r\n        }));\r\n    }, []);\r\n\r\n    const updateCourseInfo = useCallback((updates) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            course: { ...prev.course, ...updates }\r\n        }));\r\n\r\n        // **FIX:** Also update the shared course details immediately\r\n        setSharedCourseDetails(prev => ({\r\n            ...prev,\r\n            course: {\r\n                ...(prev?.course || {}),\r\n                ...updates\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    const updateAssignmentInfo = useCallback((updates) => {\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            assignment: { ...prev.assignment, ...updates }\r\n        }));\r\n\r\n        // **FIX:** Also update the shared assignment details immediately\r\n        setSharedCourseDetails(prev => ({\r\n            ...prev,\r\n            assignment: {\r\n                ...(prev?.assignment || {}),\r\n                ...updates\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    // Clear functions\r\n    const clearGradingFormData = useCallback(() => {\r\n        setGradingFormData({\r\n            student: { name: '', id: '', email: '' },\r\n            course: { code: '', name: '', instructor: '', term: '' },\r\n            assignment: { name: '', dueDate: '', maxPoints: 100 },\r\n            feedback: { general: '', strengths: '', improvements: '' },\r\n            attachments: [],\r\n            videoLinks: [],\r\n            latePolicy: { level: 'none', penaltyApplied: false },\r\n            rubricGrading: {},\r\n            metadata: {\r\n                gradedBy: '',\r\n                gradedDate: '',\r\n                aiAssisted: false,\r\n                rubricIntegrated: false\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const clearRubricFormData = useCallback(() => {\r\n        setRubricFormData({\r\n            assignmentInfo: {\r\n                title: '',\r\n                description: '',\r\n                weight: 25,\r\n                passingThreshold: 60,\r\n                totalPoints: 100\r\n            },\r\n            rubricLevels: [\r\n                { level: 'incomplete', name: 'Incomplete', description: 'No submission or unusable', color: '#95a5a6', multiplier: 0 },\r\n                { level: 'unacceptable', name: 'Unacceptable', description: 'Below minimum standards', color: '#e74c3c', multiplier: 0.3 },\r\n                { level: 'developing', name: 'Developing', description: 'Approaching standards', color: '#f39c12', multiplier: 0.55 },\r\n                { level: 'acceptable', name: 'Acceptable (PASS)', description: 'Meets minimum standards', color: '#27ae60', multiplier: 0.7 },\r\n                { level: 'emerging', name: 'Emerging', description: 'Above standard expectations', color: '#2980b9', multiplier: 0.82 },\r\n                { level: 'accomplished', name: 'Accomplished', description: 'Strong professional quality', color: '#16a085', multiplier: 0.92 },\r\n                { level: 'exceptional', name: 'Exceptional', description: 'Outstanding professional quality', color: '#8e44ad', multiplier: 1.0 }\r\n            ],\r\n            criteria: [\r\n                {\r\n                    id: 'criterion-1',\r\n                    name: '',\r\n                    description: '',\r\n                    maxPoints: 20,\r\n                    weight: 20,\r\n                    levels: {},\r\n                    feedbackLibrary: {\r\n                        strengths: [],\r\n                        improvements: [],\r\n                        general: []\r\n                    }\r\n                }\r\n            ],\r\n            pointingSystem: 'multiplier',\r\n            reversedOrder: false,\r\n            expandedFeedback: {},\r\n            modalEdit: { show: false, content: '', field: null, onSave: null }\r\n        });\r\n    }, []);\r\n\r\n    // Draft and final grade management\r\n    const saveDraft = useCallback((studentId, gradeData) => {\r\n        setDrafts(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...gradeData,\r\n                savedAt: new Date().toISOString(),\r\n                type: 'draft'\r\n            }\r\n        }));\r\n        console.log('💾 Draft saved for student:', studentId);\r\n    }, []);\r\n\r\n    const loadDraft = useCallback((studentId) => {\r\n        return drafts[studentId] || null;\r\n    }, [drafts]);\r\n\r\n    const saveFinalGrade = useCallback((studentId, gradeData) => {\r\n        setFinalGrades(prev => ({\r\n            ...prev,\r\n            [studentId]: {\r\n                ...gradeData,\r\n                savedAt: new Date().toISOString(),\r\n                type: 'final'\r\n            }\r\n        }));\r\n        console.log('✅ Final grade saved for student:', studentId);\r\n    }, []);\r\n\r\n    const loadFinalGrade = useCallback((studentId) => {\r\n        return finalGrades[studentId] || null;\r\n    }, [finalGrades]);\r\n\r\n    const getGradeStatus = useCallback((studentId) => {\r\n        if (finalGrades[studentId]) return 'final';\r\n        if (drafts[studentId]) return 'draft';\r\n        return 'pending';\r\n    }, [finalGrades, drafts]);\r\n\r\n    // Session navigation\r\n    const nextStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        if (currentIndex < classList.students.length - 1) {\r\n            const nextIndex = currentIndex + 1;\r\n            const nextStudent = classList.students[nextIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: nextIndex,\r\n                currentStudent: nextStudent\r\n            }));\r\n\r\n            setCurrentStudent(nextStudent);\r\n\r\n            // **FIX:** Load course info for the next student too\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                student: {\r\n                    name: nextStudent.name,\r\n                    id: nextStudent.id,\r\n                    email: nextStudent.email\r\n                },\r\n                // Keep the existing course and assignment info\r\n                course: sharedCourseDetails?.course || prev.course,\r\n                assignment: sharedCourseDetails?.assignment || prev.assignment\r\n            }));\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [gradingSession, classList, sharedCourseDetails]);\r\n\r\n    const previousStudentInSession = useCallback(() => {\r\n        if (!gradingSession.active || !classList) return false;\r\n\r\n        const currentIndex = gradingSession.currentStudentIndex;\r\n        if (currentIndex > 0) {\r\n            const prevIndex = currentIndex - 1;\r\n            const prevStudent = classList.students[prevIndex];\r\n\r\n            setGradingSession(prev => ({\r\n                ...prev,\r\n                currentStudentIndex: prevIndex,\r\n                currentStudent: prevStudent\r\n            }));\r\n\r\n            setCurrentStudent(prevStudent);\r\n\r\n            // **FIX:** Load course info for the previous student too\r\n            setGradingFormData(prev => ({\r\n                ...prev,\r\n                student: {\r\n                    name: prevStudent.name,\r\n                    id: prevStudent.id,\r\n                    email: prevStudent.email\r\n                },\r\n                // Keep the existing course and assignment info\r\n                course: sharedCourseDetails?.course || prev.course,\r\n                assignment: sharedCourseDetails?.assignment || prev.assignment\r\n            }));\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }, [gradingSession, classList, sharedCourseDetails]);\r\n\r\n    // **MAIN FIX:** Initialize grading session with first student AND course info\r\n    const initializeGradingSession = useCallback((classListData) => {\r\n        if (!classListData || !classListData.students.length) {\r\n            return false;\r\n        }\r\n\r\n        const firstStudent = classListData.students[0];\r\n        const session = {\r\n            active: true,\r\n            startTime: new Date().toISOString(),\r\n            gradedStudents: [],\r\n            totalStudents: classListData.students.length,\r\n            currentStudent: firstStudent,\r\n            currentStudentIndex: 0\r\n        };\r\n\r\n        setGradingSession(session);\r\n        setCurrentStudent(firstStudent);\r\n\r\n        // **FIX:** Preserve the current course and assignment info when starting session\r\n        const currentCourse = gradingFormData.course;\r\n        const currentAssignment = gradingFormData.assignment;\r\n\r\n        setGradingFormData(prev => ({\r\n            ...prev,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            },\r\n            // **CRITICAL:** Keep the current course and assignment info\r\n            course: currentCourse,\r\n            assignment: currentAssignment\r\n        }));\r\n\r\n        // **FIX:** Also update shared course details for navigation\r\n        setSharedCourseDetails({\r\n            course: currentCourse,\r\n            assignment: currentAssignment,\r\n            student: {\r\n                name: firstStudent.name,\r\n                id: firstStudent.id,\r\n                email: firstStudent.email\r\n            }\r\n        });\r\n\r\n        console.log('🚀 Grading session started with course info:', currentCourse);\r\n        console.log('📚 Assignment info:', currentAssignment);\r\n        console.log('👨‍🎓 First student:', firstStudent.name);\r\n\r\n        return true;\r\n    }, [gradingFormData]);\r\n\r\n    // Update grading session\r\n    const updateGradingSession = useCallback((updates) => {\r\n        setGradingSession(prev => ({\r\n            ...prev,\r\n            ...updates\r\n        }));\r\n    }, []);\r\n\r\n    // Rubric management functions\r\n    const transferRubricToGrading = useCallback(() => {\r\n        if (rubricFormData) {\r\n            setSharedRubric(rubricFormData);\r\n            setActiveTab('grading-tool');\r\n        }\r\n    }, [rubricFormData]);\r\n\r\n    const clearAllData = useCallback(() => {\r\n        setSharedRubric(null);\r\n        clearGradingFormData();\r\n        clearRubricFormData();\r\n    }, [clearGradingFormData, clearRubricFormData]);\r\n\r\n    // **FIX:** Export all necessary functions in the value object\r\n    const value = {\r\n        // Shared states\r\n        sharedRubric,\r\n        setSharedRubric,\r\n        sharedCourseDetails,\r\n        setSharedCourseDetails,\r\n        activeTab,\r\n        setActiveTab,\r\n\r\n        // Form data\r\n        gradingData: gradingFormData,\r\n        setGradingData: setGradingFormData,\r\n        gradingFormData,\r\n        setGradingFormData,\r\n        rubricFormData,\r\n        setRubricFormData,\r\n\r\n        // Update functions\r\n        updateStudentInfo,\r\n        updateCourseInfo,\r\n        updateAssignmentInfo,\r\n        clearGradingFormData,\r\n        clearRubricFormData,\r\n        clearAllData,\r\n\r\n        // Class and student management\r\n        classList,\r\n        setClassList,\r\n        currentStudent,\r\n        setCurrentStudent,\r\n\r\n        // Draft and final grade management\r\n        drafts,\r\n        setDrafts,\r\n        finalGrades,\r\n        setFinalGrades,\r\n        saveDraft,\r\n        loadDraft,\r\n        saveFinalGrade,\r\n        loadFinalGrade,\r\n        getGradeStatus,\r\n\r\n        // Session management\r\n        gradingSession,\r\n        setGradingSession,\r\n        nextStudentInSession,\r\n        previousStudentInSession,\r\n        updateGradingSession,\r\n        initializeGradingSession,\r\n\r\n        // Rubric management\r\n        transferRubricToGrading\r\n    };\r\n\r\n    return (\r\n        <AssessmentContext.Provider value={value}>\r\n            {children}\r\n        </AssessmentContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}