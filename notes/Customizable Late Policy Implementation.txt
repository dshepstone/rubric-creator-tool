// Enhanced GradingTemplate.js with Customizable Late Policy

import React, { useState, useEffect } from 'react';

const GradingTemplate = () => {
  // Default institutional policy (current implementation)
  const DEFAULT_LATE_POLICY = {
    id: 'institutional',
    name: 'Institutional Policy',
    description: 'Standard institutional late assignment policy',
    levels: {
      none: {
        name: 'On Time',
        multiplier: 1.0,
        description: 'Assignment submitted on or before due date and time - marked out of 100%',
        color: '#16a34a',
        timeframe: 'On or before due date'
      },
      within24: {
        name: '1-24 Hours Late',
        multiplier: 0.8,
        description: 'Assignment received within 24 hours of due date - 20% reduction (marked out of 80%)',
        color: '#ea580c',
        timeframe: 'Up to 24 hours late'
      },
      after24: {
        name: 'More than 24 Hours Late',
        multiplier: 0.0,
        description: 'Assignment received after 24 hours from due date - mark of zero (0)',
        color: '#dc2626',
        timeframe: 'More than 24 hours late'
      }
    }
  };

  // Predefined policy templates for common scenarios
  const POLICY_TEMPLATES = {
    institutional: DEFAULT_LATE_POLICY,
    graceful: {
      id: 'graceful',
      name: 'Graceful Decline',
      description: 'Gradual reduction over time with extended acceptance period',
      levels: {
        none: {
          name: 'On Time',
          multiplier: 1.0,
          description: 'Full credit for on-time submissions',
          color: '#16a34a',
          timeframe: 'On or before due date'
        },
        grace: {
          name: 'Grace Period (1-6 hours)',
          multiplier: 0.95,
          description: '5% reduction during grace period',
          color: '#65a30d',
          timeframe: '1-6 hours late'
        },
        within24: {
          name: '6-24 Hours Late',
          multiplier: 0.85,
          description: '15% reduction for late submissions',
          color: '#ea580c',
          timeframe: '6-24 hours late'
        },
        within48: {
          name: '24-48 Hours Late',
          multiplier: 0.70,
          description: '30% reduction for very late submissions',
          color: '#dc2626',
          timeframe: '24-48 hours late'
        },
        after48: {
          name: 'More than 48 Hours Late',
          multiplier: 0.50,
          description: '50% maximum score for extremely late work',
          color: '#7c2d12',
          timeframe: 'More than 48 hours late'
        }
      }
    },
    strict: {
      id: 'strict',
      name: 'Strict Policy',
      description: 'No late submissions accepted',
      levels: {
        none: {
          name: 'On Time',
          multiplier: 1.0,
          description: 'Assignment submitted on or before due date and time',
          color: '#16a34a',
          timeframe: 'On or before due date'
        },
        late: {
          name: 'Late Submission',
          multiplier: 0.0,
          description: 'No credit for late submissions',
          color: '#dc2626',
          timeframe: 'Any amount late'
        }
      }
    },
    flexible: {
      id: 'flexible',
      name: 'Flexible Policy',
      description: 'Extended timeline with minimal penalties',
      levels: {
        none: {
          name: 'On Time',
          multiplier: 1.0,
          description: 'Full credit for timely submissions',
          color: '#16a34a',
          timeframe: 'On or before due date'
        },
        within72: {
          name: 'Up to 3 Days Late',
          multiplier: 0.90,
          description: '10% reduction for submissions within 3 days',
          color: '#ea580c',
          timeframe: 'Up to 72 hours late'
        },
        within7days: {
          name: 'Up to 1 Week Late',
          multiplier: 0.75,
          description: '25% reduction for submissions within 1 week',
          color: '#dc2626',
          timeframe: 'Up to 7 days late'
        },
        after7days: {
          name: 'More than 1 Week Late',
          multiplier: 0.60,
          description: '40% reduction for very late submissions',
          color: '#7c2d12',
          timeframe: 'More than 7 days late'
        }
      }
    }
  };

  // State management
  const [currentPolicy, setCurrentPolicy] = useState(DEFAULT_LATE_POLICY);
  const [customPolicies, setCustomPolicies] = useState([]);
  const [showPolicyEditor, setShowPolicyEditor] = useState(false);
  const [gradingData, setGradingData] = useState({
    latePolicy: { level: 'none', penaltyApplied: false },
    // ... other grading data
  });

  // Load saved policies from localStorage on component mount
  useEffect(() => {
    const savedPolicies = localStorage.getItem('customLatePolicies');
    if (savedPolicies) {
      try {
        const parsed = JSON.parse(savedPolicies);
        setCustomPolicies(parsed);
      } catch (error) {
        console.error('Error loading saved policies:', error);
      }
    }

    const savedCurrentPolicy = localStorage.getItem('currentLatePolicy');
    if (savedCurrentPolicy) {
      try {
        const parsed = JSON.parse(savedCurrentPolicy);
        setCurrentPolicy(parsed);
      } catch (error) {
        console.error('Error loading current policy:', error);
      }
    }
  }, []);

  // Save policies to localStorage
  const savePolicies = (policies, current = null) => {
    localStorage.setItem('customLatePolicies', JSON.stringify(policies));
    if (current) {
      localStorage.setItem('currentLatePolicy', JSON.stringify(current));
    }
  };

  // Policy management functions
  const selectPolicy = (policy) => {
    setCurrentPolicy(policy);
    setGradingData(prev => ({
      ...prev,
      latePolicy: { level: 'none', penaltyApplied: false }
    }));
    savePolicies(customPolicies, policy);
  };

  const createCustomPolicy = (policyData) => {
    const newPolicy = {
      ...policyData,
      id: `custom_${Date.now()}`,
      isCustom: true
    };
    
    const updatedPolicies = [...customPolicies, newPolicy];
    setCustomPolicies(updatedPolicies);
    savePolicies(updatedPolicies);
    
    return newPolicy;
  };

  const updateCustomPolicy = (policyId, policyData) => {
    const updatedPolicies = customPolicies.map(policy => 
      policy.id === policyId ? { ...policyData, id: policyId, isCustom: true } : policy
    );
    setCustomPolicies(updatedPolicies);
    savePolicies(updatedPolicies);

    if (currentPolicy.id === policyId) {
      const updatedPolicy = { ...policyData, id: policyId, isCustom: true };
      setCurrentPolicy(updatedPolicy);
      savePolicies(updatedPolicies, updatedPolicy);
    }
  };

  const deleteCustomPolicy = (policyId) => {
    const updatedPolicies = customPolicies.filter(policy => policy.id !== policyId);
    setCustomPolicies(updatedPolicies);
    savePolicies(updatedPolicies);

    if (currentPolicy.id === policyId) {
      selectPolicy(DEFAULT_LATE_POLICY);
    }
  };

  // Policy validation
  const validatePolicy = (policy) => {
    const errors = [];
    
    if (!policy.name || policy.name.trim() === '') {
      errors.push('Policy name is required');
    }
    
    if (!policy.levels || Object.keys(policy.levels).length === 0) {
      errors.push('At least one policy level is required');
    }
    
    if (policy.levels) {
      // Check for on-time level
      const hasOnTime = Object.values(policy.levels).some(level => level.multiplier === 1.0);
      if (!hasOnTime) {
        errors.push('Policy must include an on-time option (multiplier = 1.0)');
      }
      
      // Validate each level
      Object.entries(policy.levels).forEach(([key, level]) => {
        if (!level.name || level.name.trim() === '') {
          errors.push(`Level ${key} name is required`);
        }
        if (typeof level.multiplier !== 'number' || level.multiplier < 0 || level.multiplier > 1) {
          errors.push(`Level ${key} multiplier must be between 0 and 1`);
        }
        if (!level.description || level.description.trim() === '') {
          errors.push(`Level ${key} description is required`);
        }
      });
    }
    
    return errors;
  };

  // Calculate score with current policy
  const calculateTotalScore = () => {
    let rawScore = 0;
    // ... existing score calculation logic ...
    
    const selectedLevel = currentPolicy.levels[gradingData.latePolicy.level];
    const finalScore = selectedLevel ? rawScore * selectedLevel.multiplier : rawScore;
    
    return {
      rawScore: rawScore,
      finalScore: finalScore,
      penaltyApplied: gradingData.latePolicy.level !== 'none',
      latePolicyDescription: selectedLevel?.description || ''
    };
  };

  // Update late policy selection
  const updateLatePolicy = (level) => {
    setGradingData(prevData => ({
      ...prevData,
      latePolicy: {
        level: level,
        penaltyApplied: level !== 'none'
      }
    }));
  };

  // Get all available policies (templates + custom)
  const getAllPolicies = () => {
    return [
      ...Object.values(POLICY_TEMPLATES),
      ...customPolicies
    ];
  };

  // Component render would include:
  // 1. Policy selector dropdown
  // 2. Current policy display
  // 3. Policy editor modal
  // 4. Late submission level selection (using current policy)
  
  return (
    <div>
      {/* Policy Selection Section */}
      <PolicySelector 
        currentPolicy={currentPolicy}
        availablePolicies={getAllPolicies()}
        onSelectPolicy={selectPolicy}
        onEditPolicy={() => setShowPolicyEditor(true)}
      />
      
      {/* Late Submission Section (using current policy) */}
      <LateSubmissionSelector 
        policy={currentPolicy}
        selectedLevel={gradingData.latePolicy.level}
        onSelectLevel={updateLatePolicy}
        scoreCalculation={calculateTotalScore()}
      />
      
      {/* Policy Editor Modal */}
      {showPolicyEditor && (
        <PolicyEditor 
          policy={currentPolicy}
          templates={POLICY_TEMPLATES}
          onSave={(policyData) => {
            if (currentPolicy.isCustom) {
              updateCustomPolicy(currentPolicy.id, policyData);
            } else {
              const newPolicy = createCustomPolicy(policyData);
              selectPolicy(newPolicy);
            }
            setShowPolicyEditor(false);
          }}
          onCancel={() => setShowPolicyEditor(false)}
          onValidate={validatePolicy}
        />
      )}
    </div>
  );
};

// Supporting Components would include:
// - PolicySelector: Dropdown to choose between policies
// - LateSubmissionSelector: Current UI for selecting late levels
// - PolicyEditor: Modal for creating/editing custom policies
// - PolicyLevelEditor: Individual level configuration
// - PolicyPreview: Preview how policy affects grades

export default GradingTemplate;