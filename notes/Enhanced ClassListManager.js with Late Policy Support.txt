// Enhanced ClassListManager.js with Late Policy Support
// Maintains all existing functionality while adding late policy integration

import React, { useState, useRef, useEffect } from 'react';
import { parseExcelFile, validateStudentData } from '../utils/excelParser';
import { useAssessment } from './SharedContext';
import {
    Upload, Users, GraduationCap, FileSpreadsheet, CheckCircle, AlertCircle,
    ArrowRight, Edit3, Download, Trash2, RefreshCw, BookOpen, UserCheck,
    Clock, BarChart3, Target, Award, FileText, PlayCircle, Pause, Settings
} from 'lucide-react';

const ClassListManager = () => {
    // Pull classList, currentStudent & helpers from context - ENHANCED with late policy
    const {
        activeTab,
        setActiveTab,
        sharedRubric,
        gradingData,
        setGradingData,
        updateStudentInfo,
        updateCourseInfo,
        updateAssignmentInfo,
        clearGradingFormData,
        classList,
        setClassList,
        setCurrentStudent,
        gradingSession,
        setGradingSession,
        initializeGradingSession,
        hasDraft,
        loadDraft,
        // NEW: Late policy context
        currentLatePolicy,
        setCurrentLatePolicy,
        customLatePolicies,
        loadLatePoliciesFromStorage,
        calculateScoreWithLatePolicy
    } = useAssessment();

    const [currentStudentIndex, setCurrentStudentIndex] = useState(0);
    const [batchOperations, setBatchOperations] = useState({
        selectedStudents: [],
        exportQueue: [],
        isProcessing: false
    });
    const [loading, setLoading] = useState(false);
    const [importResult, setImportResult] = useState(null);
    const [showLatePolicySettings, setShowLatePolicySettings] = useState(false);

    const fileInputRef = useRef(null);

    // Load late policies when component mounts
    useEffect(() => {
        loadLatePoliciesFromStorage();
    }, [loadLatePoliciesFromStorage]);

    // Handle Excel file import - ENHANCED with late policy metadata
    const handleExcelImport = async (file) => {
        if (!file) return;
        setLoading(true);
        setImportResult(null);

        try {
            const result = await parseExcelFile(file);
            if (result.success) {
                const validatedData = await validateStudentData(result.data);
                
                // Enhanced class list with late policy support
                const enhancedClassList = {
                    ...validatedData,
                    courseMetadata: {
                        ...validatedData.courseMetadata,
                        // Include late policy information if available
                        latePolicyId: currentLatePolicy?.id || null,
                        latePolicyName: currentLatePolicy?.name || 'Standard Policy',
                        supportsCustomLatePolicies: true
                    },
                    importedAt: new Date().toISOString(),
                    version: '2.0' // Updated version with late policy support
                };

                setClassList(enhancedClassList);
                setImportResult({ 
                    success: true, 
                    message: `Successfully imported ${validatedData.students.length} students with late policy support`,
                    studentsCount: validatedData.students.length,
                    latePolicyInfo: currentLatePolicy ? {
                        name: currentLatePolicy.name,
                        levelsCount: Object.keys(currentLatePolicy.levels).length
                    } : null
                });

                // Auto-populate course information if available
                if (validatedData.courseMetadata) {
                    updateCourseInfo('code', validatedData.courseMetadata.courseCode || '');
                    updateCourseInfo('name', validatedData.courseMetadata.courseName || '');
                    updateCourseInfo('instructor', validatedData.courseMetadata.instructor || '');
                    updateCourseInfo('term', validatedData.courseMetadata.term || '');
                    
                    if (validatedData.courseMetadata.assignmentName) {
                        updateAssignmentInfo('name', validatedData.courseMetadata.assignmentName);
                    }
                    if (validatedData.courseMetadata.dueDate) {
                        updateAssignmentInfo('dueDate', validatedData.courseMetadata.dueDate);
                    }
                }
            } else {
                setImportResult({ 
                    success: false, 
                    message: result.error,
                    details: result.details || []
                });
            }
        } catch (error) {
            console.error('Excel import error:', error);
            setImportResult({ 
                success: false, 
                message: 'Failed to process Excel file. Please check the format and try again.',
                error: error.message
            });
        } finally {
            setLoading(false);
        }
    };

    // Navigate to specific student - ENHANCED with late policy context
    const selectStudent = (student, index) => {
        setCurrentStudent(student);
        setCurrentStudentIndex(index);
        
        // Load any existing draft for this student
        const existingDraft = hasDraft(student.id);
        if (existingDraft) {
            loadDraft(student.id);
        } else {
            // Initialize with student info and reset late policy
            updateStudentInfo('name', student.name || '');
            updateStudentInfo('id', student.id || '');
            updateStudentInfo('email', student.email || '');
            
            // Reset late policy to default state
            setGradingData(prev => ({
                ...prev,
                latePolicy: {
                    level: 'none',
                    penaltyApplied: false,
                    policyId: currentLatePolicy?.id || null,
                    originalScore: null,
                    adjustedScore: null,
                    multiplier: 1.0
                }
            }));
        }
        
        // Navigate to grading template
        setActiveTab('grading-template');
    };

    // Start batch grading session - ENHANCED with late policy awareness
    const startGradingSession = () => {
        if (!classList || !classList.students.length) {
            alert('Please import a class list first');
            return;
        }

        const success = initializeGradingSession(classList);
        if (success) {
            // Load the first student's data including any late policy settings
            const firstStudent = classList.students[0];
            selectStudent(firstStudent, 0);
            
            alert(`ðŸŽ¯ Grading session started! Ready to grade ${classList.students.length} students${currentLatePolicy ? ` with ${currentLatePolicy.name}` : ''}.`);
        }
    };

    // Get letter grade with late policy consideration - ENHANCED
    const getLetterGrade = (percentage, programType = 'diploma') => {
        // Apply late policy if student has penalty
        const scoreInfo = calculateScoreWithLatePolicy(percentage);
        const adjustedPercentage = scoreInfo.finalScore;

        // Standard grade scale mappings (can be enhanced with custom grading policies later)
        const gradeScales = {
            degree: [
                { min: 90, grade: 'A+', gpa: 4.0 },
                { min: 85, grade: 'A', gpa: 4.0 },
                { min: 80, grade: 'A-', gpa: 3.7 },
                { min: 77, grade: 'B+', gpa: 3.3 },
                { min: 73, grade: 'B', gpa: 3.0 },
                { min: 70, grade: 'B-', gpa: 2.7 },
                { min: 67, grade: 'C+', gpa: 2.3 },
                { min: 63, grade: 'C', gpa: 2.0 },
                { min: 60, grade: 'C-', gpa: 1.7 },
                { min: 57, grade: 'D+', gpa: 1.3 },
                { min: 53, grade: 'D', gpa: 1.0 },
                { min: 50, grade: 'D-', gpa: 0.7 },
                { min: 0, grade: 'F', gpa: 0.0 }
            ],
            diploma: [
                { min: 90, grade: 'A+', gpa: 4.0 },
                { min: 85, grade: 'A', gpa: 4.0 },
                { min: 80, grade: 'A-', gpa: 3.7 },
                { min: 75, grade: 'B+', gpa: 3.3 },
                { min: 70, grade: 'B', gpa: 3.0 },
                { min: 65, grade: 'B-', gpa: 2.7 },
                { min: 60, grade: 'C+', gpa: 2.3 },
                { min: 55, grade: 'C', gpa: 2.0 },
                { min: 50, grade: 'C-', gpa: 1.7 },
                { min: 0, grade: 'F', gpa: 0.0 }
            ]
        };

        const scale = gradeScales[programType] || gradeScales.diploma;
        const gradeInfo = scale.find(g => adjustedPercentage >= g.min) || scale[scale.length - 1];

        return {
            ...gradeInfo,
            originalPercentage: percentage,
            adjustedPercentage: adjustedPercentage,
            latePenaltyApplied: scoreInfo.penaltyApplied,
            latePolicyDescription: scoreInfo.policyDescription
        };
    };

    // Export class progress with late policy information - ENHANCED
    const exportClassProgress = () => {
        if (!classList) return;

        const progressData = classList.students.map(student => {
            const draft = hasDraft(student.id);
            const gradeStatus = draft ? 'draft' : 'not_started';
            
            // Calculate potential grade impact with current late policy
            let latePolicyInfo = {};
            if (currentLatePolicy && draft?.latePolicy) {
                const scoreInfo = calculateScoreWithLatePolicy(
                    draft.totalScore || 0, 
                    draft.latePolicy.level
                );
                latePolicyInfo = {
                    latePolicyApplied: scoreInfo.penaltyApplied,
                    originalScore: scoreInfo.rawScore,
                    adjustedScore: scoreInfo.finalScore,
                    penaltyPercentage: scoreInfo.penaltyApplied 
                        ? Math.round((1 - scoreInfo.multiplier) * 100) + '%'
                        : '0%'
                };
            }

            return {
                studentName: student.name,
                studentId: student.id,
                email: student.email,
                gradeStatus: gradeStatus,
                totalScore: draft?.totalScore || 0,
                ...latePolicyInfo,
                lastUpdated: draft?.savedAt || 'Never'
            };
        });

        // Create and download CSV
        const csvContent = [
            Object.keys(progressData[0]).join(','),
            ...progressData.map(row => Object.values(row).join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `class-progress-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    // Late Policy Settings Component
    const LatePolicySettings = () => (
        <div style={{
            marginTop: '1rem',
            padding: '1rem',
            backgroundColor: '#f8fafc',
            borderRadius: '0.5rem',
            border: '1px solid #e2e8f0'
        }}>
            <div style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: '1rem'
            }}>
                <h4 style={{
                    fontSize: '1rem',
                    fontWeight: '600',
                    color: '#374151',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem'
                }}>
                    <Clock size={18} />
                    Late Policy Settings
                </h4>
                <button
                    onClick={() => setShowLatePolicySettings(!showLatePolicySettings)}
                    style={{
                        padding: '0.5rem',
                        backgroundColor: 'transparent',
                        border: '1px solid #d1d5db',
                        borderRadius: '0.25rem',
                        cursor: 'pointer'
                    }}
                >
                    <Settings size={16} />
                </button>
            </div>

            {showLatePolicySettings && (
                <div style={{
                    display: 'grid',
                    gridTemplateColumns: '1fr auto',
                    gap: '1rem',
                    alignItems: 'center'
                }}>
                    <div>
                        <label style={{
                            display: 'block',
                            fontSize: '0.875rem',
                            fontWeight: '500',
                            color: '#374151',
                            marginBottom: '0.5rem'
                        }}>
                            Default Late Policy for New Classes:
                        </label>
                        <select
                            value={currentLatePolicy?.id || ''}
                            onChange={(e) => {
                                const selectedPolicy = customLatePolicies.find(p => p.id === e.target.value);
                                setCurrentLatePolicy(selectedPolicy || null);
                                localStorage.setItem('currentLatePolicy', JSON.stringify(selectedPolicy));
                            }}
                            style={{
                                padding: '0.5rem',
                                border: '1px solid #d1d5db',
                                borderRadius: '0.375rem',
                                fontSize: '0.875rem',
                                backgroundColor: 'white',
                                minWidth: '200px'
                            }}
                        >
                            <option value="">Standard Institutional Policy</option>
                            {customLatePolicies.map(policy => (
                                <option key={policy.id} value={policy.id}>
                                    {policy.name}
                                </option>
                            ))}
                        </select>
                    </div>
                    
                    <button
                        onClick={() => setActiveTab('grading-template')}
                        style={{
                            padding: '0.5rem 1rem',
                            backgroundColor: '#3b82f6',
                            color: 'white',
                            border: 'none',
                            borderRadius: '0.375rem',
                            fontSize: '0.875rem',
                            cursor: 'pointer',
                            whiteSpace: 'nowrap'
                        }}
                    >
                        Manage Policies
                    </button>
                </div>
            )}

            {currentLatePolicy && (
                <div style={{
                    marginTop: '0.75rem',
                    padding: '0.75rem',
                    backgroundColor: '#ecfdf5',
                    borderRadius: '0.375rem',
                    border: '1px solid #10b981'
                }}>
                    <div style={{ fontSize: '0.875rem', color: '#065f46' }}>
                        <strong>Active Policy:</strong> {currentLatePolicy.name}
                    </div>
                    <div style={{ fontSize: '0.75rem', color: '#047857', marginTop: '0.25rem' }}>
                        {currentLatePolicy.description} â€¢ {Object.keys(currentLatePolicy.levels).length} penalty levels
                    </div>
                </div>
            )}
        </div>
    );

    return (
        <div style={{ fontFamily: 'system-ui, -apple-system, sans-serif', maxWidth: '1200px', margin: '0 auto', padding: '1rem' }}>
            <div style={{ backgroundColor: 'white', borderRadius: '0.5rem', boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)', overflow: 'hidden' }}>
                {/* Header */}
                <div style={{
                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    color: 'white',
                    padding: '1.5rem',
                    textAlign: 'center'
                }}>
                    <h1 style={{ margin: 0, fontSize: '1.875rem', fontWeight: '700' }}>
                        ðŸ‘¥ Class List Manager
                    </h1>
                    <p style={{ margin: '0.5rem 0 0 0', opacity: 0.9 }}>
                        Import and manage student lists with late policy support
                    </p>
                </div>

                <div style={{ padding: '1.5rem' }}>
                    {/* Import Section */}
                    <div style={{
                        marginBottom: '1.5rem',
                        padding: '1rem',
                        backgroundColor: '#f8fafc',
                        borderRadius: '0.5rem',
                        border: '1px solid #e2e8f0'
                    }}>
                        <h3 style={{
                            fontSize: '1.125rem',
                            fontWeight: '600',
                            color: '#1f2937',
                            marginBottom: '1rem',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.5rem'
                        }}>
                            <Upload size={20} />
                            Import Student List
                        </h3>

                        <div style={{
                            display: 'flex',
                            gap: '1rem',
                            alignItems: 'center',
                            flexWrap: 'wrap'
                        }}>
                            <input
                                ref={fileInputRef}
                                type="file"
                                accept=".xlsx,.xls,.csv"
                                onChange={(e) => {
                                    const file = e.target.files[0];
                                    if (file) handleExcelImport(file);
                                }}
                                style={{ display: 'none' }}
                            />
                            
                            <button
                                onClick={() => fileInputRef.current?.click()}
                                disabled={loading}
                                style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '0.5rem',
                                    padding: '0.75rem 1.5rem',
                                    backgroundColor: loading ? '#9ca3af' : '#10b981',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '0.375rem',
                                    cursor: loading ? 'not-allowed' : 'pointer',
                                    fontSize: '0.875rem',
                                    fontWeight: '500'
                                }}
                            >
                                <FileSpreadsheet size={16} />
                                {loading ? 'Processing...' : 'Choose Excel File'}
                            </button>

                            <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>
                                Supports: .xlsx, .xls, .csv files
                            </div>
                        </div>

                        {/* Import Result */}
                        {importResult && (
                            <div style={{
                                marginTop: '1rem',
                                padding: '1rem',
                                backgroundColor: importResult.success ? '#ecfdf5' : '#fef2f2',
                                border: `1px solid ${importResult.success ? '#10b981' : '#ef4444'}`,
                                borderRadius: '0.375rem'
                            }}>
                                <div style={{
                                    display: 'flex',
                                    alignItems: 'flex-start',
                                    gap: '0.5rem'
                                }}>
                                    {importResult.success ? (
                                        <CheckCircle size={20} style={{ color: '#10b981', marginTop: '0.125rem' }} />
                                    ) : (
                                        <AlertCircle size={20} style={{ color: '#ef4444', marginTop: '0.125rem' }} />
                                    )}
                                    <div>
                                        <div style={{
                                            fontSize: '0.875rem',
                                            fontWeight: '600',
                                            color: importResult.success ? '#065f46' : '#7f1d1d'
                                        }}>
                                            {importResult.success ? 'Import Successful!' : 'Import Failed'}
                                        </div>
                                        <div style={{
                                            fontSize: '0.875rem',
                                            color: importResult.success ? '#047857' : '#991b1b',
                                            marginTop: '0.25rem'
                                        }}>
                                            {importResult.message}
                                        </div>
                                        
                                        {importResult.success && importResult.latePolicyInfo && (
                                            <div style={{
                                                fontSize: '0.75rem',
                                                color: '#047857',
                                                marginTop: '0.5rem',
                                                padding: '0.5rem',
                                                backgroundColor: '#d1fae5',
                                                borderRadius: '0.25rem'
                                            }}>
                                                <strong>Late Policy:</strong> {importResult.latePolicyInfo.name} 
                                                ({importResult.latePolicyInfo.levelsCount} levels configured)
                                            </div>
                                        )}

                                        {importResult.details && importResult.details.length > 0 && (
                                            <div style={{ marginTop: '0.5rem' }}>
                                                <div style={{
                                                    fontSize: '0.75rem',
                                                    fontWeight: '600',
                                                    color: importResult.success ? '#047857' : '#991b1b'
                                                }}>
                                                    Details:
                                                </div>
                                                <ul style={{
                                                    margin: '0.25rem 0 0 1rem',
                                                    fontSize: '0.75rem',
                                                    color: importResult.success ? '#047857' : '#991b1b'
                                                }}>
                                                    {importResult.details.map((detail, index) => (
                                                        <li key={index}>{detail}</li>
                                                    ))}
                                                </ul>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Late Policy Settings */}
                        <LatePolicySettings />
                    </div>

                    {/* Class List Display */}
                    {classList && (
                        <div style={{
                            marginBottom: '1.5rem',
                            padding: '1rem',
                            backgroundColor: '#ffffff',
                            borderRadius: '0.5rem',
                            border: '1px solid #e5e7eb'
                        }}>
                            <div style={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                marginBottom: '1rem'
                            }}>
                                <h3 style={{
                                    fontSize: '1.125rem',
                                    fontWeight: '600',
                                    color: '#1f2937',
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '0.5rem'
                                }}>
                                    <Users size={20} />
                                    Class List ({classList.students.length} students)
                                </h3>

                                <div style={{ display: 'flex', gap: '0.5rem' }}>
                                    <button
                                        onClick={startGradingSession}
                                        style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            padding: '0.5rem 1rem',
                                            backgroundColor: '#3b82f6',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: '0.375rem',
                                            cursor: 'pointer',
                                            fontSize: '0.875rem'
                                        }}
                                    >
                                        <PlayCircle size={16} />
                                        Start Grading
                                    </button>

                                    <button
                                        onClick={exportClassProgress}
                                        style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            padding: '0.5rem 1rem',
                                            backgroundColor: '#6b7280',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: '0.375rem',
                                            cursor: 'pointer',
                                            fontSize: '0.875rem'
                                        }}
                                    >
                                        <Download size={16} />
                                        Export Progress
                                    </button>
                                </div>
                            </div>

                            {/* Course Information Display */}
                            {classList.courseMetadata && (
                                <div style={{
                                    marginBottom: '1rem',
                                    padding: '0.75rem',
                                    backgroundColor: '#f9fafb',
                                    borderRadius: '0.375rem',
                                    fontSize: '0.875rem'
                                }}>
                                    <div style={{
                                        display: 'grid',
                                        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                                        gap: '0.75rem'
                                    }}>
                                        {classList.courseMetadata.courseCode && (
                                            <div>
                                                <span style={{ fontWeight: '600', color: '#374151' }}>Course: </span>
                                                <span style={{ color: '#6b7280' }}>{classList.courseMetadata.courseCode}</span>
                                            </div>
                                        )}
                                        {classList.courseMetadata.assignmentName && (
                                            <div>
                                                <span style={{ fontWeight: '600', color: '#374151' }}>Assignment: </span>
                                                <span style={{ color: '#6b7280' }}>{classList.courseMetadata.assignmentName}</span>
                                            </div>
                                        )}
                                        {classList.courseMetadata.latePolicyName && (
                                            <div>
                                                <span style={{ fontWeight: '600', color: '#374151' }}>Late Policy: </span>
                                                <span style={{ color: '#10b981' }}>{classList.courseMetadata.latePolicyName}</span>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* Students Table */}
                            <div style={{ overflowX: 'auto' }}>
                                <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                                    <thead>
                                        <tr style={{ backgroundColor: '#f9fafb' }}>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'left',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                #
                                            </th>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'left',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                Name
                                            </th>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'left',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                Student ID
                                            </th>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'left',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                Email
                                            </th>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'center',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                Status
                                            </th>
                                            <th style={{
                                                padding: '0.75rem',
                                                textAlign: 'center',
                                                fontSize: '0.875rem',
                                                fontWeight: '600',
                                                color: '#374151',
                                                borderBottom: '1px solid #e5e7eb'
                                            }}>
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {classList.students.map((student, index) => {
                                            const draft = hasDraft(student.id);
                                            const hasLateInfo = draft?.latePolicy?.penaltyApplied;
                                            
                                            return (
                                                <tr
                                                    key={student.id}
                                                    style={{
                                                        backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb',
                                                        borderBottom: '1px solid #e5e7eb'
                                                    }}
                                                >
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        fontSize: '0.875rem',
                                                        color: '#6b7280'
                                                    }}>
                                                        {index + 1}
                                                    </td>
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        fontSize: '0.875rem',
                                                        color: '#1f2937',
                                                        fontWeight: '500'
                                                    }}>
                                                        {student.name}
                                                    </td>
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        fontSize: '0.875rem',
                                                        color: '#6b7280'
                                                    }}>
                                                        {student.id}
                                                    </td>
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        fontSize: '0.875rem',
                                                        color: '#6b7280'
                                                    }}>
                                                        {student.email}
                                                    </td>
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        textAlign: 'center'
                                                    }}>
                                                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.25rem' }}>
                                                            <span style={{
                                                                padding: '0.25rem 0.5rem',
                                                                fontSize: '0.75rem',
                                                                fontWeight: '500',
                                                                borderRadius: '0.25rem',
                                                                backgroundColor: draft ? '#dbeafe' : '#f3f4f6',
                                                                color: draft ? '#1e40af' : '#6b7280'
                                                            }}>
                                                                {draft ? 'Draft Saved' : 'Not Started'}
                                                            </span>
                                                            {hasLateInfo && (
                                                                <span style={{
                                                                    padding: '0.25rem 0.5rem',
                                                                    fontSize: '0.75rem',
                                                                    fontWeight: '500',
                                                                    borderRadius: '0.25rem',
                                                                    backgroundColor: '#fef3c7',
                                                                    color: '#92400e'
                                                                }}>
                                                                    Late Penalty
                                                                </span>
                                                            )}
                                                        </div>
                                                    </td>
                                                    <td style={{
                                                        padding: '0.75rem',
                                                        textAlign: 'center'
                                                    }}>
                                                        <button
                                                            onClick={() => selectStudent(student, index)}
                                                            style={{
                                                                display: 'flex',
                                                                alignItems: 'center',
                                                                gap: '0.25rem',
                                                                padding: '0.375rem 0.75rem',
                                                                backgroundColor: '#10b981',
                                                                color: 'white',
                                                                border: 'none',
                                                                borderRadius: '0.25rem',
                                                                cursor: 'pointer',
                                                                fontSize: '0.75rem',
                                                                margin: '0 auto'
                                                            }}
                                                        >
                                                            <Edit3 size={12} />
                                                            Grade
                                                        </button>
                                                    </td>
                                                </tr>
                                            );
                                        })}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    )}

                    {/* Quick Actions */}
                    {classList && (
                        <div style={{
                            display: 'grid',
                            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                            gap: '1rem',
                            marginTop: '1rem'
                        }}>
                            <div style={{
                                padding: '1rem',
                                backgroundColor: '#f0f9ff',
                                borderRadius: '0.5rem',
                                border: '1px solid #0ea5e9',
                                textAlign: 'center'
                            }}>
                                <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#0c4a6e' }}>
                                    {classList.students.length}
                                </div>
                                <div style={{ fontSize: '0.875rem', color: '#075985' }}>
                                    Total Students
                                </div>
                            </div>

                            <div style={{
                                padding: '1rem',
                                backgroundColor: '#ecfdf5',
                                borderRadius: '0.5rem',
                                border: '1px solid #10b981',
                                textAlign: 'center'
                            }}>
                                <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#065f46' }}>
                                    {classList.students.filter(s => hasDraft(s.id)).length}
                                </div>
                                <div style={{ fontSize: '0.875rem', color: '#047857' }}>
                                    Graded
                                </div>
                            </div>

                            <div style={{
                                padding: '1rem',
                                backgroundColor: '#fef3c7',
                                borderRadius: '0.5rem',
                                border: '1px solid #f59e0b',
                                textAlign: 'center'
                            }}>
                                <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#92400e' }}>
                                    {classList.students.filter(s => {
                                        const draft = hasDraft(s.id);
                                        return draft?.latePolicy?.penaltyApplied;
                                    }).length}
                                </div>
                                <div style={{ fontSize: '0.875rem', color: '#a16207' }}>
                                    Late Penalties
                                </div>
                            </div>

                            <div style={{
                                padding: '1rem',
                                backgroundColor: '#f3f4f6',
                                borderRadius: '0.5rem',
                                border: '1px solid #9ca3af',
                                textAlign: 'center'
                            }}>
                                <div style={{ fontSize: '1.5rem', fontWeight: '700', color: '#374151' }}>
                                    {Math.round((classList.students.filter(s => hasDraft(s.id)).length / classList.students.length) * 100)}%
                                </div>
                                <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>
                                    Progress
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ClassListManager;